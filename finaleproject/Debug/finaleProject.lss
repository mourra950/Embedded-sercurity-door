
finaleProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  000031b0  00003244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000da  008000da  000032be  2**0
                  ALLOC
  3 .stab         00002f34  00000000  00000000  000032c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000119b  00000000  00000000  000061f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000738f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000074cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000763f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009288  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a173  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000af20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b30d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000badb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3d       	cpi	r26, 0xDC	; 220
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <main>
      8a:	0c 94 d6 18 	jmp	0x31ac	; 0x31ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5a 18 	jmp	0x30b4	; 0x30b4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ec       	ldi	r26, 0xCD	; 205
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5a 18 	jmp	0x30b4	; 0x30b4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d ec       	ldi	r24, 0xCD	; 205
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 86 18 	jmp	0x310c	; 0x310c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <printStar>:
#include "common_macros.h"
#include "std_types.h"

#define MC2_READY 0x10

void printStar() {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	LCD_displayCharacter('*');
     b5a:	8a e2       	ldi	r24, 0x2A	; 42
     b5c:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_displayCharacter>
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	aa ef       	ldi	r26, 0xFA	; 250
     b66:	b3 e4       	ldi	r27, 0x43	; 67
     b68:	8b 87       	std	Y+11, r24	; 0x0b
     b6a:	9c 87       	std	Y+12, r25	; 0x0c
     b6c:	ad 87       	std	Y+13, r26	; 0x0d
     b6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b70:	6b 85       	ldd	r22, Y+11	; 0x0b
     b72:	7c 85       	ldd	r23, Y+12	; 0x0c
     b74:	8d 85       	ldd	r24, Y+13	; 0x0d
     b76:	9e 85       	ldd	r25, Y+14	; 0x0e
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	4a ef       	ldi	r20, 0xFA	; 250
     b7e:	54 e4       	ldi	r21, 0x44	; 68
     b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b84:	dc 01       	movw	r26, r24
     b86:	cb 01       	movw	r24, r22
     b88:	8f 83       	std	Y+7, r24	; 0x07
     b8a:	98 87       	std	Y+8, r25	; 0x08
     b8c:	a9 87       	std	Y+9, r26	; 0x09
     b8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b90:	6f 81       	ldd	r22, Y+7	; 0x07
     b92:	78 85       	ldd	r23, Y+8	; 0x08
     b94:	89 85       	ldd	r24, Y+9	; 0x09
     b96:	9a 85       	ldd	r25, Y+10	; 0x0a
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	40 e8       	ldi	r20, 0x80	; 128
     b9e:	5f e3       	ldi	r21, 0x3F	; 63
     ba0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ba4:	88 23       	and	r24, r24
     ba6:	2c f4       	brge	.+10     	; 0xbb2 <printStar+0x6c>
		__ticks = 1;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	9e 83       	std	Y+6, r25	; 0x06
     bae:	8d 83       	std	Y+5, r24	; 0x05
     bb0:	3f c0       	rjmp	.+126    	; 0xc30 <printStar+0xea>
	else if (__tmp > 65535)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	3f ef       	ldi	r19, 0xFF	; 255
     bbe:	4f e7       	ldi	r20, 0x7F	; 127
     bc0:	57 e4       	ldi	r21, 0x47	; 71
     bc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bc6:	18 16       	cp	r1, r24
     bc8:	4c f5       	brge	.+82     	; 0xc1c <printStar+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bca:	6b 85       	ldd	r22, Y+11	; 0x0b
     bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
     bce:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 e2       	ldi	r20, 0x20	; 32
     bd8:	51 e4       	ldi	r21, 0x41	; 65
     bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	bc 01       	movw	r22, r24
     be4:	cd 01       	movw	r24, r26
     be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bea:	dc 01       	movw	r26, r24
     bec:	cb 01       	movw	r24, r22
     bee:	9e 83       	std	Y+6, r25	; 0x06
     bf0:	8d 83       	std	Y+5, r24	; 0x05
     bf2:	0f c0       	rjmp	.+30     	; 0xc12 <printStar+0xcc>
     bf4:	88 ec       	ldi	r24, 0xC8	; 200
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	9c 83       	std	Y+4, r25	; 0x04
     bfa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	9c 81       	ldd	r25, Y+4	; 0x04
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	f1 f7       	brne	.-4      	; 0xc00 <printStar+0xba>
     c04:	9c 83       	std	Y+4, r25	; 0x04
     c06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c08:	8d 81       	ldd	r24, Y+5	; 0x05
     c0a:	9e 81       	ldd	r25, Y+6	; 0x06
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	9e 83       	std	Y+6, r25	; 0x06
     c10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c12:	8d 81       	ldd	r24, Y+5	; 0x05
     c14:	9e 81       	ldd	r25, Y+6	; 0x06
     c16:	00 97       	sbiw	r24, 0x00	; 0
     c18:	69 f7       	brne	.-38     	; 0xbf4 <printStar+0xae>
     c1a:	14 c0       	rjmp	.+40     	; 0xc44 <printStar+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c1c:	6f 81       	ldd	r22, Y+7	; 0x07
     c1e:	78 85       	ldd	r23, Y+8	; 0x08
     c20:	89 85       	ldd	r24, Y+9	; 0x09
     c22:	9a 85       	ldd	r25, Y+10	; 0x0a
     c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	9e 83       	std	Y+6, r25	; 0x06
     c2e:	8d 83       	std	Y+5, r24	; 0x05
     c30:	8d 81       	ldd	r24, Y+5	; 0x05
     c32:	9e 81       	ldd	r25, Y+6	; 0x06
     c34:	9a 83       	std	Y+2, r25	; 0x02
     c36:	89 83       	std	Y+1, r24	; 0x01
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	9a 81       	ldd	r25, Y+2	; 0x02
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <printStar+0xf6>
     c40:	9a 83       	std	Y+2, r25	; 0x02
     c42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
     c44:	2e 96       	adiw	r28, 0x0e	; 14
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	08 95       	ret

00000c56 <ShortMessage>:

void ShortMessage(uint8 s) {
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	2f 97       	sbiw	r28, 0x0f	; 15
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	8f 87       	std	Y+15, r24	; 0x0f

	LCD_clearScreen();
     c6c:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LCD_clearScreen>
	if (s == 0)
     c70:	8f 85       	ldd	r24, Y+15	; 0x0f
     c72:	88 23       	and	r24, r24
     c74:	29 f4       	brne	.+10     	; 0xc80 <ShortMessage+0x2a>
		LCD_displayString("Success");
     c76:	80 e6       	ldi	r24, 0x60	; 96
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <LCD_displayString>
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <ShortMessage+0x32>
	else
		LCD_displayString("Failed Try again");
     c80:	88 e6       	ldi	r24, 0x68	; 104
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 83 16 	call	0x2d06	; 0x2d06 <LCD_displayString>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	aa e7       	ldi	r26, 0x7A	; 122
     c8e:	b4 e4       	ldi	r27, 0x44	; 68
     c90:	8b 87       	std	Y+11, r24	; 0x0b
     c92:	9c 87       	std	Y+12, r25	; 0x0c
     c94:	ad 87       	std	Y+13, r26	; 0x0d
     c96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c98:	6b 85       	ldd	r22, Y+11	; 0x0b
     c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	4a ef       	ldi	r20, 0xFA	; 250
     ca6:	54 e4       	ldi	r21, 0x44	; 68
     ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	8f 83       	std	Y+7, r24	; 0x07
     cb2:	98 87       	std	Y+8, r25	; 0x08
     cb4:	a9 87       	std	Y+9, r26	; 0x09
     cb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cb8:	6f 81       	ldd	r22, Y+7	; 0x07
     cba:	78 85       	ldd	r23, Y+8	; 0x08
     cbc:	89 85       	ldd	r24, Y+9	; 0x09
     cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e8       	ldi	r20, 0x80	; 128
     cc6:	5f e3       	ldi	r21, 0x3F	; 63
     cc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ccc:	88 23       	and	r24, r24
     cce:	2c f4       	brge	.+10     	; 0xcda <ShortMessage+0x84>
		__ticks = 1;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	9e 83       	std	Y+6, r25	; 0x06
     cd6:	8d 83       	std	Y+5, r24	; 0x05
     cd8:	3f c0       	rjmp	.+126    	; 0xd58 <ShortMessage+0x102>
	else if (__tmp > 65535)
     cda:	6f 81       	ldd	r22, Y+7	; 0x07
     cdc:	78 85       	ldd	r23, Y+8	; 0x08
     cde:	89 85       	ldd	r24, Y+9	; 0x09
     ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	3f ef       	ldi	r19, 0xFF	; 255
     ce6:	4f e7       	ldi	r20, 0x7F	; 127
     ce8:	57 e4       	ldi	r21, 0x47	; 71
     cea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cee:	18 16       	cp	r1, r24
     cf0:	4c f5       	brge	.+82     	; 0xd44 <ShortMessage+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	40 e2       	ldi	r20, 0x20	; 32
     d00:	51 e4       	ldi	r21, 0x41	; 65
     d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	bc 01       	movw	r22, r24
     d0c:	cd 01       	movw	r24, r26
     d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	9e 83       	std	Y+6, r25	; 0x06
     d18:	8d 83       	std	Y+5, r24	; 0x05
     d1a:	0f c0       	rjmp	.+30     	; 0xd3a <ShortMessage+0xe4>
     d1c:	88 ec       	ldi	r24, 0xC8	; 200
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	9c 83       	std	Y+4, r25	; 0x04
     d22:	8b 83       	std	Y+3, r24	; 0x03
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	9c 81       	ldd	r25, Y+4	; 0x04
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <ShortMessage+0xd2>
     d2c:	9c 83       	std	Y+4, r25	; 0x04
     d2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
     d32:	9e 81       	ldd	r25, Y+6	; 0x06
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	9e 83       	std	Y+6, r25	; 0x06
     d38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d3a:	8d 81       	ldd	r24, Y+5	; 0x05
     d3c:	9e 81       	ldd	r25, Y+6	; 0x06
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	69 f7       	brne	.-38     	; 0xd1c <ShortMessage+0xc6>
     d42:	14 c0       	rjmp	.+40     	; 0xd6c <ShortMessage+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d44:	6f 81       	ldd	r22, Y+7	; 0x07
     d46:	78 85       	ldd	r23, Y+8	; 0x08
     d48:	89 85       	ldd	r24, Y+9	; 0x09
     d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	9e 83       	std	Y+6, r25	; 0x06
     d56:	8d 83       	std	Y+5, r24	; 0x05
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	9e 81       	ldd	r25, Y+6	; 0x06
     d5c:	9a 83       	std	Y+2, r25	; 0x02
     d5e:	89 83       	std	Y+1, r24	; 0x01
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	9a 81       	ldd	r25, Y+2	; 0x02
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <ShortMessage+0x10e>
     d68:	9a 83       	std	Y+2, r25	; 0x02
     d6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearScreen();
     d6c:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LCD_clearScreen>

}
     d70:	2f 96       	adiw	r28, 0x0f	; 15
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <case1>:
/*Case 1 is the entry of the program when the system start
 *ask for password twice if they are equal to each
 *advance to case 2
 *else go to case 1 again
*/
uint8 case1(void) {
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	00 d0       	rcall	.+0      	; 0xd88 <case1+0x6>
     d88:	00 d0       	rcall	.+0      	; 0xd8a <case1+0x8>
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
	//clear screen to start the program
	LCD_clearScreen();
     d8e:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LCD_clearScreen>
	LCD_displayString("Pass :");
     d92:	89 e7       	ldi	r24, 0x79	; 121
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 83 16 	call	0x2d06	; 0x2d06 <LCD_displayString>
	LCD_moveCursor(1, 0);
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <LCD_moveCursor>
	//

	uint8 key, count = 0, response = 0;
     da2:	1a 82       	std	Y+2, r1	; 0x02
     da4:	19 82       	std	Y+1, r1	; 0x01
     da6:	0e c0       	rjmp	.+28     	; 0xdc4 <case1+0x42>
	while (count < 4) {
		key = KEYPAD_getPressedKey();
     da8:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <KEYPAD_getPressedKey>
     dac:	8b 83       	std	Y+3, r24	; 0x03
		if ((key >= 0) && (key <= 9)) {
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	8a 30       	cpi	r24, 0x0A	; 10
     db2:	40 f4       	brcc	.+16     	; 0xdc4 <case1+0x42>
			count++;
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	8f 5f       	subi	r24, 0xFF	; 255
     db8:	8a 83       	std	Y+2, r24	; 0x02
			UART_sendByte(key);
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <UART_sendByte>
			printStar();
     dc0:	0e 94 a3 05 	call	0xb46	; 0xb46 <printStar>
	LCD_displayString("Pass :");
	LCD_moveCursor(1, 0);
	//

	uint8 key, count = 0, response = 0;
	while (count < 4) {
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	84 30       	cpi	r24, 0x04	; 4
     dc8:	78 f3       	brcs	.-34     	; 0xda8 <case1+0x26>
			UART_sendByte(key);
			printStar();
		}
	}

	LCD_clearScreen();
     dca:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LCD_clearScreen>
	LCD_displayString("AGAIN :");
     dce:	80 e8       	ldi	r24, 0x80	; 128
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 83 16 	call	0x2d06	; 0x2d06 <LCD_displayString>
	LCD_moveCursor(1, 0);
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <LCD_moveCursor>
     dde:	0e c0       	rjmp	.+28     	; 0xdfc <case1+0x7a>

	while (count < 8) {
		key = KEYPAD_getPressedKey();
     de0:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <KEYPAD_getPressedKey>
     de4:	8b 83       	std	Y+3, r24	; 0x03
		if ((key >= 0) && (key <= 9)) {
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	8a 30       	cpi	r24, 0x0A	; 10
     dea:	40 f4       	brcc	.+16     	; 0xdfc <case1+0x7a>
			count++;
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	8a 83       	std	Y+2, r24	; 0x02
			UART_sendByte(key);
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <UART_sendByte>
			printStar();
     df8:	0e 94 a3 05 	call	0xb46	; 0xb46 <printStar>

	LCD_clearScreen();
	LCD_displayString("AGAIN :");
	LCD_moveCursor(1, 0);

	while (count < 8) {
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	88 30       	cpi	r24, 0x08	; 8
     e00:	78 f3       	brcs	.-34     	; 0xde0 <case1+0x5e>
			UART_sendByte(key);
			printStar();
		}
	}

	LCD_clearScreen();
     e02:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LCD_clearScreen>
	response = UART_recieveByte();
     e06:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <UART_recieveByte>
     e0a:	89 83       	std	Y+1, r24	; 0x01

	//response = 1 means success
	if (response == 2) {
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <case1+0x9c>
		ShortMessage(0);
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	0e 94 2b 06 	call	0xc56	; 0xc56 <ShortMessage>
		return 2;
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	8c 83       	std	Y+4, r24	; 0x04
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <case1+0xa6>
	} else {
		ShortMessage(1);
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	0e 94 2b 06 	call	0xc56	; 0xc56 <ShortMessage>
		return 1;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	8c 83       	std	Y+4, r24	; 0x04
     e28:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <case2>:

uint8 case2(void) {
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <case2+0x6>
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
	uint8 key = 0;
     e42:	19 82       	std	Y+1, r1	; 0x01
	LCD_clearScreen();
     e44:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "open door : +");
     e48:	28 e8       	ldi	r18, 0x88	; 136
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	a9 01       	movw	r20, r18
     e52:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Change Pass : -");
     e56:	26 e9       	ldi	r18, 0x96	; 150
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	a9 01       	movw	r20, r18
     e60:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_displayStringRowColumn>
	while (1) {
		key = KEYPAD_getPressedKey();
     e64:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <KEYPAD_getPressedKey>
     e68:	89 83       	std	Y+1, r24	; 0x01
		if (key == '+') {
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	8b 32       	cpi	r24, 0x2B	; 43
     e6e:	31 f4       	brne	.+12     	; 0xe7c <case2+0x44>
			UART_sendByte(3);
     e70:	83 e0       	ldi	r24, 0x03	; 3
     e72:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <UART_sendByte>
			return 3;
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8a 83       	std	Y+2, r24	; 0x02
     e7a:	08 c0       	rjmp	.+16     	; 0xe8c <case2+0x54>
		} else if (key == '-') {
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	8d 32       	cpi	r24, 0x2D	; 45
     e80:	89 f7       	brne	.-30     	; 0xe64 <case2+0x2c>
			UART_sendByte(4);
     e82:	84 e0       	ldi	r24, 0x04	; 4
     e84:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <UART_sendByte>
			return 4;
     e88:	84 e0       	ldi	r24, 0x04	; 4
     e8a:	8a 83       	std	Y+2, r24	; 0x02
		}
	}
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <case3>:

uint8 case3(void) {
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	a3 97       	sbiw	r28, 0x23	; 35
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0, response = 0;
     eac:	19 a2       	std	Y+33, r1	; 0x21
     eae:	18 a2       	std	Y+32, r1	; 0x20
	LCD_clearScreen();
     eb0:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "enter P:");
     eb4:	26 ea       	ldi	r18, 0xA6	; 166
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	a9 01       	movw	r20, r18
     ebe:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <LCD_moveCursor>
	uint8 count1 = 0;
     eca:	1f 8e       	std	Y+31, r1	; 0x1f

	for (int i = 0; i < 4; i++) {
     ecc:	1e 8e       	std	Y+30, r1	; 0x1e
     ece:	1d 8e       	std	Y+29, r1	; 0x1d
     ed0:	85 c0       	rjmp	.+266    	; 0xfdc <case3+0x144>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	a8 e4       	ldi	r26, 0x48	; 72
     ed8:	b3 e4       	ldi	r27, 0x43	; 67
     eda:	89 8f       	std	Y+25, r24	; 0x19
     edc:	9a 8f       	std	Y+26, r25	; 0x1a
     ede:	ab 8f       	std	Y+27, r26	; 0x1b
     ee0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee2:	69 8d       	ldd	r22, Y+25	; 0x19
     ee4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ee6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ee8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	4a ef       	ldi	r20, 0xFA	; 250
     ef0:	54 e4       	ldi	r21, 0x44	; 68
     ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	8d 8b       	std	Y+21, r24	; 0x15
     efc:	9e 8b       	std	Y+22, r25	; 0x16
     efe:	af 8b       	std	Y+23, r26	; 0x17
     f00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f02:	6d 89       	ldd	r22, Y+21	; 0x15
     f04:	7e 89       	ldd	r23, Y+22	; 0x16
     f06:	8f 89       	ldd	r24, Y+23	; 0x17
     f08:	98 8d       	ldd	r25, Y+24	; 0x18
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e8       	ldi	r20, 0x80	; 128
     f10:	5f e3       	ldi	r21, 0x3F	; 63
     f12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f16:	88 23       	and	r24, r24
     f18:	2c f4       	brge	.+10     	; 0xf24 <case3+0x8c>
		__ticks = 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	9c 8b       	std	Y+20, r25	; 0x14
     f20:	8b 8b       	std	Y+19, r24	; 0x13
     f22:	3f c0       	rjmp	.+126    	; 0xfa2 <case3+0x10a>
	else if (__tmp > 65535)
     f24:	6d 89       	ldd	r22, Y+21	; 0x15
     f26:	7e 89       	ldd	r23, Y+22	; 0x16
     f28:	8f 89       	ldd	r24, Y+23	; 0x17
     f2a:	98 8d       	ldd	r25, Y+24	; 0x18
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	3f ef       	ldi	r19, 0xFF	; 255
     f30:	4f e7       	ldi	r20, 0x7F	; 127
     f32:	57 e4       	ldi	r21, 0x47	; 71
     f34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f38:	18 16       	cp	r1, r24
     f3a:	4c f5       	brge	.+82     	; 0xf8e <case3+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3c:	69 8d       	ldd	r22, Y+25	; 0x19
     f3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f40:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f42:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e2       	ldi	r20, 0x20	; 32
     f4a:	51 e4       	ldi	r21, 0x41	; 65
     f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	9c 8b       	std	Y+20, r25	; 0x14
     f62:	8b 8b       	std	Y+19, r24	; 0x13
     f64:	0f c0       	rjmp	.+30     	; 0xf84 <case3+0xec>
     f66:	88 ec       	ldi	r24, 0xC8	; 200
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9a 8b       	std	Y+18, r25	; 0x12
     f6c:	89 8b       	std	Y+17, r24	; 0x11
     f6e:	89 89       	ldd	r24, Y+17	; 0x11
     f70:	9a 89       	ldd	r25, Y+18	; 0x12
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <case3+0xda>
     f76:	9a 8b       	std	Y+18, r25	; 0x12
     f78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7a:	8b 89       	ldd	r24, Y+19	; 0x13
     f7c:	9c 89       	ldd	r25, Y+20	; 0x14
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	9c 8b       	std	Y+20, r25	; 0x14
     f82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f84:	8b 89       	ldd	r24, Y+19	; 0x13
     f86:	9c 89       	ldd	r25, Y+20	; 0x14
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	69 f7       	brne	.-38     	; 0xf66 <case3+0xce>
     f8c:	14 c0       	rjmp	.+40     	; 0xfb6 <case3+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8e:	6d 89       	ldd	r22, Y+21	; 0x15
     f90:	7e 89       	ldd	r23, Y+22	; 0x16
     f92:	8f 89       	ldd	r24, Y+23	; 0x17
     f94:	98 8d       	ldd	r25, Y+24	; 0x18
     f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	9c 8b       	std	Y+20, r25	; 0x14
     fa0:	8b 8b       	std	Y+19, r24	; 0x13
     fa2:	8b 89       	ldd	r24, Y+19	; 0x13
     fa4:	9c 89       	ldd	r25, Y+20	; 0x14
     fa6:	98 8b       	std	Y+16, r25	; 0x10
     fa8:	8f 87       	std	Y+15, r24	; 0x0f
     faa:	8f 85       	ldd	r24, Y+15	; 0x0f
     fac:	98 89       	ldd	r25, Y+16	; 0x10
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <case3+0x116>
     fb2:	98 8b       	std	Y+16, r25	; 0x10
     fb4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		key = KEYPAD_getPressedKey();
     fb6:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <KEYPAD_getPressedKey>
     fba:	89 a3       	std	Y+33, r24	; 0x21
		if ((key >= 0) && (key <= 9)) {
     fbc:	89 a1       	ldd	r24, Y+33	; 0x21
     fbe:	8a 30       	cpi	r24, 0x0A	; 10
     fc0:	40 f4       	brcc	.+16     	; 0xfd2 <case3+0x13a>
			count1++;
     fc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fc4:	8f 5f       	subi	r24, 0xFF	; 255
     fc6:	8f 8f       	std	Y+31, r24	; 0x1f
			UART_sendByte(key);
     fc8:	89 a1       	ldd	r24, Y+33	; 0x21
     fca:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <UART_sendByte>
			printStar();
     fce:	0e 94 a3 05 	call	0xb46	; 0xb46 <printStar>
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "enter P:");
	LCD_moveCursor(1, 0);
	uint8 count1 = 0;

	for (int i = 0; i < 4; i++) {
     fd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fd4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	9e 8f       	std	Y+30, r25	; 0x1e
     fda:	8d 8f       	std	Y+29, r24	; 0x1d
     fdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fde:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fe0:	84 30       	cpi	r24, 0x04	; 4
     fe2:	91 05       	cpc	r25, r1
     fe4:	0c f4       	brge	.+2      	; 0xfe8 <case3+0x150>
     fe6:	75 cf       	rjmp	.-278    	; 0xed2 <case3+0x3a>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a8 e4       	ldi	r26, 0x48	; 72
     fee:	b3 e4       	ldi	r27, 0x43	; 67
     ff0:	8b 87       	std	Y+11, r24	; 0x0b
     ff2:	9c 87       	std	Y+12, r25	; 0x0c
     ff4:	ad 87       	std	Y+13, r26	; 0x0d
     ff6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
     ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	4a ef       	ldi	r20, 0xFA	; 250
    1006:	54 e4       	ldi	r21, 0x44	; 68
    1008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	8f 83       	std	Y+7, r24	; 0x07
    1012:	98 87       	std	Y+8, r25	; 0x08
    1014:	a9 87       	std	Y+9, r26	; 0x09
    1016:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1018:	6f 81       	ldd	r22, Y+7	; 0x07
    101a:	78 85       	ldd	r23, Y+8	; 0x08
    101c:	89 85       	ldd	r24, Y+9	; 0x09
    101e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e8       	ldi	r20, 0x80	; 128
    1026:	5f e3       	ldi	r21, 0x3F	; 63
    1028:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    102c:	88 23       	and	r24, r24
    102e:	2c f4       	brge	.+10     	; 0x103a <case3+0x1a2>
		__ticks = 1;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9e 83       	std	Y+6, r25	; 0x06
    1036:	8d 83       	std	Y+5, r24	; 0x05
    1038:	3f c0       	rjmp	.+126    	; 0x10b8 <case3+0x220>
	else if (__tmp > 65535)
    103a:	6f 81       	ldd	r22, Y+7	; 0x07
    103c:	78 85       	ldd	r23, Y+8	; 0x08
    103e:	89 85       	ldd	r24, Y+9	; 0x09
    1040:	9a 85       	ldd	r25, Y+10	; 0x0a
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	3f ef       	ldi	r19, 0xFF	; 255
    1046:	4f e7       	ldi	r20, 0x7F	; 127
    1048:	57 e4       	ldi	r21, 0x47	; 71
    104a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    104e:	18 16       	cp	r1, r24
    1050:	4c f5       	brge	.+82     	; 0x10a4 <case3+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1052:	6b 85       	ldd	r22, Y+11	; 0x0b
    1054:	7c 85       	ldd	r23, Y+12	; 0x0c
    1056:	8d 85       	ldd	r24, Y+13	; 0x0d
    1058:	9e 85       	ldd	r25, Y+14	; 0x0e
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e2       	ldi	r20, 0x20	; 32
    1060:	51 e4       	ldi	r21, 0x41	; 65
    1062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	bc 01       	movw	r22, r24
    106c:	cd 01       	movw	r24, r26
    106e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	9e 83       	std	Y+6, r25	; 0x06
    1078:	8d 83       	std	Y+5, r24	; 0x05
    107a:	0f c0       	rjmp	.+30     	; 0x109a <case3+0x202>
    107c:	88 ec       	ldi	r24, 0xC8	; 200
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	9c 83       	std	Y+4, r25	; 0x04
    1082:	8b 83       	std	Y+3, r24	; 0x03
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	9c 81       	ldd	r25, Y+4	; 0x04
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <case3+0x1f0>
    108c:	9c 83       	std	Y+4, r25	; 0x04
    108e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	9e 83       	std	Y+6, r25	; 0x06
    1098:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	69 f7       	brne	.-38     	; 0x107c <case3+0x1e4>
    10a2:	14 c0       	rjmp	.+40     	; 0x10cc <case3+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a4:	6f 81       	ldd	r22, Y+7	; 0x07
    10a6:	78 85       	ldd	r23, Y+8	; 0x08
    10a8:	89 85       	ldd	r24, Y+9	; 0x09
    10aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	9e 83       	std	Y+6, r25	; 0x06
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	9e 81       	ldd	r25, Y+6	; 0x06
    10bc:	9a 83       	std	Y+2, r25	; 0x02
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	9a 81       	ldd	r25, Y+2	; 0x02
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <case3+0x22c>
    10c8:	9a 83       	std	Y+2, r25	; 0x02
    10ca:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	_delay_ms(200);

	response = UART_recieveByte();
    10cc:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <UART_recieveByte>
    10d0:	88 a3       	std	Y+32, r24	; 0x20
//	LCD_intgerToString(response);
	if (response == 5) {
    10d2:	88 a1       	ldd	r24, Y+32	; 0x20
    10d4:	85 30       	cpi	r24, 0x05	; 5
    10d6:	19 f4       	brne	.+6      	; 0x10de <case3+0x246>
		return 5;
    10d8:	85 e0       	ldi	r24, 0x05	; 5
    10da:	8a a3       	std	Y+34, r24	; 0x22
    10dc:	0d c0       	rjmp	.+26     	; 0x10f8 <case3+0x260>
	} else if (response == 3) {
    10de:	88 a1       	ldd	r24, Y+32	; 0x20
    10e0:	83 30       	cpi	r24, 0x03	; 3
    10e2:	19 f4       	brne	.+6      	; 0x10ea <case3+0x252>
		return 3;
    10e4:	83 e0       	ldi	r24, 0x03	; 3
    10e6:	8a a3       	std	Y+34, r24	; 0x22
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <case3+0x260>
	} else if (response == 2) {
    10ea:	88 a1       	ldd	r24, Y+32	; 0x20
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	19 f4       	brne	.+6      	; 0x10f6 <case3+0x25e>
		return 2;
    10f0:	82 e0       	ldi	r24, 0x02	; 2
    10f2:	8a a3       	std	Y+34, r24	; 0x22
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <case3+0x260>
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <case3+0x264>
	}

}
    10f8:	8a a1       	ldd	r24, Y+34	; 0x22
    10fa:	8b a3       	std	Y+35, r24	; 0x23
    10fc:	8b a1       	ldd	r24, Y+35	; 0x23
    10fe:	a3 96       	adiw	r28, 0x23	; 35
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <case4>:

uint8 case4(void) {
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	a3 97       	sbiw	r28, 0x23	; 35
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0, response = 0;
    1124:	19 a2       	std	Y+33, r1	; 0x21
    1126:	18 a2       	std	Y+32, r1	; 0x20
	LCD_clearScreen();
    1128:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Please enter P:");
    112c:	2f ea       	ldi	r18, 0xAF	; 175
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	a9 01       	movw	r20, r18
    1136:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <LCD_moveCursor>
	uint8 count = 0;
    1142:	1f 8e       	std	Y+31, r1	; 0x1f
	for (int i = 0; i < 4; i++) {
    1144:	1e 8e       	std	Y+30, r1	; 0x1e
    1146:	1d 8e       	std	Y+29, r1	; 0x1d
    1148:	03 c1       	rjmp	.+518    	; 0x1350 <case4+0x240>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a8 ec       	ldi	r26, 0xC8	; 200
    1150:	b2 e4       	ldi	r27, 0x42	; 66
    1152:	89 8f       	std	Y+25, r24	; 0x19
    1154:	9a 8f       	std	Y+26, r25	; 0x1a
    1156:	ab 8f       	std	Y+27, r26	; 0x1b
    1158:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115a:	69 8d       	ldd	r22, Y+25	; 0x19
    115c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    115e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1160:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	4a ef       	ldi	r20, 0xFA	; 250
    1168:	54 e4       	ldi	r21, 0x44	; 68
    116a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	8d 8b       	std	Y+21, r24	; 0x15
    1174:	9e 8b       	std	Y+22, r25	; 0x16
    1176:	af 8b       	std	Y+23, r26	; 0x17
    1178:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    117a:	6d 89       	ldd	r22, Y+21	; 0x15
    117c:	7e 89       	ldd	r23, Y+22	; 0x16
    117e:	8f 89       	ldd	r24, Y+23	; 0x17
    1180:	98 8d       	ldd	r25, Y+24	; 0x18
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e8       	ldi	r20, 0x80	; 128
    1188:	5f e3       	ldi	r21, 0x3F	; 63
    118a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    118e:	88 23       	and	r24, r24
    1190:	2c f4       	brge	.+10     	; 0x119c <case4+0x8c>
		__ticks = 1;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	9c 8b       	std	Y+20, r25	; 0x14
    1198:	8b 8b       	std	Y+19, r24	; 0x13
    119a:	3f c0       	rjmp	.+126    	; 0x121a <case4+0x10a>
	else if (__tmp > 65535)
    119c:	6d 89       	ldd	r22, Y+21	; 0x15
    119e:	7e 89       	ldd	r23, Y+22	; 0x16
    11a0:	8f 89       	ldd	r24, Y+23	; 0x17
    11a2:	98 8d       	ldd	r25, Y+24	; 0x18
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	3f ef       	ldi	r19, 0xFF	; 255
    11a8:	4f e7       	ldi	r20, 0x7F	; 127
    11aa:	57 e4       	ldi	r21, 0x47	; 71
    11ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11b0:	18 16       	cp	r1, r24
    11b2:	4c f5       	brge	.+82     	; 0x1206 <case4+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b4:	69 8d       	ldd	r22, Y+25	; 0x19
    11b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e2       	ldi	r20, 0x20	; 32
    11c2:	51 e4       	ldi	r21, 0x41	; 65
    11c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	9c 8b       	std	Y+20, r25	; 0x14
    11da:	8b 8b       	std	Y+19, r24	; 0x13
    11dc:	0f c0       	rjmp	.+30     	; 0x11fc <case4+0xec>
    11de:	88 ec       	ldi	r24, 0xC8	; 200
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	9a 8b       	std	Y+18, r25	; 0x12
    11e4:	89 8b       	std	Y+17, r24	; 0x11
    11e6:	89 89       	ldd	r24, Y+17	; 0x11
    11e8:	9a 89       	ldd	r25, Y+18	; 0x12
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <case4+0xda>
    11ee:	9a 8b       	std	Y+18, r25	; 0x12
    11f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f2:	8b 89       	ldd	r24, Y+19	; 0x13
    11f4:	9c 89       	ldd	r25, Y+20	; 0x14
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	9c 8b       	std	Y+20, r25	; 0x14
    11fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fc:	8b 89       	ldd	r24, Y+19	; 0x13
    11fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	69 f7       	brne	.-38     	; 0x11de <case4+0xce>
    1204:	14 c0       	rjmp	.+40     	; 0x122e <case4+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1206:	6d 89       	ldd	r22, Y+21	; 0x15
    1208:	7e 89       	ldd	r23, Y+22	; 0x16
    120a:	8f 89       	ldd	r24, Y+23	; 0x17
    120c:	98 8d       	ldd	r25, Y+24	; 0x18
    120e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	9c 8b       	std	Y+20, r25	; 0x14
    1218:	8b 8b       	std	Y+19, r24	; 0x13
    121a:	8b 89       	ldd	r24, Y+19	; 0x13
    121c:	9c 89       	ldd	r25, Y+20	; 0x14
    121e:	98 8b       	std	Y+16, r25	; 0x10
    1220:	8f 87       	std	Y+15, r24	; 0x0f
    1222:	8f 85       	ldd	r24, Y+15	; 0x0f
    1224:	98 89       	ldd	r25, Y+16	; 0x10
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <case4+0x116>
    122a:	98 8b       	std	Y+16, r25	; 0x10
    122c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		key = KEYPAD_getPressedKey();
    122e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <KEYPAD_getPressedKey>
    1232:	89 a3       	std	Y+33, r24	; 0x21
		if ((key >= 0) && (key <= 9)) {
    1234:	89 a1       	ldd	r24, Y+33	; 0x21
    1236:	8a 30       	cpi	r24, 0x0A	; 10
    1238:	08 f0       	brcs	.+2      	; 0x123c <case4+0x12c>
    123a:	81 c0       	rjmp	.+258    	; 0x133e <case4+0x22e>
			count++;
    123c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    123e:	8f 5f       	subi	r24, 0xFF	; 255
    1240:	8f 8f       	std	Y+31, r24	; 0x1f
			UART_sendByte(key);
    1242:	89 a1       	ldd	r24, Y+33	; 0x21
    1244:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <UART_sendByte>
			printStar();
    1248:	0e 94 a3 05 	call	0xb46	; 0xb46 <printStar>
    124c:	7c c0       	rjmp	.+248    	; 0x1346 <case4+0x236>

		} else {
			while (count < 4) {
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	a8 e4       	ldi	r26, 0x48	; 72
    1254:	b3 e4       	ldi	r27, 0x43	; 67
    1256:	8b 87       	std	Y+11, r24	; 0x0b
    1258:	9c 87       	std	Y+12, r25	; 0x0c
    125a:	ad 87       	std	Y+13, r26	; 0x0d
    125c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    125e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1260:	7c 85       	ldd	r23, Y+12	; 0x0c
    1262:	8d 85       	ldd	r24, Y+13	; 0x0d
    1264:	9e 85       	ldd	r25, Y+14	; 0x0e
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	4a ef       	ldi	r20, 0xFA	; 250
    126c:	54 e4       	ldi	r21, 0x44	; 68
    126e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	8f 83       	std	Y+7, r24	; 0x07
    1278:	98 87       	std	Y+8, r25	; 0x08
    127a:	a9 87       	std	Y+9, r26	; 0x09
    127c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    127e:	6f 81       	ldd	r22, Y+7	; 0x07
    1280:	78 85       	ldd	r23, Y+8	; 0x08
    1282:	89 85       	ldd	r24, Y+9	; 0x09
    1284:	9a 85       	ldd	r25, Y+10	; 0x0a
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e8       	ldi	r20, 0x80	; 128
    128c:	5f e3       	ldi	r21, 0x3F	; 63
    128e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1292:	88 23       	and	r24, r24
    1294:	2c f4       	brge	.+10     	; 0x12a0 <case4+0x190>
		__ticks = 1;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	9e 83       	std	Y+6, r25	; 0x06
    129c:	8d 83       	std	Y+5, r24	; 0x05
    129e:	3f c0       	rjmp	.+126    	; 0x131e <case4+0x20e>
	else if (__tmp > 65535)
    12a0:	6f 81       	ldd	r22, Y+7	; 0x07
    12a2:	78 85       	ldd	r23, Y+8	; 0x08
    12a4:	89 85       	ldd	r24, Y+9	; 0x09
    12a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	3f ef       	ldi	r19, 0xFF	; 255
    12ac:	4f e7       	ldi	r20, 0x7F	; 127
    12ae:	57 e4       	ldi	r21, 0x47	; 71
    12b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b4:	18 16       	cp	r1, r24
    12b6:	4c f5       	brge	.+82     	; 0x130a <case4+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    12bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12be:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e2       	ldi	r20, 0x20	; 32
    12c6:	51 e4       	ldi	r21, 0x41	; 65
    12c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	bc 01       	movw	r22, r24
    12d2:	cd 01       	movw	r24, r26
    12d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	9e 83       	std	Y+6, r25	; 0x06
    12de:	8d 83       	std	Y+5, r24	; 0x05
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <case4+0x1f0>
    12e2:	88 ec       	ldi	r24, 0xC8	; 200
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	9c 83       	std	Y+4, r25	; 0x04
    12e8:	8b 83       	std	Y+3, r24	; 0x03
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <case4+0x1de>
    12f2:	9c 83       	std	Y+4, r25	; 0x04
    12f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	9e 81       	ldd	r25, Y+6	; 0x06
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	9e 83       	std	Y+6, r25	; 0x06
    12fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
    1302:	9e 81       	ldd	r25, Y+6	; 0x06
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	69 f7       	brne	.-38     	; 0x12e2 <case4+0x1d2>
    1308:	14 c0       	rjmp	.+40     	; 0x1332 <case4+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130a:	6f 81       	ldd	r22, Y+7	; 0x07
    130c:	78 85       	ldd	r23, Y+8	; 0x08
    130e:	89 85       	ldd	r24, Y+9	; 0x09
    1310:	9a 85       	ldd	r25, Y+10	; 0x0a
    1312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	9a 83       	std	Y+2, r25	; 0x02
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	f1 f7       	brne	.-4      	; 0x132a <case4+0x21a>
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(200);
				count++;
    1332:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	8f 8f       	std	Y+31, r24	; 0x1f
				UART_sendByte(0);
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <UART_sendByte>
			count++;
			UART_sendByte(key);
			printStar();

		} else {
			while (count < 4) {
    133e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	08 f4       	brcc	.+2      	; 0x1346 <case4+0x236>
    1344:	84 cf       	rjmp	.-248    	; 0x124e <case4+0x13e>
	uint8 key = 0, response = 0;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Please enter P:");
	LCD_moveCursor(1, 0);
	uint8 count = 0;
	for (int i = 0; i < 4; i++) {
    1346:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1348:	9e 8d       	ldd	r25, Y+30	; 0x1e
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	9e 8f       	std	Y+30, r25	; 0x1e
    134e:	8d 8f       	std	Y+29, r24	; 0x1d
    1350:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1352:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1354:	84 30       	cpi	r24, 0x04	; 4
    1356:	91 05       	cpc	r25, r1
    1358:	0c f4       	brge	.+2      	; 0x135c <case4+0x24c>
    135a:	f7 ce       	rjmp	.-530    	; 0x114a <case4+0x3a>
				count++;
				UART_sendByte(0);
			}
		}
	}
	response = UART_recieveByte();
    135c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <UART_recieveByte>
    1360:	88 a3       	std	Y+32, r24	; 0x20
	if (response == 5) {
    1362:	88 a1       	ldd	r24, Y+32	; 0x20
    1364:	85 30       	cpi	r24, 0x05	; 5
    1366:	19 f4       	brne	.+6      	; 0x136e <case4+0x25e>
		return 5;
    1368:	85 e0       	ldi	r24, 0x05	; 5
    136a:	8a a3       	std	Y+34, r24	; 0x22
    136c:	0d c0       	rjmp	.+26     	; 0x1388 <case4+0x278>
	} else if (response == 4) {
    136e:	88 a1       	ldd	r24, Y+32	; 0x20
    1370:	84 30       	cpi	r24, 0x04	; 4
    1372:	19 f4       	brne	.+6      	; 0x137a <case4+0x26a>
		return 4;
    1374:	84 e0       	ldi	r24, 0x04	; 4
    1376:	8a a3       	std	Y+34, r24	; 0x22
    1378:	07 c0       	rjmp	.+14     	; 0x1388 <case4+0x278>
	} else if (response == 1) {
    137a:	88 a1       	ldd	r24, Y+32	; 0x20
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	19 f4       	brne	.+6      	; 0x1386 <case4+0x276>
		return 1;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	8a a3       	std	Y+34, r24	; 0x22
    1384:	01 c0       	rjmp	.+2      	; 0x1388 <case4+0x278>
    1386:	02 c0       	rjmp	.+4      	; 0x138c <case4+0x27c>
	}

}
    1388:	8a a1       	ldd	r24, Y+34	; 0x22
    138a:	8b a3       	std	Y+35, r24	; 0x23
    138c:	8b a1       	ldd	r24, Y+35	; 0x23
    138e:	a3 96       	adiw	r28, 0x23	; 35
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <case5>:

uint8 case5(void) {
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	2e 97       	sbiw	r28, 0x0e	; 14
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    13b4:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LCD_clearScreen>
	LCD_displayString("error 3 times");
    13b8:	8f eb       	ldi	r24, 0xBF	; 191
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 83 16 	call	0x2d06	; 0x2d06 <LCD_displayString>
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e4       	ldi	r25, 0x40	; 64
    13c4:	ac e9       	ldi	r26, 0x9C	; 156
    13c6:	b6 e4       	ldi	r27, 0x46	; 70
    13c8:	8b 87       	std	Y+11, r24	; 0x0b
    13ca:	9c 87       	std	Y+12, r25	; 0x0c
    13cc:	ad 87       	std	Y+13, r26	; 0x0d
    13ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	4a ef       	ldi	r20, 0xFA	; 250
    13de:	54 e4       	ldi	r21, 0x44	; 68
    13e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	8f 83       	std	Y+7, r24	; 0x07
    13ea:	98 87       	std	Y+8, r25	; 0x08
    13ec:	a9 87       	std	Y+9, r26	; 0x09
    13ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f0:	6f 81       	ldd	r22, Y+7	; 0x07
    13f2:	78 85       	ldd	r23, Y+8	; 0x08
    13f4:	89 85       	ldd	r24, Y+9	; 0x09
    13f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e8       	ldi	r20, 0x80	; 128
    13fe:	5f e3       	ldi	r21, 0x3F	; 63
    1400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1404:	88 23       	and	r24, r24
    1406:	2c f4       	brge	.+10     	; 0x1412 <case5+0x72>
		__ticks = 1;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	9e 83       	std	Y+6, r25	; 0x06
    140e:	8d 83       	std	Y+5, r24	; 0x05
    1410:	3f c0       	rjmp	.+126    	; 0x1490 <case5+0xf0>
	else if (__tmp > 65535)
    1412:	6f 81       	ldd	r22, Y+7	; 0x07
    1414:	78 85       	ldd	r23, Y+8	; 0x08
    1416:	89 85       	ldd	r24, Y+9	; 0x09
    1418:	9a 85       	ldd	r25, Y+10	; 0x0a
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	3f ef       	ldi	r19, 0xFF	; 255
    141e:	4f e7       	ldi	r20, 0x7F	; 127
    1420:	57 e4       	ldi	r21, 0x47	; 71
    1422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1426:	18 16       	cp	r1, r24
    1428:	4c f5       	brge	.+82     	; 0x147c <case5+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142a:	6b 85       	ldd	r22, Y+11	; 0x0b
    142c:	7c 85       	ldd	r23, Y+12	; 0x0c
    142e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1430:	9e 85       	ldd	r25, Y+14	; 0x0e
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e2       	ldi	r20, 0x20	; 32
    1438:	51 e4       	ldi	r21, 0x41	; 65
    143a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	bc 01       	movw	r22, r24
    1444:	cd 01       	movw	r24, r26
    1446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	9e 83       	std	Y+6, r25	; 0x06
    1450:	8d 83       	std	Y+5, r24	; 0x05
    1452:	0f c0       	rjmp	.+30     	; 0x1472 <case5+0xd2>
    1454:	88 ec       	ldi	r24, 0xC8	; 200
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	9c 83       	std	Y+4, r25	; 0x04
    145a:	8b 83       	std	Y+3, r24	; 0x03
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	9c 81       	ldd	r25, Y+4	; 0x04
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	f1 f7       	brne	.-4      	; 0x1460 <case5+0xc0>
    1464:	9c 83       	std	Y+4, r25	; 0x04
    1466:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	9e 81       	ldd	r25, Y+6	; 0x06
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	9e 81       	ldd	r25, Y+6	; 0x06
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	69 f7       	brne	.-38     	; 0x1454 <case5+0xb4>
    147a:	14 c0       	rjmp	.+40     	; 0x14a4 <case5+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147c:	6f 81       	ldd	r22, Y+7	; 0x07
    147e:	78 85       	ldd	r23, Y+8	; 0x08
    1480:	89 85       	ldd	r24, Y+9	; 0x09
    1482:	9a 85       	ldd	r25, Y+10	; 0x0a
    1484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 83       	std	Y+5, r24	; 0x05
    1490:	8d 81       	ldd	r24, Y+5	; 0x05
    1492:	9e 81       	ldd	r25, Y+6	; 0x06
    1494:	9a 83       	std	Y+2, r25	; 0x02
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	f1 f7       	brne	.-4      	; 0x149c <case5+0xfc>
    14a0:	9a 83       	std	Y+2, r25	; 0x02
    14a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20000);
	return 2;
    14a4:	82 e0       	ldi	r24, 0x02	; 2
}
    14a6:	2e 96       	adiw	r28, 0x0e	; 14
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <main>:




int main(void) {
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	c1 55       	subi	r28, 0x51	; 81
    14c6:	d0 40       	sbci	r29, 0x00	; 0
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
	config_uart config = { B_9600, EigthBits, disabled_parity, stop_one };
    14d2:	ce 01       	movw	r24, r28
    14d4:	88 5b       	subi	r24, 0xB8	; 184
    14d6:	9f 4f       	sbci	r25, 0xFF	; 255
    14d8:	2f 96       	adiw	r28, 0x0f	; 15
    14da:	9f af       	std	Y+63, r25	; 0x3f
    14dc:	8e af       	std	Y+62, r24	; 0x3e
    14de:	2f 97       	sbiw	r28, 0x0f	; 15
    14e0:	85 ed       	ldi	r24, 0xD5	; 213
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	61 96       	adiw	r28, 0x11	; 17
    14e6:	9f af       	std	Y+63, r25	; 0x3f
    14e8:	8e af       	std	Y+62, r24	; 0x3e
    14ea:	61 97       	sbiw	r28, 0x11	; 17
    14ec:	95 e0       	ldi	r25, 0x05	; 5
    14ee:	62 96       	adiw	r28, 0x12	; 18
    14f0:	9f af       	std	Y+63, r25	; 0x3f
    14f2:	62 97       	sbiw	r28, 0x12	; 18
    14f4:	61 96       	adiw	r28, 0x11	; 17
    14f6:	ee ad       	ldd	r30, Y+62	; 0x3e
    14f8:	ff ad       	ldd	r31, Y+63	; 0x3f
    14fa:	61 97       	sbiw	r28, 0x11	; 17
    14fc:	00 80       	ld	r0, Z
    14fe:	61 96       	adiw	r28, 0x11	; 17
    1500:	8e ad       	ldd	r24, Y+62	; 0x3e
    1502:	9f ad       	ldd	r25, Y+63	; 0x3f
    1504:	61 97       	sbiw	r28, 0x11	; 17
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	61 96       	adiw	r28, 0x11	; 17
    150a:	9f af       	std	Y+63, r25	; 0x3f
    150c:	8e af       	std	Y+62, r24	; 0x3e
    150e:	61 97       	sbiw	r28, 0x11	; 17
    1510:	2f 96       	adiw	r28, 0x0f	; 15
    1512:	ee ad       	ldd	r30, Y+62	; 0x3e
    1514:	ff ad       	ldd	r31, Y+63	; 0x3f
    1516:	2f 97       	sbiw	r28, 0x0f	; 15
    1518:	00 82       	st	Z, r0
    151a:	2f 96       	adiw	r28, 0x0f	; 15
    151c:	8e ad       	ldd	r24, Y+62	; 0x3e
    151e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1520:	2f 97       	sbiw	r28, 0x0f	; 15
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	2f 96       	adiw	r28, 0x0f	; 15
    1526:	9f af       	std	Y+63, r25	; 0x3f
    1528:	8e af       	std	Y+62, r24	; 0x3e
    152a:	2f 97       	sbiw	r28, 0x0f	; 15
    152c:	62 96       	adiw	r28, 0x12	; 18
    152e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1530:	62 97       	sbiw	r28, 0x12	; 18
    1532:	91 50       	subi	r25, 0x01	; 1
    1534:	62 96       	adiw	r28, 0x12	; 18
    1536:	9f af       	std	Y+63, r25	; 0x3f
    1538:	62 97       	sbiw	r28, 0x12	; 18
    153a:	62 96       	adiw	r28, 0x12	; 18
    153c:	ef ad       	ldd	r30, Y+63	; 0x3f
    153e:	62 97       	sbiw	r28, 0x12	; 18
    1540:	ee 23       	and	r30, r30
    1542:	c1 f6       	brne	.-80     	; 0x14f4 <main+0x3c>
	LCD_init();
    1544:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_init>
	UART_init(&config);
    1548:	ce 01       	movw	r24, r28
    154a:	88 5b       	subi	r24, 0xB8	; 184
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	0e 94 48 17 	call	0x2e90	; 0x2e90 <UART_init>
	while (UART_recieveByte() != MC2_READY) {
    1552:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <UART_recieveByte>
    1556:	80 31       	cpi	r24, 0x10	; 16
    1558:	e1 f7       	brne	.-8      	; 0x1552 <main+0x9a>
	}

	uint8 CASE = 1;
    155a:	fe 01       	movw	r30, r28
    155c:	e9 5b       	subi	r30, 0xB9	; 185
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	80 83       	st	Z, r24
    1564:	fe 01       	movw	r30, r28
    1566:	ed 5b       	subi	r30, 0xBD	; 189
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a8 e4       	ldi	r26, 0x48	; 72
    1570:	b2 e4       	ldi	r27, 0x42	; 66
    1572:	80 83       	st	Z, r24
    1574:	91 83       	std	Z+1, r25	; 0x01
    1576:	a2 83       	std	Z+2, r26	; 0x02
    1578:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157a:	8e 01       	movw	r16, r28
    157c:	01 5c       	subi	r16, 0xC1	; 193
    157e:	1f 4f       	sbci	r17, 0xFF	; 255
    1580:	fe 01       	movw	r30, r28
    1582:	ed 5b       	subi	r30, 0xBD	; 189
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	60 81       	ld	r22, Z
    1588:	71 81       	ldd	r23, Z+1	; 0x01
    158a:	82 81       	ldd	r24, Z+2	; 0x02
    158c:	93 81       	ldd	r25, Z+3	; 0x03
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	4a ef       	ldi	r20, 0xFA	; 250
    1594:	54 e4       	ldi	r21, 0x44	; 68
    1596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	f8 01       	movw	r30, r16
    15a0:	80 83       	st	Z, r24
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	a2 83       	std	Z+2, r26	; 0x02
    15a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15a8:	fe 01       	movw	r30, r28
    15aa:	ff 96       	adiw	r30, 0x3f	; 63
    15ac:	60 81       	ld	r22, Z
    15ae:	71 81       	ldd	r23, Z+1	; 0x01
    15b0:	82 81       	ldd	r24, Z+2	; 0x02
    15b2:	93 81       	ldd	r25, Z+3	; 0x03
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e8       	ldi	r20, 0x80	; 128
    15ba:	5f e3       	ldi	r21, 0x3F	; 63
    15bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c0:	88 23       	and	r24, r24
    15c2:	2c f4       	brge	.+10     	; 0x15ce <main+0x116>
		__ticks = 1;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9e af       	std	Y+62, r25	; 0x3e
    15ca:	8d af       	std	Y+61, r24	; 0x3d
    15cc:	46 c0       	rjmp	.+140    	; 0x165a <main+0x1a2>
	else if (__tmp > 65535)
    15ce:	fe 01       	movw	r30, r28
    15d0:	ff 96       	adiw	r30, 0x3f	; 63
    15d2:	60 81       	ld	r22, Z
    15d4:	71 81       	ldd	r23, Z+1	; 0x01
    15d6:	82 81       	ldd	r24, Z+2	; 0x02
    15d8:	93 81       	ldd	r25, Z+3	; 0x03
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	3f ef       	ldi	r19, 0xFF	; 255
    15de:	4f e7       	ldi	r20, 0x7F	; 127
    15e0:	57 e4       	ldi	r21, 0x47	; 71
    15e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e6:	18 16       	cp	r1, r24
    15e8:	64 f5       	brge	.+88     	; 0x1642 <main+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ea:	fe 01       	movw	r30, r28
    15ec:	ed 5b       	subi	r30, 0xBD	; 189
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	60 81       	ld	r22, Z
    15f2:	71 81       	ldd	r23, Z+1	; 0x01
    15f4:	82 81       	ldd	r24, Z+2	; 0x02
    15f6:	93 81       	ldd	r25, Z+3	; 0x03
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e2       	ldi	r20, 0x20	; 32
    15fe:	51 e4       	ldi	r21, 0x41	; 65
    1600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	bc 01       	movw	r22, r24
    160a:	cd 01       	movw	r24, r26
    160c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	9e af       	std	Y+62, r25	; 0x3e
    1616:	8d af       	std	Y+61, r24	; 0x3d
    1618:	0f c0       	rjmp	.+30     	; 0x1638 <main+0x180>
    161a:	88 ec       	ldi	r24, 0xC8	; 200
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	9c af       	std	Y+60, r25	; 0x3c
    1620:	8b af       	std	Y+59, r24	; 0x3b
    1622:	8b ad       	ldd	r24, Y+59	; 0x3b
    1624:	9c ad       	ldd	r25, Y+60	; 0x3c
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <main+0x16e>
    162a:	9c af       	std	Y+60, r25	; 0x3c
    162c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1630:	9e ad       	ldd	r25, Y+62	; 0x3e
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	9e af       	std	Y+62, r25	; 0x3e
    1636:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1638:	8d ad       	ldd	r24, Y+61	; 0x3d
    163a:	9e ad       	ldd	r25, Y+62	; 0x3e
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	69 f7       	brne	.-38     	; 0x161a <main+0x162>
    1640:	16 c0       	rjmp	.+44     	; 0x166e <main+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1642:	fe 01       	movw	r30, r28
    1644:	ff 96       	adiw	r30, 0x3f	; 63
    1646:	60 81       	ld	r22, Z
    1648:	71 81       	ldd	r23, Z+1	; 0x01
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	9e af       	std	Y+62, r25	; 0x3e
    1658:	8d af       	std	Y+61, r24	; 0x3d
    165a:	8d ad       	ldd	r24, Y+61	; 0x3d
    165c:	9e ad       	ldd	r25, Y+62	; 0x3e
    165e:	9a af       	std	Y+58, r25	; 0x3a
    1660:	89 af       	std	Y+57, r24	; 0x39
    1662:	89 ad       	ldd	r24, Y+57	; 0x39
    1664:	9a ad       	ldd	r25, Y+58	; 0x3a
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	f1 f7       	brne	.-4      	; 0x1666 <main+0x1ae>
    166a:	9a af       	std	Y+58, r25	; 0x3a
    166c:	89 af       	std	Y+57, r24	; 0x39
	while (1) {
		_delay_ms(50);
		//case 1
		if (CASE == 1)
    166e:	fe 01       	movw	r30, r28
    1670:	e9 5b       	subi	r30, 0xB9	; 185
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	80 81       	ld	r24, Z
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	31 f4       	brne	.+12     	; 0x1686 <main+0x1ce>
			CASE = case1();
    167a:	0e 94 c1 06 	call	0xd82	; 0xd82 <case1>
    167e:	fe 01       	movw	r30, r28
    1680:	e9 5b       	subi	r30, 0xB9	; 185
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	80 83       	st	Z, r24
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	a8 e4       	ldi	r26, 0x48	; 72
    168c:	b2 e4       	ldi	r27, 0x42	; 66
    168e:	8d ab       	std	Y+53, r24	; 0x35
    1690:	9e ab       	std	Y+54, r25	; 0x36
    1692:	af ab       	std	Y+55, r26	; 0x37
    1694:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1696:	6d a9       	ldd	r22, Y+53	; 0x35
    1698:	7e a9       	ldd	r23, Y+54	; 0x36
    169a:	8f a9       	ldd	r24, Y+55	; 0x37
    169c:	98 ad       	ldd	r25, Y+56	; 0x38
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	4a ef       	ldi	r20, 0xFA	; 250
    16a4:	54 e4       	ldi	r21, 0x44	; 68
    16a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	89 ab       	std	Y+49, r24	; 0x31
    16b0:	9a ab       	std	Y+50, r25	; 0x32
    16b2:	ab ab       	std	Y+51, r26	; 0x33
    16b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16b6:	69 a9       	ldd	r22, Y+49	; 0x31
    16b8:	7a a9       	ldd	r23, Y+50	; 0x32
    16ba:	8b a9       	ldd	r24, Y+51	; 0x33
    16bc:	9c a9       	ldd	r25, Y+52	; 0x34
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e8       	ldi	r20, 0x80	; 128
    16c4:	5f e3       	ldi	r21, 0x3F	; 63
    16c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ca:	88 23       	and	r24, r24
    16cc:	2c f4       	brge	.+10     	; 0x16d8 <main+0x220>
		__ticks = 1;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	98 ab       	std	Y+48, r25	; 0x30
    16d4:	8f a7       	std	Y+47, r24	; 0x2f
    16d6:	3f c0       	rjmp	.+126    	; 0x1756 <main+0x29e>
	else if (__tmp > 65535)
    16d8:	69 a9       	ldd	r22, Y+49	; 0x31
    16da:	7a a9       	ldd	r23, Y+50	; 0x32
    16dc:	8b a9       	ldd	r24, Y+51	; 0x33
    16de:	9c a9       	ldd	r25, Y+52	; 0x34
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	3f ef       	ldi	r19, 0xFF	; 255
    16e4:	4f e7       	ldi	r20, 0x7F	; 127
    16e6:	57 e4       	ldi	r21, 0x47	; 71
    16e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	4c f5       	brge	.+82     	; 0x1742 <main+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f0:	6d a9       	ldd	r22, Y+53	; 0x35
    16f2:	7e a9       	ldd	r23, Y+54	; 0x36
    16f4:	8f a9       	ldd	r24, Y+55	; 0x37
    16f6:	98 ad       	ldd	r25, Y+56	; 0x38
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e2       	ldi	r20, 0x20	; 32
    16fe:	51 e4       	ldi	r21, 0x41	; 65
    1700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	98 ab       	std	Y+48, r25	; 0x30
    1716:	8f a7       	std	Y+47, r24	; 0x2f
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <main+0x280>
    171a:	88 ec       	ldi	r24, 0xC8	; 200
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9e a7       	std	Y+46, r25	; 0x2e
    1720:	8d a7       	std	Y+45, r24	; 0x2d
    1722:	8d a5       	ldd	r24, Y+45	; 0x2d
    1724:	9e a5       	ldd	r25, Y+46	; 0x2e
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <main+0x26e>
    172a:	9e a7       	std	Y+46, r25	; 0x2e
    172c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1730:	98 a9       	ldd	r25, Y+48	; 0x30
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	98 ab       	std	Y+48, r25	; 0x30
    1736:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1738:	8f a5       	ldd	r24, Y+47	; 0x2f
    173a:	98 a9       	ldd	r25, Y+48	; 0x30
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	69 f7       	brne	.-38     	; 0x171a <main+0x262>
    1740:	14 c0       	rjmp	.+40     	; 0x176a <main+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1742:	69 a9       	ldd	r22, Y+49	; 0x31
    1744:	7a a9       	ldd	r23, Y+50	; 0x32
    1746:	8b a9       	ldd	r24, Y+51	; 0x33
    1748:	9c a9       	ldd	r25, Y+52	; 0x34
    174a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	98 ab       	std	Y+48, r25	; 0x30
    1754:	8f a7       	std	Y+47, r24	; 0x2f
    1756:	8f a5       	ldd	r24, Y+47	; 0x2f
    1758:	98 a9       	ldd	r25, Y+48	; 0x30
    175a:	9c a7       	std	Y+44, r25	; 0x2c
    175c:	8b a7       	std	Y+43, r24	; 0x2b
    175e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1760:	9c a5       	ldd	r25, Y+44	; 0x2c
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	f1 f7       	brne	.-4      	; 0x1762 <main+0x2aa>
    1766:	9c a7       	std	Y+44, r25	; 0x2c
    1768:	8b a7       	std	Y+43, r24	; 0x2b

		_delay_ms(50);
		//case 2
		if (CASE == 2)
    176a:	fe 01       	movw	r30, r28
    176c:	e9 5b       	subi	r30, 0xB9	; 185
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	80 81       	ld	r24, Z
    1772:	82 30       	cpi	r24, 0x02	; 2
    1774:	31 f4       	brne	.+12     	; 0x1782 <main+0x2ca>
			CASE = case2();
    1776:	0e 94 1c 07 	call	0xe38	; 0xe38 <case2>
    177a:	fe 01       	movw	r30, r28
    177c:	e9 5b       	subi	r30, 0xB9	; 185
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	80 83       	st	Z, r24
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a8 ec       	ldi	r26, 0xC8	; 200
    1788:	b2 e4       	ldi	r27, 0x42	; 66
    178a:	8f a3       	std	Y+39, r24	; 0x27
    178c:	98 a7       	std	Y+40, r25	; 0x28
    178e:	a9 a7       	std	Y+41, r26	; 0x29
    1790:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1792:	6f a1       	ldd	r22, Y+39	; 0x27
    1794:	78 a5       	ldd	r23, Y+40	; 0x28
    1796:	89 a5       	ldd	r24, Y+41	; 0x29
    1798:	9a a5       	ldd	r25, Y+42	; 0x2a
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	4a ef       	ldi	r20, 0xFA	; 250
    17a0:	54 e4       	ldi	r21, 0x44	; 68
    17a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	8b a3       	std	Y+35, r24	; 0x23
    17ac:	9c a3       	std	Y+36, r25	; 0x24
    17ae:	ad a3       	std	Y+37, r26	; 0x25
    17b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17b2:	6b a1       	ldd	r22, Y+35	; 0x23
    17b4:	7c a1       	ldd	r23, Y+36	; 0x24
    17b6:	8d a1       	ldd	r24, Y+37	; 0x25
    17b8:	9e a1       	ldd	r25, Y+38	; 0x26
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c6:	88 23       	and	r24, r24
    17c8:	2c f4       	brge	.+10     	; 0x17d4 <main+0x31c>
		__ticks = 1;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9a a3       	std	Y+34, r25	; 0x22
    17d0:	89 a3       	std	Y+33, r24	; 0x21
    17d2:	3f c0       	rjmp	.+126    	; 0x1852 <main+0x39a>
	else if (__tmp > 65535)
    17d4:	6b a1       	ldd	r22, Y+35	; 0x23
    17d6:	7c a1       	ldd	r23, Y+36	; 0x24
    17d8:	8d a1       	ldd	r24, Y+37	; 0x25
    17da:	9e a1       	ldd	r25, Y+38	; 0x26
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	3f ef       	ldi	r19, 0xFF	; 255
    17e0:	4f e7       	ldi	r20, 0x7F	; 127
    17e2:	57 e4       	ldi	r21, 0x47	; 71
    17e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e8:	18 16       	cp	r1, r24
    17ea:	4c f5       	brge	.+82     	; 0x183e <main+0x386>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ec:	6f a1       	ldd	r22, Y+39	; 0x27
    17ee:	78 a5       	ldd	r23, Y+40	; 0x28
    17f0:	89 a5       	ldd	r24, Y+41	; 0x29
    17f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e2       	ldi	r20, 0x20	; 32
    17fa:	51 e4       	ldi	r21, 0x41	; 65
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	9a a3       	std	Y+34, r25	; 0x22
    1812:	89 a3       	std	Y+33, r24	; 0x21
    1814:	0f c0       	rjmp	.+30     	; 0x1834 <main+0x37c>
    1816:	88 ec       	ldi	r24, 0xC8	; 200
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	98 a3       	std	Y+32, r25	; 0x20
    181c:	8f 8f       	std	Y+31, r24	; 0x1f
    181e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1820:	98 a1       	ldd	r25, Y+32	; 0x20
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <main+0x36a>
    1826:	98 a3       	std	Y+32, r25	; 0x20
    1828:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182a:	89 a1       	ldd	r24, Y+33	; 0x21
    182c:	9a a1       	ldd	r25, Y+34	; 0x22
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	9a a3       	std	Y+34, r25	; 0x22
    1832:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1834:	89 a1       	ldd	r24, Y+33	; 0x21
    1836:	9a a1       	ldd	r25, Y+34	; 0x22
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	69 f7       	brne	.-38     	; 0x1816 <main+0x35e>
    183c:	14 c0       	rjmp	.+40     	; 0x1866 <main+0x3ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183e:	6b a1       	ldd	r22, Y+35	; 0x23
    1840:	7c a1       	ldd	r23, Y+36	; 0x24
    1842:	8d a1       	ldd	r24, Y+37	; 0x25
    1844:	9e a1       	ldd	r25, Y+38	; 0x26
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9a a3       	std	Y+34, r25	; 0x22
    1850:	89 a3       	std	Y+33, r24	; 0x21
    1852:	89 a1       	ldd	r24, Y+33	; 0x21
    1854:	9a a1       	ldd	r25, Y+34	; 0x22
    1856:	9e 8f       	std	Y+30, r25	; 0x1e
    1858:	8d 8f       	std	Y+29, r24	; 0x1d
    185a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    185c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <main+0x3a6>
    1862:	9e 8f       	std	Y+30, r25	; 0x1e
    1864:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		//case 3
		if (CASE == 3)
    1866:	fe 01       	movw	r30, r28
    1868:	e9 5b       	subi	r30, 0xB9	; 185
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	80 81       	ld	r24, Z
    186e:	83 30       	cpi	r24, 0x03	; 3
    1870:	31 f4       	brne	.+12     	; 0x187e <main+0x3c6>
			CASE = case3();
    1872:	0e 94 4c 07 	call	0xe98	; 0xe98 <case3>
    1876:	fe 01       	movw	r30, r28
    1878:	e9 5b       	subi	r30, 0xB9	; 185
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	80 83       	st	Z, r24
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a8 ec       	ldi	r26, 0xC8	; 200
    1884:	b2 e4       	ldi	r27, 0x42	; 66
    1886:	89 8f       	std	Y+25, r24	; 0x19
    1888:	9a 8f       	std	Y+26, r25	; 0x1a
    188a:	ab 8f       	std	Y+27, r26	; 0x1b
    188c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188e:	69 8d       	ldd	r22, Y+25	; 0x19
    1890:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1892:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1894:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a ef       	ldi	r20, 0xFA	; 250
    189c:	54 e4       	ldi	r21, 0x44	; 68
    189e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	8d 8b       	std	Y+21, r24	; 0x15
    18a8:	9e 8b       	std	Y+22, r25	; 0x16
    18aa:	af 8b       	std	Y+23, r26	; 0x17
    18ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18ae:	6d 89       	ldd	r22, Y+21	; 0x15
    18b0:	7e 89       	ldd	r23, Y+22	; 0x16
    18b2:	8f 89       	ldd	r24, Y+23	; 0x17
    18b4:	98 8d       	ldd	r25, Y+24	; 0x18
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e8       	ldi	r20, 0x80	; 128
    18bc:	5f e3       	ldi	r21, 0x3F	; 63
    18be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c2:	88 23       	and	r24, r24
    18c4:	2c f4       	brge	.+10     	; 0x18d0 <main+0x418>
		__ticks = 1;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9c 8b       	std	Y+20, r25	; 0x14
    18cc:	8b 8b       	std	Y+19, r24	; 0x13
    18ce:	3f c0       	rjmp	.+126    	; 0x194e <main+0x496>
	else if (__tmp > 65535)
    18d0:	6d 89       	ldd	r22, Y+21	; 0x15
    18d2:	7e 89       	ldd	r23, Y+22	; 0x16
    18d4:	8f 89       	ldd	r24, Y+23	; 0x17
    18d6:	98 8d       	ldd	r25, Y+24	; 0x18
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	3f ef       	ldi	r19, 0xFF	; 255
    18dc:	4f e7       	ldi	r20, 0x7F	; 127
    18de:	57 e4       	ldi	r21, 0x47	; 71
    18e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e4:	18 16       	cp	r1, r24
    18e6:	4c f5       	brge	.+82     	; 0x193a <main+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e8:	69 8d       	ldd	r22, Y+25	; 0x19
    18ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e2       	ldi	r20, 0x20	; 32
    18f6:	51 e4       	ldi	r21, 0x41	; 65
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	bc 01       	movw	r22, r24
    1902:	cd 01       	movw	r24, r26
    1904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	9c 8b       	std	Y+20, r25	; 0x14
    190e:	8b 8b       	std	Y+19, r24	; 0x13
    1910:	0f c0       	rjmp	.+30     	; 0x1930 <main+0x478>
    1912:	88 ec       	ldi	r24, 0xC8	; 200
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9a 8b       	std	Y+18, r25	; 0x12
    1918:	89 8b       	std	Y+17, r24	; 0x11
    191a:	89 89       	ldd	r24, Y+17	; 0x11
    191c:	9a 89       	ldd	r25, Y+18	; 0x12
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <main+0x466>
    1922:	9a 8b       	std	Y+18, r25	; 0x12
    1924:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1926:	8b 89       	ldd	r24, Y+19	; 0x13
    1928:	9c 89       	ldd	r25, Y+20	; 0x14
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	9c 8b       	std	Y+20, r25	; 0x14
    192e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1930:	8b 89       	ldd	r24, Y+19	; 0x13
    1932:	9c 89       	ldd	r25, Y+20	; 0x14
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	69 f7       	brne	.-38     	; 0x1912 <main+0x45a>
    1938:	14 c0       	rjmp	.+40     	; 0x1962 <main+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193a:	6d 89       	ldd	r22, Y+21	; 0x15
    193c:	7e 89       	ldd	r23, Y+22	; 0x16
    193e:	8f 89       	ldd	r24, Y+23	; 0x17
    1940:	98 8d       	ldd	r25, Y+24	; 0x18
    1942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9c 8b       	std	Y+20, r25	; 0x14
    194c:	8b 8b       	std	Y+19, r24	; 0x13
    194e:	8b 89       	ldd	r24, Y+19	; 0x13
    1950:	9c 89       	ldd	r25, Y+20	; 0x14
    1952:	98 8b       	std	Y+16, r25	; 0x10
    1954:	8f 87       	std	Y+15, r24	; 0x0f
    1956:	8f 85       	ldd	r24, Y+15	; 0x0f
    1958:	98 89       	ldd	r25, Y+16	; 0x10
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <main+0x4a2>
    195e:	98 8b       	std	Y+16, r25	; 0x10
    1960:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		//case 4
		if (CASE == 4)
    1962:	fe 01       	movw	r30, r28
    1964:	e9 5b       	subi	r30, 0xB9	; 185
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	80 81       	ld	r24, Z
    196a:	84 30       	cpi	r24, 0x04	; 4
    196c:	31 f4       	brne	.+12     	; 0x197a <main+0x4c2>
			CASE = case4();
    196e:	0e 94 88 08 	call	0x1110	; 0x1110 <case4>
    1972:	fe 01       	movw	r30, r28
    1974:	e9 5b       	subi	r30, 0xB9	; 185
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	80 83       	st	Z, r24
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a8 e4       	ldi	r26, 0x48	; 72
    1980:	b2 e4       	ldi	r27, 0x42	; 66
    1982:	8b 87       	std	Y+11, r24	; 0x0b
    1984:	9c 87       	std	Y+12, r25	; 0x0c
    1986:	ad 87       	std	Y+13, r26	; 0x0d
    1988:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198a:	6b 85       	ldd	r22, Y+11	; 0x0b
    198c:	7c 85       	ldd	r23, Y+12	; 0x0c
    198e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1990:	9e 85       	ldd	r25, Y+14	; 0x0e
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	4a ef       	ldi	r20, 0xFA	; 250
    1998:	54 e4       	ldi	r21, 0x44	; 68
    199a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	8f 83       	std	Y+7, r24	; 0x07
    19a4:	98 87       	std	Y+8, r25	; 0x08
    19a6:	a9 87       	std	Y+9, r26	; 0x09
    19a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19aa:	6f 81       	ldd	r22, Y+7	; 0x07
    19ac:	78 85       	ldd	r23, Y+8	; 0x08
    19ae:	89 85       	ldd	r24, Y+9	; 0x09
    19b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e8       	ldi	r20, 0x80	; 128
    19b8:	5f e3       	ldi	r21, 0x3F	; 63
    19ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19be:	88 23       	and	r24, r24
    19c0:	2c f4       	brge	.+10     	; 0x19cc <main+0x514>
		__ticks = 1;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	9e 83       	std	Y+6, r25	; 0x06
    19c8:	8d 83       	std	Y+5, r24	; 0x05
    19ca:	3f c0       	rjmp	.+126    	; 0x1a4a <main+0x592>
	else if (__tmp > 65535)
    19cc:	6f 81       	ldd	r22, Y+7	; 0x07
    19ce:	78 85       	ldd	r23, Y+8	; 0x08
    19d0:	89 85       	ldd	r24, Y+9	; 0x09
    19d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	3f ef       	ldi	r19, 0xFF	; 255
    19d8:	4f e7       	ldi	r20, 0x7F	; 127
    19da:	57 e4       	ldi	r21, 0x47	; 71
    19dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e0:	18 16       	cp	r1, r24
    19e2:	4c f5       	brge	.+82     	; 0x1a36 <main+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e2       	ldi	r20, 0x20	; 32
    19f2:	51 e4       	ldi	r21, 0x41	; 65
    19f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	bc 01       	movw	r22, r24
    19fe:	cd 01       	movw	r24, r26
    1a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	9e 83       	std	Y+6, r25	; 0x06
    1a0a:	8d 83       	std	Y+5, r24	; 0x05
    1a0c:	0f c0       	rjmp	.+30     	; 0x1a2c <main+0x574>
    1a0e:	88 ec       	ldi	r24, 0xC8	; 200
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	9c 83       	std	Y+4, r25	; 0x04
    1a14:	8b 83       	std	Y+3, r24	; 0x03
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <main+0x562>
    1a1e:	9c 83       	std	Y+4, r25	; 0x04
    1a20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a22:	8d 81       	ldd	r24, Y+5	; 0x05
    1a24:	9e 81       	ldd	r25, Y+6	; 0x06
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	69 f7       	brne	.-38     	; 0x1a0e <main+0x556>
    1a34:	14 c0       	rjmp	.+40     	; 0x1a5e <main+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a36:	6f 81       	ldd	r22, Y+7	; 0x07
    1a38:	78 85       	ldd	r23, Y+8	; 0x08
    1a3a:	89 85       	ldd	r24, Y+9	; 0x09
    1a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	9e 83       	std	Y+6, r25	; 0x06
    1a48:	8d 83       	std	Y+5, r24	; 0x05
    1a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	89 83       	std	Y+1, r24	; 0x01
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	9a 81       	ldd	r25, Y+2	; 0x02
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <main+0x59e>
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		//case 5
		if (CASE == 5)
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e9 5b       	subi	r30, 0xB9	; 185
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	80 81       	ld	r24, Z
    1a66:	85 30       	cpi	r24, 0x05	; 5
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <main+0x5b4>
    1a6a:	7c cd       	rjmp	.-1288   	; 0x1564 <main+0xac>
			CASE = case5();
    1a6c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <case5>
    1a70:	fe 01       	movw	r30, r28
    1a72:	e9 5b       	subi	r30, 0xB9	; 185
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	80 83       	st	Z, r24
    1a78:	75 cd       	rjmp	.-1302   	; 0x1564 <main+0xac>

00001a7a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <GPIO_setupPinDirection+0x6>
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <GPIO_setupPinDirection+0x8>
    1a82:	0f 92       	push	r0
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	6a 83       	std	Y+2, r22	; 0x02
    1a8c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	88 30       	cpi	r24, 0x08	; 8
    1a92:	08 f0       	brcs	.+2      	; 0x1a96 <GPIO_setupPinDirection+0x1c>
    1a94:	d5 c0       	rjmp	.+426    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	84 30       	cpi	r24, 0x04	; 4
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <GPIO_setupPinDirection+0x24>
    1a9c:	d1 c0       	rjmp	.+418    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	3d 83       	std	Y+5, r19	; 0x05
    1aa6:	2c 83       	std	Y+4, r18	; 0x04
    1aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	91 05       	cpc	r25, r1
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <GPIO_setupPinDirection+0x3a>
    1ab2:	43 c0       	rjmp	.+134    	; 0x1b3a <GPIO_setupPinDirection+0xc0>
    1ab4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab8:	22 30       	cpi	r18, 0x02	; 2
    1aba:	31 05       	cpc	r19, r1
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <GPIO_setupPinDirection+0x4e>
    1abe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	71 f0       	breq	.+28     	; 0x1ae2 <GPIO_setupPinDirection+0x68>
    1ac6:	bc c0       	rjmp	.+376    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
    1ac8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aca:	3d 81       	ldd	r19, Y+5	; 0x05
    1acc:	22 30       	cpi	r18, 0x02	; 2
    1ace:	31 05       	cpc	r19, r1
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <GPIO_setupPinDirection+0x5a>
    1ad2:	5f c0       	rjmp	.+190    	; 0x1b92 <GPIO_setupPinDirection+0x118>
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad8:	83 30       	cpi	r24, 0x03	; 3
    1ada:	91 05       	cpc	r25, r1
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <GPIO_setupPinDirection+0x66>
    1ade:	85 c0       	rjmp	.+266    	; 0x1bea <GPIO_setupPinDirection+0x170>
    1ae0:	af c0       	rjmp	.+350    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	a1 f4       	brne	.+40     	; 0x1b10 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1ae8:	aa e3       	ldi	r26, 0x3A	; 58
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ea e3       	ldi	r30, 0x3A	; 58
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <GPIO_setupPinDirection+0x8c>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <GPIO_setupPinDirection+0x88>
    1b0a:	84 2b       	or	r24, r20
    1b0c:	8c 93       	st	X, r24
    1b0e:	98 c0       	rjmp	.+304    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1b10:	aa e3       	ldi	r26, 0x3A	; 58
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	ea e3       	ldi	r30, 0x3A	; 58
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	48 2f       	mov	r20, r24
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 2e       	mov	r0, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <GPIO_setupPinDirection+0xb4>
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0a 94       	dec	r0
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <GPIO_setupPinDirection+0xb0>
    1b32:	80 95       	com	r24
    1b34:	84 23       	and	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	83 c0       	rjmp	.+262    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	a1 f4       	brne	.+40     	; 0x1b68 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1b40:	a7 e3       	ldi	r26, 0x37	; 55
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e7 e3       	ldi	r30, 0x37	; 55
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 2e       	mov	r0, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <GPIO_setupPinDirection+0xe4>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <GPIO_setupPinDirection+0xe0>
    1b62:	84 2b       	or	r24, r20
    1b64:	8c 93       	st	X, r24
    1b66:	6c c0       	rjmp	.+216    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1b68:	a7 e3       	ldi	r26, 0x37	; 55
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e7 e3       	ldi	r30, 0x37	; 55
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	48 2f       	mov	r20, r24
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	02 2e       	mov	r0, r18
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <GPIO_setupPinDirection+0x10c>
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	0a 94       	dec	r0
    1b88:	e2 f7       	brpl	.-8      	; 0x1b82 <GPIO_setupPinDirection+0x108>
    1b8a:	80 95       	com	r24
    1b8c:	84 23       	and	r24, r20
    1b8e:	8c 93       	st	X, r24
    1b90:	57 c0       	rjmp	.+174    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	a1 f4       	brne	.+40     	; 0x1bc0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1b98:	a4 e3       	ldi	r26, 0x34	; 52
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e4 e3       	ldi	r30, 0x34	; 52
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	48 2f       	mov	r20, r24
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	02 2e       	mov	r0, r18
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <GPIO_setupPinDirection+0x13c>
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	0a 94       	dec	r0
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <GPIO_setupPinDirection+0x138>
    1bba:	84 2b       	or	r24, r20
    1bbc:	8c 93       	st	X, r24
    1bbe:	40 c0       	rjmp	.+128    	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1bc0:	a4 e3       	ldi	r26, 0x34	; 52
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e4 e3       	ldi	r30, 0x34	; 52
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	48 2f       	mov	r20, r24
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 2e       	mov	r0, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <GPIO_setupPinDirection+0x164>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	0a 94       	dec	r0
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <GPIO_setupPinDirection+0x160>
    1be2:	80 95       	com	r24
    1be4:	84 23       	and	r24, r20
    1be6:	8c 93       	st	X, r24
    1be8:	2b c0       	rjmp	.+86     	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	a1 f4       	brne	.+40     	; 0x1c18 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1bf0:	a1 e3       	ldi	r26, 0x31	; 49
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e1 e3       	ldi	r30, 0x31	; 49
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <GPIO_setupPinDirection+0x194>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <GPIO_setupPinDirection+0x190>
    1c12:	84 2b       	or	r24, r20
    1c14:	8c 93       	st	X, r24
    1c16:	14 c0       	rjmp	.+40     	; 0x1c40 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1c18:	a1 e3       	ldi	r26, 0x31	; 49
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e1 e3       	ldi	r30, 0x31	; 49
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <GPIO_setupPinDirection+0x1bc>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <GPIO_setupPinDirection+0x1b8>
    1c3a:	80 95       	com	r24
    1c3c:	84 23       	and	r24, r20
    1c3e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <GPIO_writePin+0x6>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <GPIO_writePin+0x8>
    1c58:	0f 92       	push	r0
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	6a 83       	std	Y+2, r22	; 0x02
    1c62:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	88 30       	cpi	r24, 0x08	; 8
    1c68:	08 f0       	brcs	.+2      	; 0x1c6c <GPIO_writePin+0x1c>
    1c6a:	d5 c0       	rjmp	.+426    	; 0x1e16 <GPIO_writePin+0x1c6>
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	84 30       	cpi	r24, 0x04	; 4
    1c70:	08 f0       	brcs	.+2      	; 0x1c74 <GPIO_writePin+0x24>
    1c72:	d1 c0       	rjmp	.+418    	; 0x1e16 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	3d 83       	std	Y+5, r19	; 0x05
    1c7c:	2c 83       	std	Y+4, r18	; 0x04
    1c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c80:	9d 81       	ldd	r25, Y+5	; 0x05
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	91 05       	cpc	r25, r1
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <GPIO_writePin+0x3a>
    1c88:	43 c0       	rjmp	.+134    	; 0x1d10 <GPIO_writePin+0xc0>
    1c8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8e:	22 30       	cpi	r18, 0x02	; 2
    1c90:	31 05       	cpc	r19, r1
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <GPIO_writePin+0x4e>
    1c94:	8c 81       	ldd	r24, Y+4	; 0x04
    1c96:	9d 81       	ldd	r25, Y+5	; 0x05
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	71 f0       	breq	.+28     	; 0x1cb8 <GPIO_writePin+0x68>
    1c9c:	bc c0       	rjmp	.+376    	; 0x1e16 <GPIO_writePin+0x1c6>
    1c9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca2:	22 30       	cpi	r18, 0x02	; 2
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <GPIO_writePin+0x5a>
    1ca8:	5f c0       	rjmp	.+190    	; 0x1d68 <GPIO_writePin+0x118>
    1caa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cac:	9d 81       	ldd	r25, Y+5	; 0x05
    1cae:	83 30       	cpi	r24, 0x03	; 3
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <GPIO_writePin+0x66>
    1cb4:	85 c0       	rjmp	.+266    	; 0x1dc0 <GPIO_writePin+0x170>
    1cb6:	af c0       	rjmp	.+350    	; 0x1e16 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	a1 f4       	brne	.+40     	; 0x1ce6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1cbe:	ab e3       	ldi	r26, 0x3B	; 59
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	eb e3       	ldi	r30, 0x3B	; 59
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	48 2f       	mov	r20, r24
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 2e       	mov	r0, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <GPIO_writePin+0x8c>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <GPIO_writePin+0x88>
    1ce0:	84 2b       	or	r24, r20
    1ce2:	8c 93       	st	X, r24
    1ce4:	98 c0       	rjmp	.+304    	; 0x1e16 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ce6:	ab e3       	ldi	r26, 0x3B	; 59
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	eb e3       	ldi	r30, 0x3B	; 59
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	02 2e       	mov	r0, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <GPIO_writePin+0xb4>
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	0a 94       	dec	r0
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <GPIO_writePin+0xb0>
    1d08:	80 95       	com	r24
    1d0a:	84 23       	and	r24, r20
    1d0c:	8c 93       	st	X, r24
    1d0e:	83 c0       	rjmp	.+262    	; 0x1e16 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	a1 f4       	brne	.+40     	; 0x1d3e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1d16:	a8 e3       	ldi	r26, 0x38	; 56
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e8 e3       	ldi	r30, 0x38	; 56
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	48 2f       	mov	r20, r24
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 2e       	mov	r0, r18
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <GPIO_writePin+0xe4>
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	0a 94       	dec	r0
    1d36:	e2 f7       	brpl	.-8      	; 0x1d30 <GPIO_writePin+0xe0>
    1d38:	84 2b       	or	r24, r20
    1d3a:	8c 93       	st	X, r24
    1d3c:	6c c0       	rjmp	.+216    	; 0x1e16 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1d3e:	a8 e3       	ldi	r26, 0x38	; 56
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e8 e3       	ldi	r30, 0x38	; 56
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	48 2f       	mov	r20, r24
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	02 2e       	mov	r0, r18
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <GPIO_writePin+0x10c>
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	0a 94       	dec	r0
    1d5e:	e2 f7       	brpl	.-8      	; 0x1d58 <GPIO_writePin+0x108>
    1d60:	80 95       	com	r24
    1d62:	84 23       	and	r24, r20
    1d64:	8c 93       	st	X, r24
    1d66:	57 c0       	rjmp	.+174    	; 0x1e16 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	a1 f4       	brne	.+40     	; 0x1d96 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1d6e:	a5 e3       	ldi	r26, 0x35	; 53
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e5 e3       	ldi	r30, 0x35	; 53
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	48 2f       	mov	r20, r24
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 2e       	mov	r0, r18
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <GPIO_writePin+0x13c>
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	0a 94       	dec	r0
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <GPIO_writePin+0x138>
    1d90:	84 2b       	or	r24, r20
    1d92:	8c 93       	st	X, r24
    1d94:	40 c0       	rjmp	.+128    	; 0x1e16 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1d96:	a5 e3       	ldi	r26, 0x35	; 53
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e5 e3       	ldi	r30, 0x35	; 53
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	48 2f       	mov	r20, r24
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	02 2e       	mov	r0, r18
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <GPIO_writePin+0x164>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	0a 94       	dec	r0
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <GPIO_writePin+0x160>
    1db8:	80 95       	com	r24
    1dba:	84 23       	and	r24, r20
    1dbc:	8c 93       	st	X, r24
    1dbe:	2b c0       	rjmp	.+86     	; 0x1e16 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	a1 f4       	brne	.+40     	; 0x1dee <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1dc6:	a2 e3       	ldi	r26, 0x32	; 50
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e2 e3       	ldi	r30, 0x32	; 50
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	02 2e       	mov	r0, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <GPIO_writePin+0x194>
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <GPIO_writePin+0x190>
    1de8:	84 2b       	or	r24, r20
    1dea:	8c 93       	st	X, r24
    1dec:	14 c0       	rjmp	.+40     	; 0x1e16 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1dee:	a2 e3       	ldi	r26, 0x32	; 50
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e2 e3       	ldi	r30, 0x32	; 50
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	48 2f       	mov	r20, r24
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 2e       	mov	r0, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <GPIO_writePin+0x1bc>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	0a 94       	dec	r0
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <GPIO_writePin+0x1b8>
    1e10:	80 95       	com	r24
    1e12:	84 23       	and	r24, r20
    1e14:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <GPIO_readPin+0x6>
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <GPIO_readPin+0x8>
    1e2e:	0f 92       	push	r0
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	8a 83       	std	Y+2, r24	; 0x02
    1e36:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1e38:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	88 30       	cpi	r24, 0x08	; 8
    1e3e:	08 f0       	brcs	.+2      	; 0x1e42 <GPIO_readPin+0x1c>
    1e40:	84 c0       	rjmp	.+264    	; 0x1f4a <GPIO_readPin+0x124>
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	84 30       	cpi	r24, 0x04	; 4
    1e46:	08 f0       	brcs	.+2      	; 0x1e4a <GPIO_readPin+0x24>
    1e48:	80 c0       	rjmp	.+256    	; 0x1f4a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	3d 83       	std	Y+5, r19	; 0x05
    1e52:	2c 83       	std	Y+4, r18	; 0x04
    1e54:	4c 81       	ldd	r20, Y+4	; 0x04
    1e56:	5d 81       	ldd	r21, Y+5	; 0x05
    1e58:	41 30       	cpi	r20, 0x01	; 1
    1e5a:	51 05       	cpc	r21, r1
    1e5c:	79 f1       	breq	.+94     	; 0x1ebc <GPIO_readPin+0x96>
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	9d 81       	ldd	r25, Y+5	; 0x05
    1e62:	82 30       	cpi	r24, 0x02	; 2
    1e64:	91 05       	cpc	r25, r1
    1e66:	34 f4       	brge	.+12     	; 0x1e74 <GPIO_readPin+0x4e>
    1e68:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6c:	21 15       	cp	r18, r1
    1e6e:	31 05       	cpc	r19, r1
    1e70:	69 f0       	breq	.+26     	; 0x1e8c <GPIO_readPin+0x66>
    1e72:	6b c0       	rjmp	.+214    	; 0x1f4a <GPIO_readPin+0x124>
    1e74:	4c 81       	ldd	r20, Y+4	; 0x04
    1e76:	5d 81       	ldd	r21, Y+5	; 0x05
    1e78:	42 30       	cpi	r20, 0x02	; 2
    1e7a:	51 05       	cpc	r21, r1
    1e7c:	b9 f1       	breq	.+110    	; 0x1eec <GPIO_readPin+0xc6>
    1e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e80:	9d 81       	ldd	r25, Y+5	; 0x05
    1e82:	83 30       	cpi	r24, 0x03	; 3
    1e84:	91 05       	cpc	r25, r1
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <GPIO_readPin+0x64>
    1e88:	49 c0       	rjmp	.+146    	; 0x1f1c <GPIO_readPin+0xf6>
    1e8a:	5f c0       	rjmp	.+190    	; 0x1f4a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1e8c:	e9 e3       	ldi	r30, 0x39	; 57
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	88 2f       	mov	r24, r24
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a9 01       	movw	r20, r18
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <GPIO_readPin+0x7e>
    1ea0:	55 95       	asr	r21
    1ea2:	47 95       	ror	r20
    1ea4:	8a 95       	dec	r24
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <GPIO_readPin+0x7a>
    1ea8:	ca 01       	movw	r24, r20
    1eaa:	81 70       	andi	r24, 0x01	; 1
    1eac:	90 70       	andi	r25, 0x00	; 0
    1eae:	88 23       	and	r24, r24
    1eb0:	19 f0       	breq	.+6      	; 0x1eb8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	49 c0       	rjmp	.+146    	; 0x1f4a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1eb8:	19 82       	std	Y+1, r1	; 0x01
    1eba:	47 c0       	rjmp	.+142    	; 0x1f4a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ebc:	e6 e3       	ldi	r30, 0x36	; 54
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	88 2f       	mov	r24, r24
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	a9 01       	movw	r20, r18
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <GPIO_readPin+0xae>
    1ed0:	55 95       	asr	r21
    1ed2:	47 95       	ror	r20
    1ed4:	8a 95       	dec	r24
    1ed6:	e2 f7       	brpl	.-8      	; 0x1ed0 <GPIO_readPin+0xaa>
    1ed8:	ca 01       	movw	r24, r20
    1eda:	81 70       	andi	r24, 0x01	; 1
    1edc:	90 70       	andi	r25, 0x00	; 0
    1ede:	88 23       	and	r24, r24
    1ee0:	19 f0       	breq	.+6      	; 0x1ee8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	31 c0       	rjmp	.+98     	; 0x1f4a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ee8:	19 82       	std	Y+1, r1	; 0x01
    1eea:	2f c0       	rjmp	.+94     	; 0x1f4a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1eec:	e3 e3       	ldi	r30, 0x33	; 51
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	88 2f       	mov	r24, r24
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a9 01       	movw	r20, r18
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <GPIO_readPin+0xde>
    1f00:	55 95       	asr	r21
    1f02:	47 95       	ror	r20
    1f04:	8a 95       	dec	r24
    1f06:	e2 f7       	brpl	.-8      	; 0x1f00 <GPIO_readPin+0xda>
    1f08:	ca 01       	movw	r24, r20
    1f0a:	81 70       	andi	r24, 0x01	; 1
    1f0c:	90 70       	andi	r25, 0x00	; 0
    1f0e:	88 23       	and	r24, r24
    1f10:	19 f0       	breq	.+6      	; 0x1f18 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	19 c0       	rjmp	.+50     	; 0x1f4a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f18:	19 82       	std	Y+1, r1	; 0x01
    1f1a:	17 c0       	rjmp	.+46     	; 0x1f4a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1f1c:	e0 e3       	ldi	r30, 0x30	; 48
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	88 2f       	mov	r24, r24
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a9 01       	movw	r20, r18
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <GPIO_readPin+0x10e>
    1f30:	55 95       	asr	r21
    1f32:	47 95       	ror	r20
    1f34:	8a 95       	dec	r24
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <GPIO_readPin+0x10a>
    1f38:	ca 01       	movw	r24, r20
    1f3a:	81 70       	andi	r24, 0x01	; 1
    1f3c:	90 70       	andi	r25, 0x00	; 0
    1f3e:	88 23       	and	r24, r24
    1f40:	19 f0       	breq	.+6      	; 0x1f48 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	01 c0       	rjmp	.+2      	; 0x1f4a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f48:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <GPIO_setupPortDirection+0x6>
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <GPIO_setupPortDirection+0x8>
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	84 30       	cpi	r24, 0x04	; 4
    1f70:	90 f5       	brcc	.+100    	; 0x1fd6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	3c 83       	std	Y+4, r19	; 0x04
    1f7a:	2b 83       	std	Y+3, r18	; 0x03
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	91 05       	cpc	r25, r1
    1f84:	d1 f0       	breq	.+52     	; 0x1fba <GPIO_setupPortDirection+0x5e>
    1f86:	2b 81       	ldd	r18, Y+3	; 0x03
    1f88:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8a:	22 30       	cpi	r18, 0x02	; 2
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	2c f4       	brge	.+10     	; 0x1f9a <GPIO_setupPortDirection+0x3e>
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	9c 81       	ldd	r25, Y+4	; 0x04
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	61 f0       	breq	.+24     	; 0x1fb0 <GPIO_setupPortDirection+0x54>
    1f98:	1e c0       	rjmp	.+60     	; 0x1fd6 <GPIO_setupPortDirection+0x7a>
    1f9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f9e:	22 30       	cpi	r18, 0x02	; 2
    1fa0:	31 05       	cpc	r19, r1
    1fa2:	81 f0       	breq	.+32     	; 0x1fc4 <GPIO_setupPortDirection+0x68>
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa8:	83 30       	cpi	r24, 0x03	; 3
    1faa:	91 05       	cpc	r25, r1
    1fac:	81 f0       	breq	.+32     	; 0x1fce <GPIO_setupPortDirection+0x72>
    1fae:	13 c0       	rjmp	.+38     	; 0x1fd6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1fb0:	ea e3       	ldi	r30, 0x3A	; 58
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	80 83       	st	Z, r24
    1fb8:	0e c0       	rjmp	.+28     	; 0x1fd6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1fba:	e7 e3       	ldi	r30, 0x37	; 55
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	80 83       	st	Z, r24
    1fc2:	09 c0       	rjmp	.+18     	; 0x1fd6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1fc4:	e4 e3       	ldi	r30, 0x34	; 52
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	80 83       	st	Z, r24
    1fcc:	04 c0       	rjmp	.+8      	; 0x1fd6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1fce:	e1 e3       	ldi	r30, 0x31	; 49
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	80 83       	st	Z, r24
			break;
		}
	}
}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <GPIO_writePort+0x6>
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <GPIO_writePort+0x8>
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	84 30       	cpi	r24, 0x04	; 4
    1ff8:	90 f5       	brcc	.+100    	; 0x205e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	3c 83       	std	Y+4, r19	; 0x04
    2002:	2b 83       	std	Y+3, r18	; 0x03
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	91 05       	cpc	r25, r1
    200c:	d1 f0       	breq	.+52     	; 0x2042 <GPIO_writePort+0x5e>
    200e:	2b 81       	ldd	r18, Y+3	; 0x03
    2010:	3c 81       	ldd	r19, Y+4	; 0x04
    2012:	22 30       	cpi	r18, 0x02	; 2
    2014:	31 05       	cpc	r19, r1
    2016:	2c f4       	brge	.+10     	; 0x2022 <GPIO_writePort+0x3e>
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	9c 81       	ldd	r25, Y+4	; 0x04
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	61 f0       	breq	.+24     	; 0x2038 <GPIO_writePort+0x54>
    2020:	1e c0       	rjmp	.+60     	; 0x205e <GPIO_writePort+0x7a>
    2022:	2b 81       	ldd	r18, Y+3	; 0x03
    2024:	3c 81       	ldd	r19, Y+4	; 0x04
    2026:	22 30       	cpi	r18, 0x02	; 2
    2028:	31 05       	cpc	r19, r1
    202a:	81 f0       	breq	.+32     	; 0x204c <GPIO_writePort+0x68>
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	9c 81       	ldd	r25, Y+4	; 0x04
    2030:	83 30       	cpi	r24, 0x03	; 3
    2032:	91 05       	cpc	r25, r1
    2034:	81 f0       	breq	.+32     	; 0x2056 <GPIO_writePort+0x72>
    2036:	13 c0       	rjmp	.+38     	; 0x205e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2038:	eb e3       	ldi	r30, 0x3B	; 59
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	80 83       	st	Z, r24
    2040:	0e c0       	rjmp	.+28     	; 0x205e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2042:	e8 e3       	ldi	r30, 0x38	; 56
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	80 83       	st	Z, r24
    204a:	09 c0       	rjmp	.+18     	; 0x205e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    204c:	e5 e3       	ldi	r30, 0x35	; 53
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	80 83       	st	Z, r24
    2054:	04 c0       	rjmp	.+8      	; 0x205e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2056:	e2 e3       	ldi	r30, 0x32	; 50
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	80 83       	st	Z, r24
			break;
		}
	}
}
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	00 d0       	rcall	.+0      	; 0x2072 <GPIO_readPort+0x6>
    2072:	00 d0       	rcall	.+0      	; 0x2074 <GPIO_readPort+0x8>
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    207a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	84 30       	cpi	r24, 0x04	; 4
    2080:	90 f5       	brcc	.+100    	; 0x20e6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	3c 83       	std	Y+4, r19	; 0x04
    208a:	2b 83       	std	Y+3, r18	; 0x03
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	91 05       	cpc	r25, r1
    2094:	d1 f0       	breq	.+52     	; 0x20ca <GPIO_readPort+0x5e>
    2096:	2b 81       	ldd	r18, Y+3	; 0x03
    2098:	3c 81       	ldd	r19, Y+4	; 0x04
    209a:	22 30       	cpi	r18, 0x02	; 2
    209c:	31 05       	cpc	r19, r1
    209e:	2c f4       	brge	.+10     	; 0x20aa <GPIO_readPort+0x3e>
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	61 f0       	breq	.+24     	; 0x20c0 <GPIO_readPort+0x54>
    20a8:	1e c0       	rjmp	.+60     	; 0x20e6 <GPIO_readPort+0x7a>
    20aa:	2b 81       	ldd	r18, Y+3	; 0x03
    20ac:	3c 81       	ldd	r19, Y+4	; 0x04
    20ae:	22 30       	cpi	r18, 0x02	; 2
    20b0:	31 05       	cpc	r19, r1
    20b2:	81 f0       	breq	.+32     	; 0x20d4 <GPIO_readPort+0x68>
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	9c 81       	ldd	r25, Y+4	; 0x04
    20b8:	83 30       	cpi	r24, 0x03	; 3
    20ba:	91 05       	cpc	r25, r1
    20bc:	81 f0       	breq	.+32     	; 0x20de <GPIO_readPort+0x72>
    20be:	13 c0       	rjmp	.+38     	; 0x20e6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    20c0:	e9 e3       	ldi	r30, 0x39	; 57
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	0e c0       	rjmp	.+28     	; 0x20e6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    20ca:	e6 e3       	ldi	r30, 0x36	; 54
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	09 c0       	rjmp	.+18     	; 0x20e6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    20d4:	e3 e3       	ldi	r30, 0x33	; 51
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	04 c0       	rjmp	.+8      	; 0x20e6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    20de:	e0 e3       	ldi	r30, 0x30	; 48
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <__vector_5>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    20f6:	1f 92       	push	r1
    20f8:	0f 92       	push	r0
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	0f 92       	push	r0
    20fe:	11 24       	eor	r1, r1
    2100:	2f 93       	push	r18
    2102:	3f 93       	push	r19
    2104:	4f 93       	push	r20
    2106:	5f 93       	push	r21
    2108:	6f 93       	push	r22
    210a:	7f 93       	push	r23
    210c:	8f 93       	push	r24
    210e:	9f 93       	push	r25
    2110:	af 93       	push	r26
    2112:	bf 93       	push	r27
    2114:	ef 93       	push	r30
    2116:	ff 93       	push	r31
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2120:	80 91 da 00 	lds	r24, 0x00DA
    2124:	90 91 db 00 	lds	r25, 0x00DB
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	29 f0       	breq	.+10     	; 0x2136 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    212c:	e0 91 da 00 	lds	r30, 0x00DA
    2130:	f0 91 db 00 	lds	r31, 0x00DB
    2134:	09 95       	icall
	}
}
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	ff 91       	pop	r31
    213c:	ef 91       	pop	r30
    213e:	bf 91       	pop	r27
    2140:	af 91       	pop	r26
    2142:	9f 91       	pop	r25
    2144:	8f 91       	pop	r24
    2146:	7f 91       	pop	r23
    2148:	6f 91       	pop	r22
    214a:	5f 91       	pop	r21
    214c:	4f 91       	pop	r20
    214e:	3f 91       	pop	r19
    2150:	2f 91       	pop	r18
    2152:	0f 90       	pop	r0
    2154:	0f be       	out	0x3f, r0	; 63
    2156:	0f 90       	pop	r0
    2158:	1f 90       	pop	r1
    215a:	18 95       	reti

0000215c <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	00 d0       	rcall	.+0      	; 0x2162 <Icu_init+0x6>
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    216a:	a1 e3       	ldi	r26, 0x31	; 49
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	e1 e3       	ldi	r30, 0x31	; 49
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	8f 7b       	andi	r24, 0xBF	; 191
    2176:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2178:	ef e4       	ldi	r30, 0x4F	; 79
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	8c e0       	ldi	r24, 0x0C	; 12
    217e:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    2180:	ae e4       	ldi	r26, 0x4E	; 78
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	ee e4       	ldi	r30, 0x4E	; 78
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	98 2f       	mov	r25, r24
    218c:	98 7f       	andi	r25, 0xF8	; 248
    218e:	e9 81       	ldd	r30, Y+1	; 0x01
    2190:	fa 81       	ldd	r31, Y+2	; 0x02
    2192:	80 81       	ld	r24, Z
    2194:	89 2b       	or	r24, r25
    2196:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    2198:	ae e4       	ldi	r26, 0x4E	; 78
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	ee e4       	ldi	r30, 0x4E	; 78
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	28 2f       	mov	r18, r24
    21a4:	2f 7b       	andi	r18, 0xBF	; 191
    21a6:	e9 81       	ldd	r30, Y+1	; 0x01
    21a8:	fa 81       	ldd	r31, Y+2	; 0x02
    21aa:	81 81       	ldd	r24, Z+1	; 0x01
    21ac:	88 2f       	mov	r24, r24
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	00 24       	eor	r0, r0
    21b2:	96 95       	lsr	r25
    21b4:	87 95       	ror	r24
    21b6:	07 94       	ror	r0
    21b8:	96 95       	lsr	r25
    21ba:	87 95       	ror	r24
    21bc:	07 94       	ror	r0
    21be:	98 2f       	mov	r25, r24
    21c0:	80 2d       	mov	r24, r0
    21c2:	82 2b       	or	r24, r18
    21c4:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    21c6:	ec e4       	ldi	r30, 0x4C	; 76
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	11 82       	std	Z+1, r1	; 0x01
    21cc:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    21ce:	e6 e4       	ldi	r30, 0x46	; 70
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	11 82       	std	Z+1, r1	; 0x01
    21d4:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    21d6:	a9 e5       	ldi	r26, 0x59	; 89
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e9 e5       	ldi	r30, 0x59	; 89
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	80 62       	ori	r24, 0x20	; 32
    21e2:	8c 93       	st	X, r24
}
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <Icu_setCallBack+0x6>
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	9a 83       	std	Y+2, r25	; 0x02
    21fa:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2200:	90 93 db 00 	sts	0x00DB, r25
    2204:	80 93 da 00 	sts	0x00DA, r24
}
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	0f 92       	push	r0
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    221e:	ae e4       	ldi	r26, 0x4E	; 78
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	ee e4       	ldi	r30, 0x4E	; 78
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	28 2f       	mov	r18, r24
    222a:	2f 7b       	andi	r18, 0xBF	; 191
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	88 2f       	mov	r24, r24
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	00 24       	eor	r0, r0
    2234:	96 95       	lsr	r25
    2236:	87 95       	ror	r24
    2238:	07 94       	ror	r0
    223a:	96 95       	lsr	r25
    223c:	87 95       	ror	r24
    223e:	07 94       	ror	r0
    2240:	98 2f       	mov	r25, r24
    2242:	80 2d       	mov	r24, r0
    2244:	82 2b       	or	r24, r18
    2246:	8c 93       	st	X, r24
}
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Icu_getInputCaptureValue(void)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2258:	e6 e4       	ldi	r30, 0x46	; 70
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    226e:	ec e4       	ldi	r30, 0x4C	; 76
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	11 82       	std	Z+1, r1	; 0x01
    2274:	10 82       	st	Z, r1
}
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	08 95       	ret

0000227c <Icu_DeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_DeInit(void)
{
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    2284:	ef e4       	ldi	r30, 0x4F	; 79
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	10 82       	st	Z, r1
	TCCR1B = 0;
    228a:	ee e4       	ldi	r30, 0x4E	; 78
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	10 82       	st	Z, r1
	TCNT1 = 0;
    2290:	ec e4       	ldi	r30, 0x4C	; 76
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	11 82       	std	Z+1, r1	; 0x01
    2296:	10 82       	st	Z, r1
	ICR1 = 0;
    2298:	e6 e4       	ldi	r30, 0x46	; 70
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	11 82       	std	Z+1, r1	; 0x01
    229e:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    22a0:	a9 e5       	ldi	r26, 0x59	; 89
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e9 e5       	ldi	r30, 0x59	; 89
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	8f 7d       	andi	r24, 0xDF	; 223
    22ac:	8c 93       	st	X, r24
}
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <KEYPAD_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void) {
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <KEYPAD_getPressedKey+0x6>
    22ba:	0f 92       	push	r0
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
	uint8 col, row;
	uint8 keypad_port_value = 0;
    22c0:	19 82       	std	Y+1, r1	; 0x01
	while (1) {
		for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    22c2:	1b 82       	std	Y+3, r1	; 0x03
    22c4:	43 c0       	rjmp	.+134    	; 0x234c <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID, PORT_INPUT);
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,
    22ce:	8b 81       	ldd	r24, Y+3	; 0x03
    22d0:	98 2f       	mov	r25, r24
    22d2:	9c 5f       	subi	r25, 0xFC	; 252
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	69 2f       	mov	r22, r25
    22d8:	41 e0       	ldi	r20, 0x01	; 1
    22da:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <GPIO_setupPinDirection>
			KEYPAD_FIRST_COLUMN_PIN_ID + col, PIN_OUTPUT);

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1 << (KEYPAD_FIRST_COLUMN_PIN_ID + col));
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	88 2f       	mov	r24, r24
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	9c 01       	movw	r18, r24
    22e6:	2c 5f       	subi	r18, 0xFC	; 252
    22e8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <KEYPAD_getPressedKey+0x40>
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	2a 95       	dec	r18
    22f6:	e2 f7       	brpl	.-8      	; 0x22f0 <KEYPAD_getPressedKey+0x3c>
    22f8:	80 95       	com	r24
    22fa:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID, keypad_port_value);
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	69 81       	ldd	r22, Y+1	; 0x01
    2300:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <GPIO_writePort>

			for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    2304:	1a 82       	std	Y+2, r1	; 0x02
    2306:	1c c0       	rjmp	.+56     	; 0x2340 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if (GPIO_readPin(KEYPAD_PORT_ID,
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	6a 81       	ldd	r22, Y+2	; 0x02
    230c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <GPIO_readPin>
    2310:	88 23       	and	r24, r24
    2312:	99 f4       	brne	.+38     	; 0x233a <KEYPAD_getPressedKey+0x86>
						row + KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED) {
#if (KEYPAD_NUM_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber(
							(row * KEYPAD_NUM_COLS) + col + 1);
#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	98 2f       	mov	r25, r24
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	89 0f       	add	r24, r25
    2328:	8f 5f       	subi	r24, 0xFF	; 255
    232a:	0e 94 ab 11 	call	0x2356	; 0x2356 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID, keypad_port_value);

			for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	8f 5f       	subi	r24, 0xFF	; 255
    233e:	8a 83       	std	Y+2, r24	; 0x02
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	84 30       	cpi	r24, 0x04	; 4
    2344:	08 f3       	brcs	.-62     	; 0x2308 <KEYPAD_getPressedKey+0x54>
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void) {
	uint8 col, row;
	uint8 keypad_port_value = 0;
	while (1) {
		for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	8f 5f       	subi	r24, 0xFF	; 255
    234a:	8b 83       	std	Y+3, r24	; 0x03
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	84 30       	cpi	r24, 0x04	; 4
    2350:	08 f4       	brcc	.+2      	; 0x2354 <KEYPAD_getPressedKey+0xa0>
    2352:	b9 cf       	rjmp	.-142    	; 0x22c6 <KEYPAD_getPressedKey+0x12>
    2354:	b6 cf       	rjmp	.-148    	; 0x22c2 <KEYPAD_getPressedKey+0xe>

00002356 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	00 d0       	rcall	.+0      	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x6>
    235c:	00 d0       	rcall	.+0      	; 0x235e <KEYPAD_4x4_adjustKeyNumber+0x8>
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2364:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2366:	8a 81       	ldd	r24, Y+2	; 0x02
    2368:	28 2f       	mov	r18, r24
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	3c 83       	std	Y+4, r19	; 0x04
    236e:	2b 83       	std	Y+3, r18	; 0x03
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	9c 81       	ldd	r25, Y+4	; 0x04
    2374:	88 30       	cpi	r24, 0x08	; 8
    2376:	91 05       	cpc	r25, r1
    2378:	09 f4       	brne	.+2      	; 0x237c <KEYPAD_4x4_adjustKeyNumber+0x26>
    237a:	70 c0       	rjmp	.+224    	; 0x245c <KEYPAD_4x4_adjustKeyNumber+0x106>
    237c:	2b 81       	ldd	r18, Y+3	; 0x03
    237e:	3c 81       	ldd	r19, Y+4	; 0x04
    2380:	29 30       	cpi	r18, 0x09	; 9
    2382:	31 05       	cpc	r19, r1
    2384:	5c f5       	brge	.+86     	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x86>
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	9c 81       	ldd	r25, Y+4	; 0x04
    238a:	84 30       	cpi	r24, 0x04	; 4
    238c:	91 05       	cpc	r25, r1
    238e:	09 f4       	brne	.+2      	; 0x2392 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2390:	59 c0       	rjmp	.+178    	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2392:	2b 81       	ldd	r18, Y+3	; 0x03
    2394:	3c 81       	ldd	r19, Y+4	; 0x04
    2396:	25 30       	cpi	r18, 0x05	; 5
    2398:	31 05       	cpc	r19, r1
    239a:	9c f4       	brge	.+38     	; 0x23c2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	82 30       	cpi	r24, 0x02	; 2
    23a2:	91 05       	cpc	r25, r1
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    23a6:	48 c0       	rjmp	.+144    	; 0x2438 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    23a8:	2b 81       	ldd	r18, Y+3	; 0x03
    23aa:	3c 81       	ldd	r19, Y+4	; 0x04
    23ac:	23 30       	cpi	r18, 0x03	; 3
    23ae:	31 05       	cpc	r19, r1
    23b0:	0c f0       	brlt	.+2      	; 0x23b4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    23b2:	45 c0       	rjmp	.+138    	; 0x243e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	9c 81       	ldd	r25, Y+4	; 0x04
    23b8:	81 30       	cpi	r24, 0x01	; 1
    23ba:	91 05       	cpc	r25, r1
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    23be:	39 c0       	rjmp	.+114    	; 0x2432 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    23c0:	67 c0       	rjmp	.+206    	; 0x2490 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    23c2:	2b 81       	ldd	r18, Y+3	; 0x03
    23c4:	3c 81       	ldd	r19, Y+4	; 0x04
    23c6:	26 30       	cpi	r18, 0x06	; 6
    23c8:	31 05       	cpc	r19, r1
    23ca:	09 f4       	brne	.+2      	; 0x23ce <KEYPAD_4x4_adjustKeyNumber+0x78>
    23cc:	41 c0       	rjmp	.+130    	; 0x2450 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	9c 81       	ldd	r25, Y+4	; 0x04
    23d2:	87 30       	cpi	r24, 0x07	; 7
    23d4:	91 05       	cpc	r25, r1
    23d6:	0c f0       	brlt	.+2      	; 0x23da <KEYPAD_4x4_adjustKeyNumber+0x84>
    23d8:	3e c0       	rjmp	.+124    	; 0x2456 <KEYPAD_4x4_adjustKeyNumber+0x100>
    23da:	37 c0       	rjmp	.+110    	; 0x244a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    23dc:	2b 81       	ldd	r18, Y+3	; 0x03
    23de:	3c 81       	ldd	r19, Y+4	; 0x04
    23e0:	2c 30       	cpi	r18, 0x0C	; 12
    23e2:	31 05       	cpc	r19, r1
    23e4:	09 f4       	brne	.+2      	; 0x23e8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    23e6:	46 c0       	rjmp	.+140    	; 0x2474 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	9c 81       	ldd	r25, Y+4	; 0x04
    23ec:	8d 30       	cpi	r24, 0x0D	; 13
    23ee:	91 05       	cpc	r25, r1
    23f0:	5c f4       	brge	.+22     	; 0x2408 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    23f2:	2b 81       	ldd	r18, Y+3	; 0x03
    23f4:	3c 81       	ldd	r19, Y+4	; 0x04
    23f6:	2a 30       	cpi	r18, 0x0A	; 10
    23f8:	31 05       	cpc	r19, r1
    23fa:	b1 f1       	breq	.+108    	; 0x2468 <KEYPAD_4x4_adjustKeyNumber+0x112>
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2400:	8b 30       	cpi	r24, 0x0B	; 11
    2402:	91 05       	cpc	r25, r1
    2404:	a4 f5       	brge	.+104    	; 0x246e <KEYPAD_4x4_adjustKeyNumber+0x118>
    2406:	2d c0       	rjmp	.+90     	; 0x2462 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2408:	2b 81       	ldd	r18, Y+3	; 0x03
    240a:	3c 81       	ldd	r19, Y+4	; 0x04
    240c:	2e 30       	cpi	r18, 0x0E	; 14
    240e:	31 05       	cpc	r19, r1
    2410:	b9 f1       	breq	.+110    	; 0x2480 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	9c 81       	ldd	r25, Y+4	; 0x04
    2416:	8e 30       	cpi	r24, 0x0E	; 14
    2418:	91 05       	cpc	r25, r1
    241a:	7c f1       	brlt	.+94     	; 0x247a <KEYPAD_4x4_adjustKeyNumber+0x124>
    241c:	2b 81       	ldd	r18, Y+3	; 0x03
    241e:	3c 81       	ldd	r19, Y+4	; 0x04
    2420:	2f 30       	cpi	r18, 0x0F	; 15
    2422:	31 05       	cpc	r19, r1
    2424:	79 f1       	breq	.+94     	; 0x2484 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	9c 81       	ldd	r25, Y+4	; 0x04
    242a:	80 31       	cpi	r24, 0x10	; 16
    242c:	91 05       	cpc	r25, r1
    242e:	69 f1       	breq	.+90     	; 0x248a <KEYPAD_4x4_adjustKeyNumber+0x134>
    2430:	2f c0       	rjmp	.+94     	; 0x2490 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2432:	87 e0       	ldi	r24, 0x07	; 7
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	2e c0       	rjmp	.+92     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2438:	88 e0       	ldi	r24, 0x08	; 8
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	2b c0       	rjmp	.+86     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    243e:	89 e0       	ldi	r24, 0x09	; 9
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	28 c0       	rjmp	.+80     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2444:	85 e2       	ldi	r24, 0x25	; 37
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	25 c0       	rjmp	.+74     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    244a:	84 e0       	ldi	r24, 0x04	; 4
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	22 c0       	rjmp	.+68     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2450:	85 e0       	ldi	r24, 0x05	; 5
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	1f c0       	rjmp	.+62     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2456:	86 e0       	ldi	r24, 0x06	; 6
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	1c c0       	rjmp	.+56     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    245c:	8a e2       	ldi	r24, 0x2A	; 42
    245e:	89 83       	std	Y+1, r24	; 0x01
    2460:	19 c0       	rjmp	.+50     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	89 83       	std	Y+1, r24	; 0x01
    2466:	16 c0       	rjmp	.+44     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2468:	82 e0       	ldi	r24, 0x02	; 2
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	13 c0       	rjmp	.+38     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    246e:	83 e0       	ldi	r24, 0x03	; 3
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	10 c0       	rjmp	.+32     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2474:	8d e2       	ldi	r24, 0x2D	; 45
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	0d c0       	rjmp	.+26     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    247a:	8d e0       	ldi	r24, 0x0D	; 13
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	0a c0       	rjmp	.+20     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2480:	19 82       	std	Y+1, r1	; 0x01
    2482:	08 c0       	rjmp	.+16     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2484:	8d e3       	ldi	r24, 0x3D	; 61
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	05 c0       	rjmp	.+10     	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    248a:	8b e2       	ldi	r24, 0x2B	; 43
    248c:	89 83       	std	Y+1, r24	; 0x01
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2494:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <KEYPAD_Pressed>:

#endif
uint8 KEYPAD_Pressed() {
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	0f 92       	push	r0
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62

	if (GPIO_readPin(KEYPAD_PORT_ID,
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	60 e0       	ldi	r22, 0x00	; 0
    24b2:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <GPIO_readPin>
    24b6:	88 23       	and	r24, r24
    24b8:	19 f4       	brne	.+6      	; 0x24c0 <KEYPAD_Pressed+0x1c>
			0 + KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED) {
		return 1;
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	13 c0       	rjmp	.+38     	; 0x24e6 <KEYPAD_Pressed+0x42>
	}
	if (GPIO_readPin(KEYPAD_PORT_ID,
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	61 e0       	ldi	r22, 0x01	; 1
    24c4:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <GPIO_readPin>
    24c8:	88 23       	and	r24, r24
    24ca:	19 f4       	brne	.+6      	; 0x24d2 <KEYPAD_Pressed+0x2e>
			1 + KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED) {
		return 1;
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	0a c0       	rjmp	.+20     	; 0x24e6 <KEYPAD_Pressed+0x42>
	}
	if (GPIO_readPin(KEYPAD_PORT_ID,
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	62 e0       	ldi	r22, 0x02	; 2
    24d6:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <GPIO_readPin>
    24da:	88 23       	and	r24, r24
    24dc:	19 f4       	brne	.+6      	; 0x24e4 <KEYPAD_Pressed+0x40>
			2 + KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED) {
		return 1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	01 c0       	rjmp	.+2      	; 0x24e6 <KEYPAD_Pressed+0x42>
	}
	return 0;
    24e4:	19 82       	std	Y+1, r1	; 0x01
    24e6:	89 81       	ldd	r24, Y+1	; 0x01

}
    24e8:	0f 90       	pop	r0
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    24f8:	83 e0       	ldi	r24, 0x03	; 3
    24fa:	66 e0       	ldi	r22, 0x06	; 6
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2502:	83 e0       	ldi	r24, 0x03	; 3
    2504:	65 e0       	ldi	r22, 0x05	; 5
    2506:	41 e0       	ldi	r20, 0x01	; 1
    2508:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    250c:	83 e0       	ldi	r24, 0x03	; 3
    250e:	64 e0       	ldi	r22, 0x04	; 4
    2510:	41 e0       	ldi	r20, 0x01	; 1
    2512:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2516:	82 e0       	ldi	r24, 0x02	; 2
    2518:	6f ef       	ldi	r22, 0xFF	; 255
    251a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    251e:	88 e3       	ldi	r24, 0x38	; 56
    2520:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_sendCommand>

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2524:	8c e0       	ldi	r24, 0x0C	; 12
    2526:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_sendCommand>

	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_sendCommand>
}
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	e9 97       	sbiw	r28, 0x39	; 57
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    254c:	83 e0       	ldi	r24, 0x03	; 3
    254e:	66 e0       	ldi	r22, 0x06	; 6
    2550:	40 e0       	ldi	r20, 0x00	; 0
    2552:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2556:	83 e0       	ldi	r24, 0x03	; 3
    2558:	65 e0       	ldi	r22, 0x05	; 5
    255a:	40 e0       	ldi	r20, 0x00	; 0
    255c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	a0 e8       	ldi	r26, 0x80	; 128
    2566:	bf e3       	ldi	r27, 0x3F	; 63
    2568:	8d ab       	std	Y+53, r24	; 0x35
    256a:	9e ab       	std	Y+54, r25	; 0x36
    256c:	af ab       	std	Y+55, r26	; 0x37
    256e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2570:	6d a9       	ldd	r22, Y+53	; 0x35
    2572:	7e a9       	ldd	r23, Y+54	; 0x36
    2574:	8f a9       	ldd	r24, Y+55	; 0x37
    2576:	98 ad       	ldd	r25, Y+56	; 0x38
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	4a ef       	ldi	r20, 0xFA	; 250
    257e:	54 e4       	ldi	r21, 0x44	; 68
    2580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	89 ab       	std	Y+49, r24	; 0x31
    258a:	9a ab       	std	Y+50, r25	; 0x32
    258c:	ab ab       	std	Y+51, r26	; 0x33
    258e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2590:	69 a9       	ldd	r22, Y+49	; 0x31
    2592:	7a a9       	ldd	r23, Y+50	; 0x32
    2594:	8b a9       	ldd	r24, Y+51	; 0x33
    2596:	9c a9       	ldd	r25, Y+52	; 0x34
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e8       	ldi	r20, 0x80	; 128
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	2c f4       	brge	.+10     	; 0x25b2 <LCD_sendCommand+0x7c>
		__ticks = 1;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	98 ab       	std	Y+48, r25	; 0x30
    25ae:	8f a7       	std	Y+47, r24	; 0x2f
    25b0:	3f c0       	rjmp	.+126    	; 0x2630 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    25b2:	69 a9       	ldd	r22, Y+49	; 0x31
    25b4:	7a a9       	ldd	r23, Y+50	; 0x32
    25b6:	8b a9       	ldd	r24, Y+51	; 0x33
    25b8:	9c a9       	ldd	r25, Y+52	; 0x34
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	3f ef       	ldi	r19, 0xFF	; 255
    25be:	4f e7       	ldi	r20, 0x7F	; 127
    25c0:	57 e4       	ldi	r21, 0x47	; 71
    25c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c6:	18 16       	cp	r1, r24
    25c8:	4c f5       	brge	.+82     	; 0x261c <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ca:	6d a9       	ldd	r22, Y+53	; 0x35
    25cc:	7e a9       	ldd	r23, Y+54	; 0x36
    25ce:	8f a9       	ldd	r24, Y+55	; 0x37
    25d0:	98 ad       	ldd	r25, Y+56	; 0x38
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e2       	ldi	r20, 0x20	; 32
    25d8:	51 e4       	ldi	r21, 0x41	; 65
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	98 ab       	std	Y+48, r25	; 0x30
    25f0:	8f a7       	std	Y+47, r24	; 0x2f
    25f2:	0f c0       	rjmp	.+30     	; 0x2612 <LCD_sendCommand+0xdc>
    25f4:	88 ec       	ldi	r24, 0xC8	; 200
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	9e a7       	std	Y+46, r25	; 0x2e
    25fa:	8d a7       	std	Y+45, r24	; 0x2d
    25fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    25fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LCD_sendCommand+0xca>
    2604:	9e a7       	std	Y+46, r25	; 0x2e
    2606:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2608:	8f a5       	ldd	r24, Y+47	; 0x2f
    260a:	98 a9       	ldd	r25, Y+48	; 0x30
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	98 ab       	std	Y+48, r25	; 0x30
    2610:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2612:	8f a5       	ldd	r24, Y+47	; 0x2f
    2614:	98 a9       	ldd	r25, Y+48	; 0x30
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	69 f7       	brne	.-38     	; 0x25f4 <LCD_sendCommand+0xbe>
    261a:	14 c0       	rjmp	.+40     	; 0x2644 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261c:	69 a9       	ldd	r22, Y+49	; 0x31
    261e:	7a a9       	ldd	r23, Y+50	; 0x32
    2620:	8b a9       	ldd	r24, Y+51	; 0x33
    2622:	9c a9       	ldd	r25, Y+52	; 0x34
    2624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	98 ab       	std	Y+48, r25	; 0x30
    262e:	8f a7       	std	Y+47, r24	; 0x2f
    2630:	8f a5       	ldd	r24, Y+47	; 0x2f
    2632:	98 a9       	ldd	r25, Y+48	; 0x30
    2634:	9c a7       	std	Y+44, r25	; 0x2c
    2636:	8b a7       	std	Y+43, r24	; 0x2b
    2638:	8b a5       	ldd	r24, Y+43	; 0x2b
    263a:	9c a5       	ldd	r25, Y+44	; 0x2c
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <LCD_sendCommand+0x106>
    2640:	9c a7       	std	Y+44, r25	; 0x2c
    2642:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2644:	83 e0       	ldi	r24, 0x03	; 3
    2646:	64 e0       	ldi	r22, 0x04	; 4
    2648:	41 e0       	ldi	r20, 0x01	; 1
    264a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	a0 e8       	ldi	r26, 0x80	; 128
    2654:	bf e3       	ldi	r27, 0x3F	; 63
    2656:	8f a3       	std	Y+39, r24	; 0x27
    2658:	98 a7       	std	Y+40, r25	; 0x28
    265a:	a9 a7       	std	Y+41, r26	; 0x29
    265c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265e:	6f a1       	ldd	r22, Y+39	; 0x27
    2660:	78 a5       	ldd	r23, Y+40	; 0x28
    2662:	89 a5       	ldd	r24, Y+41	; 0x29
    2664:	9a a5       	ldd	r25, Y+42	; 0x2a
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a ef       	ldi	r20, 0xFA	; 250
    266c:	54 e4       	ldi	r21, 0x44	; 68
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	8b a3       	std	Y+35, r24	; 0x23
    2678:	9c a3       	std	Y+36, r25	; 0x24
    267a:	ad a3       	std	Y+37, r26	; 0x25
    267c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    267e:	6b a1       	ldd	r22, Y+35	; 0x23
    2680:	7c a1       	ldd	r23, Y+36	; 0x24
    2682:	8d a1       	ldd	r24, Y+37	; 0x25
    2684:	9e a1       	ldd	r25, Y+38	; 0x26
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e8       	ldi	r20, 0x80	; 128
    268c:	5f e3       	ldi	r21, 0x3F	; 63
    268e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2692:	88 23       	and	r24, r24
    2694:	2c f4       	brge	.+10     	; 0x26a0 <LCD_sendCommand+0x16a>
		__ticks = 1;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9a a3       	std	Y+34, r25	; 0x22
    269c:	89 a3       	std	Y+33, r24	; 0x21
    269e:	3f c0       	rjmp	.+126    	; 0x271e <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    26a0:	6b a1       	ldd	r22, Y+35	; 0x23
    26a2:	7c a1       	ldd	r23, Y+36	; 0x24
    26a4:	8d a1       	ldd	r24, Y+37	; 0x25
    26a6:	9e a1       	ldd	r25, Y+38	; 0x26
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	3f ef       	ldi	r19, 0xFF	; 255
    26ac:	4f e7       	ldi	r20, 0x7F	; 127
    26ae:	57 e4       	ldi	r21, 0x47	; 71
    26b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b4:	18 16       	cp	r1, r24
    26b6:	4c f5       	brge	.+82     	; 0x270a <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b8:	6f a1       	ldd	r22, Y+39	; 0x27
    26ba:	78 a5       	ldd	r23, Y+40	; 0x28
    26bc:	89 a5       	ldd	r24, Y+41	; 0x29
    26be:	9a a5       	ldd	r25, Y+42	; 0x2a
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e2       	ldi	r20, 0x20	; 32
    26c6:	51 e4       	ldi	r21, 0x41	; 65
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	9a a3       	std	Y+34, r25	; 0x22
    26de:	89 a3       	std	Y+33, r24	; 0x21
    26e0:	0f c0       	rjmp	.+30     	; 0x2700 <LCD_sendCommand+0x1ca>
    26e2:	88 ec       	ldi	r24, 0xC8	; 200
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	98 a3       	std	Y+32, r25	; 0x20
    26e8:	8f 8f       	std	Y+31, r24	; 0x1f
    26ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26ec:	98 a1       	ldd	r25, Y+32	; 0x20
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <LCD_sendCommand+0x1b8>
    26f2:	98 a3       	std	Y+32, r25	; 0x20
    26f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f6:	89 a1       	ldd	r24, Y+33	; 0x21
    26f8:	9a a1       	ldd	r25, Y+34	; 0x22
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	9a a3       	std	Y+34, r25	; 0x22
    26fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2700:	89 a1       	ldd	r24, Y+33	; 0x21
    2702:	9a a1       	ldd	r25, Y+34	; 0x22
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	69 f7       	brne	.-38     	; 0x26e2 <LCD_sendCommand+0x1ac>
    2708:	14 c0       	rjmp	.+40     	; 0x2732 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270a:	6b a1       	ldd	r22, Y+35	; 0x23
    270c:	7c a1       	ldd	r23, Y+36	; 0x24
    270e:	8d a1       	ldd	r24, Y+37	; 0x25
    2710:	9e a1       	ldd	r25, Y+38	; 0x26
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9a a3       	std	Y+34, r25	; 0x22
    271c:	89 a3       	std	Y+33, r24	; 0x21
    271e:	89 a1       	ldd	r24, Y+33	; 0x21
    2720:	9a a1       	ldd	r25, Y+34	; 0x22
    2722:	9e 8f       	std	Y+30, r25	; 0x1e
    2724:	8d 8f       	std	Y+29, r24	; 0x1d
    2726:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2728:	9e 8d       	ldd	r25, Y+30	; 0x1e
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <LCD_sendCommand+0x1f4>
    272e:	9e 8f       	std	Y+30, r25	; 0x1e
    2730:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2732:	82 e0       	ldi	r24, 0x02	; 2
    2734:	69 ad       	ldd	r22, Y+57	; 0x39
    2736:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <GPIO_writePort>
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	a0 e8       	ldi	r26, 0x80	; 128
    2740:	bf e3       	ldi	r27, 0x3F	; 63
    2742:	89 8f       	std	Y+25, r24	; 0x19
    2744:	9a 8f       	std	Y+26, r25	; 0x1a
    2746:	ab 8f       	std	Y+27, r26	; 0x1b
    2748:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274a:	69 8d       	ldd	r22, Y+25	; 0x19
    274c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    274e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2750:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	4a ef       	ldi	r20, 0xFA	; 250
    2758:	54 e4       	ldi	r21, 0x44	; 68
    275a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	8d 8b       	std	Y+21, r24	; 0x15
    2764:	9e 8b       	std	Y+22, r25	; 0x16
    2766:	af 8b       	std	Y+23, r26	; 0x17
    2768:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    276a:	6d 89       	ldd	r22, Y+21	; 0x15
    276c:	7e 89       	ldd	r23, Y+22	; 0x16
    276e:	8f 89       	ldd	r24, Y+23	; 0x17
    2770:	98 8d       	ldd	r25, Y+24	; 0x18
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e8       	ldi	r20, 0x80	; 128
    2778:	5f e3       	ldi	r21, 0x3F	; 63
    277a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    277e:	88 23       	and	r24, r24
    2780:	2c f4       	brge	.+10     	; 0x278c <LCD_sendCommand+0x256>
		__ticks = 1;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9c 8b       	std	Y+20, r25	; 0x14
    2788:	8b 8b       	std	Y+19, r24	; 0x13
    278a:	3f c0       	rjmp	.+126    	; 0x280a <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    278c:	6d 89       	ldd	r22, Y+21	; 0x15
    278e:	7e 89       	ldd	r23, Y+22	; 0x16
    2790:	8f 89       	ldd	r24, Y+23	; 0x17
    2792:	98 8d       	ldd	r25, Y+24	; 0x18
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	3f ef       	ldi	r19, 0xFF	; 255
    2798:	4f e7       	ldi	r20, 0x7F	; 127
    279a:	57 e4       	ldi	r21, 0x47	; 71
    279c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a0:	18 16       	cp	r1, r24
    27a2:	4c f5       	brge	.+82     	; 0x27f6 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a4:	69 8d       	ldd	r22, Y+25	; 0x19
    27a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e2       	ldi	r20, 0x20	; 32
    27b2:	51 e4       	ldi	r21, 0x41	; 65
    27b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	bc 01       	movw	r22, r24
    27be:	cd 01       	movw	r24, r26
    27c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	9c 8b       	std	Y+20, r25	; 0x14
    27ca:	8b 8b       	std	Y+19, r24	; 0x13
    27cc:	0f c0       	rjmp	.+30     	; 0x27ec <LCD_sendCommand+0x2b6>
    27ce:	88 ec       	ldi	r24, 0xC8	; 200
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	9a 8b       	std	Y+18, r25	; 0x12
    27d4:	89 8b       	std	Y+17, r24	; 0x11
    27d6:	89 89       	ldd	r24, Y+17	; 0x11
    27d8:	9a 89       	ldd	r25, Y+18	; 0x12
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <LCD_sendCommand+0x2a4>
    27de:	9a 8b       	std	Y+18, r25	; 0x12
    27e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e2:	8b 89       	ldd	r24, Y+19	; 0x13
    27e4:	9c 89       	ldd	r25, Y+20	; 0x14
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	9c 8b       	std	Y+20, r25	; 0x14
    27ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ec:	8b 89       	ldd	r24, Y+19	; 0x13
    27ee:	9c 89       	ldd	r25, Y+20	; 0x14
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	69 f7       	brne	.-38     	; 0x27ce <LCD_sendCommand+0x298>
    27f4:	14 c0       	rjmp	.+40     	; 0x281e <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f6:	6d 89       	ldd	r22, Y+21	; 0x15
    27f8:	7e 89       	ldd	r23, Y+22	; 0x16
    27fa:	8f 89       	ldd	r24, Y+23	; 0x17
    27fc:	98 8d       	ldd	r25, Y+24	; 0x18
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	9c 8b       	std	Y+20, r25	; 0x14
    2808:	8b 8b       	std	Y+19, r24	; 0x13
    280a:	8b 89       	ldd	r24, Y+19	; 0x13
    280c:	9c 89       	ldd	r25, Y+20	; 0x14
    280e:	98 8b       	std	Y+16, r25	; 0x10
    2810:	8f 87       	std	Y+15, r24	; 0x0f
    2812:	8f 85       	ldd	r24, Y+15	; 0x0f
    2814:	98 89       	ldd	r25, Y+16	; 0x10
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <LCD_sendCommand+0x2e0>
    281a:	98 8b       	std	Y+16, r25	; 0x10
    281c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    281e:	83 e0       	ldi	r24, 0x03	; 3
    2820:	64 e0       	ldi	r22, 0x04	; 4
    2822:	40 e0       	ldi	r20, 0x00	; 0
    2824:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a0 e8       	ldi	r26, 0x80	; 128
    282e:	bf e3       	ldi	r27, 0x3F	; 63
    2830:	8b 87       	std	Y+11, r24	; 0x0b
    2832:	9c 87       	std	Y+12, r25	; 0x0c
    2834:	ad 87       	std	Y+13, r26	; 0x0d
    2836:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2838:	6b 85       	ldd	r22, Y+11	; 0x0b
    283a:	7c 85       	ldd	r23, Y+12	; 0x0c
    283c:	8d 85       	ldd	r24, Y+13	; 0x0d
    283e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	4a ef       	ldi	r20, 0xFA	; 250
    2846:	54 e4       	ldi	r21, 0x44	; 68
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	8f 83       	std	Y+7, r24	; 0x07
    2852:	98 87       	std	Y+8, r25	; 0x08
    2854:	a9 87       	std	Y+9, r26	; 0x09
    2856:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2858:	6f 81       	ldd	r22, Y+7	; 0x07
    285a:	78 85       	ldd	r23, Y+8	; 0x08
    285c:	89 85       	ldd	r24, Y+9	; 0x09
    285e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    286c:	88 23       	and	r24, r24
    286e:	2c f4       	brge	.+10     	; 0x287a <LCD_sendCommand+0x344>
		__ticks = 1;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9e 83       	std	Y+6, r25	; 0x06
    2876:	8d 83       	std	Y+5, r24	; 0x05
    2878:	3f c0       	rjmp	.+126    	; 0x28f8 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    287a:	6f 81       	ldd	r22, Y+7	; 0x07
    287c:	78 85       	ldd	r23, Y+8	; 0x08
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	3f ef       	ldi	r19, 0xFF	; 255
    2886:	4f e7       	ldi	r20, 0x7F	; 127
    2888:	57 e4       	ldi	r21, 0x47	; 71
    288a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    288e:	18 16       	cp	r1, r24
    2890:	4c f5       	brge	.+82     	; 0x28e4 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2892:	6b 85       	ldd	r22, Y+11	; 0x0b
    2894:	7c 85       	ldd	r23, Y+12	; 0x0c
    2896:	8d 85       	ldd	r24, Y+13	; 0x0d
    2898:	9e 85       	ldd	r25, Y+14	; 0x0e
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e2       	ldi	r20, 0x20	; 32
    28a0:	51 e4       	ldi	r21, 0x41	; 65
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	9e 83       	std	Y+6, r25	; 0x06
    28b8:	8d 83       	std	Y+5, r24	; 0x05
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <LCD_sendCommand+0x3a4>
    28bc:	88 ec       	ldi	r24, 0xC8	; 200
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	9c 83       	std	Y+4, r25	; 0x04
    28c2:	8b 83       	std	Y+3, r24	; 0x03
    28c4:	8b 81       	ldd	r24, Y+3	; 0x03
    28c6:	9c 81       	ldd	r25, Y+4	; 0x04
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <LCD_sendCommand+0x392>
    28cc:	9c 83       	std	Y+4, r25	; 0x04
    28ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	9e 81       	ldd	r25, Y+6	; 0x06
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	9e 83       	std	Y+6, r25	; 0x06
    28d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28da:	8d 81       	ldd	r24, Y+5	; 0x05
    28dc:	9e 81       	ldd	r25, Y+6	; 0x06
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	69 f7       	brne	.-38     	; 0x28bc <LCD_sendCommand+0x386>
    28e2:	14 c0       	rjmp	.+40     	; 0x290c <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e4:	6f 81       	ldd	r22, Y+7	; 0x07
    28e6:	78 85       	ldd	r23, Y+8	; 0x08
    28e8:	89 85       	ldd	r24, Y+9	; 0x09
    28ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9e 83       	std	Y+6, r25	; 0x06
    28f6:	8d 83       	std	Y+5, r24	; 0x05
    28f8:	8d 81       	ldd	r24, Y+5	; 0x05
    28fa:	9e 81       	ldd	r25, Y+6	; 0x06
    28fc:	9a 83       	std	Y+2, r25	; 0x02
    28fe:	89 83       	std	Y+1, r24	; 0x01
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <LCD_sendCommand+0x3ce>
    2908:	9a 83       	std	Y+2, r25	; 0x02
    290a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    290c:	e9 96       	adiw	r28, 0x39	; 57
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
    2926:	e9 97       	sbiw	r28, 0x39	; 57
    2928:	0f b6       	in	r0, 0x3f	; 63
    292a:	f8 94       	cli
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	cd bf       	out	0x3d, r28	; 61
    2932:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2934:	83 e0       	ldi	r24, 0x03	; 3
    2936:	66 e0       	ldi	r22, 0x06	; 6
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    293e:	83 e0       	ldi	r24, 0x03	; 3
    2940:	65 e0       	ldi	r22, 0x05	; 5
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	a0 e8       	ldi	r26, 0x80	; 128
    294e:	bf e3       	ldi	r27, 0x3F	; 63
    2950:	8d ab       	std	Y+53, r24	; 0x35
    2952:	9e ab       	std	Y+54, r25	; 0x36
    2954:	af ab       	std	Y+55, r26	; 0x37
    2956:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2958:	6d a9       	ldd	r22, Y+53	; 0x35
    295a:	7e a9       	ldd	r23, Y+54	; 0x36
    295c:	8f a9       	ldd	r24, Y+55	; 0x37
    295e:	98 ad       	ldd	r25, Y+56	; 0x38
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	4a ef       	ldi	r20, 0xFA	; 250
    2966:	54 e4       	ldi	r21, 0x44	; 68
    2968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	89 ab       	std	Y+49, r24	; 0x31
    2972:	9a ab       	std	Y+50, r25	; 0x32
    2974:	ab ab       	std	Y+51, r26	; 0x33
    2976:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2978:	69 a9       	ldd	r22, Y+49	; 0x31
    297a:	7a a9       	ldd	r23, Y+50	; 0x32
    297c:	8b a9       	ldd	r24, Y+51	; 0x33
    297e:	9c a9       	ldd	r25, Y+52	; 0x34
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e8       	ldi	r20, 0x80	; 128
    2986:	5f e3       	ldi	r21, 0x3F	; 63
    2988:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    298c:	88 23       	and	r24, r24
    298e:	2c f4       	brge	.+10     	; 0x299a <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	98 ab       	std	Y+48, r25	; 0x30
    2996:	8f a7       	std	Y+47, r24	; 0x2f
    2998:	3f c0       	rjmp	.+126    	; 0x2a18 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    299a:	69 a9       	ldd	r22, Y+49	; 0x31
    299c:	7a a9       	ldd	r23, Y+50	; 0x32
    299e:	8b a9       	ldd	r24, Y+51	; 0x33
    29a0:	9c a9       	ldd	r25, Y+52	; 0x34
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	3f ef       	ldi	r19, 0xFF	; 255
    29a6:	4f e7       	ldi	r20, 0x7F	; 127
    29a8:	57 e4       	ldi	r21, 0x47	; 71
    29aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ae:	18 16       	cp	r1, r24
    29b0:	4c f5       	brge	.+82     	; 0x2a04 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b2:	6d a9       	ldd	r22, Y+53	; 0x35
    29b4:	7e a9       	ldd	r23, Y+54	; 0x36
    29b6:	8f a9       	ldd	r24, Y+55	; 0x37
    29b8:	98 ad       	ldd	r25, Y+56	; 0x38
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e2       	ldi	r20, 0x20	; 32
    29c0:	51 e4       	ldi	r21, 0x41	; 65
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	bc 01       	movw	r22, r24
    29cc:	cd 01       	movw	r24, r26
    29ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	98 ab       	std	Y+48, r25	; 0x30
    29d8:	8f a7       	std	Y+47, r24	; 0x2f
    29da:	0f c0       	rjmp	.+30     	; 0x29fa <LCD_displayCharacter+0xdc>
    29dc:	88 ec       	ldi	r24, 0xC8	; 200
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9e a7       	std	Y+46, r25	; 0x2e
    29e2:	8d a7       	std	Y+45, r24	; 0x2d
    29e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    29e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <LCD_displayCharacter+0xca>
    29ec:	9e a7       	std	Y+46, r25	; 0x2e
    29ee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29f2:	98 a9       	ldd	r25, Y+48	; 0x30
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	98 ab       	std	Y+48, r25	; 0x30
    29f8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    29fc:	98 a9       	ldd	r25, Y+48	; 0x30
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	69 f7       	brne	.-38     	; 0x29dc <LCD_displayCharacter+0xbe>
    2a02:	14 c0       	rjmp	.+40     	; 0x2a2c <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a04:	69 a9       	ldd	r22, Y+49	; 0x31
    2a06:	7a a9       	ldd	r23, Y+50	; 0x32
    2a08:	8b a9       	ldd	r24, Y+51	; 0x33
    2a0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	98 ab       	std	Y+48, r25	; 0x30
    2a16:	8f a7       	std	Y+47, r24	; 0x2f
    2a18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a1c:	9c a7       	std	Y+44, r25	; 0x2c
    2a1e:	8b a7       	std	Y+43, r24	; 0x2b
    2a20:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a22:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <LCD_displayCharacter+0x106>
    2a28:	9c a7       	std	Y+44, r25	; 0x2c
    2a2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2a2c:	83 e0       	ldi	r24, 0x03	; 3
    2a2e:	64 e0       	ldi	r22, 0x04	; 4
    2a30:	41 e0       	ldi	r20, 0x01	; 1
    2a32:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	a0 e8       	ldi	r26, 0x80	; 128
    2a3c:	bf e3       	ldi	r27, 0x3F	; 63
    2a3e:	8f a3       	std	Y+39, r24	; 0x27
    2a40:	98 a7       	std	Y+40, r25	; 0x28
    2a42:	a9 a7       	std	Y+41, r26	; 0x29
    2a44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a46:	6f a1       	ldd	r22, Y+39	; 0x27
    2a48:	78 a5       	ldd	r23, Y+40	; 0x28
    2a4a:	89 a5       	ldd	r24, Y+41	; 0x29
    2a4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	4a ef       	ldi	r20, 0xFA	; 250
    2a54:	54 e4       	ldi	r21, 0x44	; 68
    2a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	8b a3       	std	Y+35, r24	; 0x23
    2a60:	9c a3       	std	Y+36, r25	; 0x24
    2a62:	ad a3       	std	Y+37, r26	; 0x25
    2a64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a66:	6b a1       	ldd	r22, Y+35	; 0x23
    2a68:	7c a1       	ldd	r23, Y+36	; 0x24
    2a6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e8       	ldi	r20, 0x80	; 128
    2a74:	5f e3       	ldi	r21, 0x3F	; 63
    2a76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a7a:	88 23       	and	r24, r24
    2a7c:	2c f4       	brge	.+10     	; 0x2a88 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	9a a3       	std	Y+34, r25	; 0x22
    2a84:	89 a3       	std	Y+33, r24	; 0x21
    2a86:	3f c0       	rjmp	.+126    	; 0x2b06 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2a88:	6b a1       	ldd	r22, Y+35	; 0x23
    2a8a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a8c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a8e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	3f ef       	ldi	r19, 0xFF	; 255
    2a94:	4f e7       	ldi	r20, 0x7F	; 127
    2a96:	57 e4       	ldi	r21, 0x47	; 71
    2a98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a9c:	18 16       	cp	r1, r24
    2a9e:	4c f5       	brge	.+82     	; 0x2af2 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa0:	6f a1       	ldd	r22, Y+39	; 0x27
    2aa2:	78 a5       	ldd	r23, Y+40	; 0x28
    2aa4:	89 a5       	ldd	r24, Y+41	; 0x29
    2aa6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e2       	ldi	r20, 0x20	; 32
    2aae:	51 e4       	ldi	r21, 0x41	; 65
    2ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	bc 01       	movw	r22, r24
    2aba:	cd 01       	movw	r24, r26
    2abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	9a a3       	std	Y+34, r25	; 0x22
    2ac6:	89 a3       	std	Y+33, r24	; 0x21
    2ac8:	0f c0       	rjmp	.+30     	; 0x2ae8 <LCD_displayCharacter+0x1ca>
    2aca:	88 ec       	ldi	r24, 0xC8	; 200
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	98 a3       	std	Y+32, r25	; 0x20
    2ad0:	8f 8f       	std	Y+31, r24	; 0x1f
    2ad2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ad4:	98 a1       	ldd	r25, Y+32	; 0x20
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <LCD_displayCharacter+0x1b8>
    2ada:	98 a3       	std	Y+32, r25	; 0x20
    2adc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ade:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	9a a3       	std	Y+34, r25	; 0x22
    2ae6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae8:	89 a1       	ldd	r24, Y+33	; 0x21
    2aea:	9a a1       	ldd	r25, Y+34	; 0x22
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	69 f7       	brne	.-38     	; 0x2aca <LCD_displayCharacter+0x1ac>
    2af0:	14 c0       	rjmp	.+40     	; 0x2b1a <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af2:	6b a1       	ldd	r22, Y+35	; 0x23
    2af4:	7c a1       	ldd	r23, Y+36	; 0x24
    2af6:	8d a1       	ldd	r24, Y+37	; 0x25
    2af8:	9e a1       	ldd	r25, Y+38	; 0x26
    2afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9a a3       	std	Y+34, r25	; 0x22
    2b04:	89 a3       	std	Y+33, r24	; 0x21
    2b06:	89 a1       	ldd	r24, Y+33	; 0x21
    2b08:	9a a1       	ldd	r25, Y+34	; 0x22
    2b0a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b0c:	8d 8f       	std	Y+29, r24	; 0x1d
    2b0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <LCD_displayCharacter+0x1f4>
    2b16:	9e 8f       	std	Y+30, r25	; 0x1e
    2b18:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2b1a:	82 e0       	ldi	r24, 0x02	; 2
    2b1c:	69 ad       	ldd	r22, Y+57	; 0x39
    2b1e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <GPIO_writePort>
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	a0 e8       	ldi	r26, 0x80	; 128
    2b28:	bf e3       	ldi	r27, 0x3F	; 63
    2b2a:	89 8f       	std	Y+25, r24	; 0x19
    2b2c:	9a 8f       	std	Y+26, r25	; 0x1a
    2b2e:	ab 8f       	std	Y+27, r26	; 0x1b
    2b30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b32:	69 8d       	ldd	r22, Y+25	; 0x19
    2b34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	4a ef       	ldi	r20, 0xFA	; 250
    2b40:	54 e4       	ldi	r21, 0x44	; 68
    2b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	8d 8b       	std	Y+21, r24	; 0x15
    2b4c:	9e 8b       	std	Y+22, r25	; 0x16
    2b4e:	af 8b       	std	Y+23, r26	; 0x17
    2b50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b52:	6d 89       	ldd	r22, Y+21	; 0x15
    2b54:	7e 89       	ldd	r23, Y+22	; 0x16
    2b56:	8f 89       	ldd	r24, Y+23	; 0x17
    2b58:	98 8d       	ldd	r25, Y+24	; 0x18
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e8       	ldi	r20, 0x80	; 128
    2b60:	5f e3       	ldi	r21, 0x3F	; 63
    2b62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b66:	88 23       	and	r24, r24
    2b68:	2c f4       	brge	.+10     	; 0x2b74 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	9c 8b       	std	Y+20, r25	; 0x14
    2b70:	8b 8b       	std	Y+19, r24	; 0x13
    2b72:	3f c0       	rjmp	.+126    	; 0x2bf2 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2b74:	6d 89       	ldd	r22, Y+21	; 0x15
    2b76:	7e 89       	ldd	r23, Y+22	; 0x16
    2b78:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	3f ef       	ldi	r19, 0xFF	; 255
    2b80:	4f e7       	ldi	r20, 0x7F	; 127
    2b82:	57 e4       	ldi	r21, 0x47	; 71
    2b84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b88:	18 16       	cp	r1, r24
    2b8a:	4c f5       	brge	.+82     	; 0x2bde <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e2       	ldi	r20, 0x20	; 32
    2b9a:	51 e4       	ldi	r21, 0x41	; 65
    2b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	bc 01       	movw	r22, r24
    2ba6:	cd 01       	movw	r24, r26
    2ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	9c 8b       	std	Y+20, r25	; 0x14
    2bb2:	8b 8b       	std	Y+19, r24	; 0x13
    2bb4:	0f c0       	rjmp	.+30     	; 0x2bd4 <LCD_displayCharacter+0x2b6>
    2bb6:	88 ec       	ldi	r24, 0xC8	; 200
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	9a 8b       	std	Y+18, r25	; 0x12
    2bbc:	89 8b       	std	Y+17, r24	; 0x11
    2bbe:	89 89       	ldd	r24, Y+17	; 0x11
    2bc0:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <LCD_displayCharacter+0x2a4>
    2bc6:	9a 8b       	std	Y+18, r25	; 0x12
    2bc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bca:	8b 89       	ldd	r24, Y+19	; 0x13
    2bcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	9c 8b       	std	Y+20, r25	; 0x14
    2bd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	69 f7       	brne	.-38     	; 0x2bb6 <LCD_displayCharacter+0x298>
    2bdc:	14 c0       	rjmp	.+40     	; 0x2c06 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bde:	6d 89       	ldd	r22, Y+21	; 0x15
    2be0:	7e 89       	ldd	r23, Y+22	; 0x16
    2be2:	8f 89       	ldd	r24, Y+23	; 0x17
    2be4:	98 8d       	ldd	r25, Y+24	; 0x18
    2be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	9c 8b       	std	Y+20, r25	; 0x14
    2bf0:	8b 8b       	std	Y+19, r24	; 0x13
    2bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf6:	98 8b       	std	Y+16, r25	; 0x10
    2bf8:	8f 87       	std	Y+15, r24	; 0x0f
    2bfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bfc:	98 89       	ldd	r25, Y+16	; 0x10
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	f1 f7       	brne	.-4      	; 0x2bfe <LCD_displayCharacter+0x2e0>
    2c02:	98 8b       	std	Y+16, r25	; 0x10
    2c04:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c06:	83 e0       	ldi	r24, 0x03	; 3
    2c08:	64 e0       	ldi	r22, 0x04	; 4
    2c0a:	40 e0       	ldi	r20, 0x00	; 0
    2c0c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <GPIO_writePin>
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	a0 e8       	ldi	r26, 0x80	; 128
    2c16:	bf e3       	ldi	r27, 0x3F	; 63
    2c18:	8b 87       	std	Y+11, r24	; 0x0b
    2c1a:	9c 87       	std	Y+12, r25	; 0x0c
    2c1c:	ad 87       	std	Y+13, r26	; 0x0d
    2c1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	4a ef       	ldi	r20, 0xFA	; 250
    2c2e:	54 e4       	ldi	r21, 0x44	; 68
    2c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	8f 83       	std	Y+7, r24	; 0x07
    2c3a:	98 87       	std	Y+8, r25	; 0x08
    2c3c:	a9 87       	std	Y+9, r26	; 0x09
    2c3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c40:	6f 81       	ldd	r22, Y+7	; 0x07
    2c42:	78 85       	ldd	r23, Y+8	; 0x08
    2c44:	89 85       	ldd	r24, Y+9	; 0x09
    2c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e8       	ldi	r20, 0x80	; 128
    2c4e:	5f e3       	ldi	r21, 0x3F	; 63
    2c50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c54:	88 23       	and	r24, r24
    2c56:	2c f4       	brge	.+10     	; 0x2c62 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	9e 83       	std	Y+6, r25	; 0x06
    2c5e:	8d 83       	std	Y+5, r24	; 0x05
    2c60:	3f c0       	rjmp	.+126    	; 0x2ce0 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2c62:	6f 81       	ldd	r22, Y+7	; 0x07
    2c64:	78 85       	ldd	r23, Y+8	; 0x08
    2c66:	89 85       	ldd	r24, Y+9	; 0x09
    2c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	3f ef       	ldi	r19, 0xFF	; 255
    2c6e:	4f e7       	ldi	r20, 0x7F	; 127
    2c70:	57 e4       	ldi	r21, 0x47	; 71
    2c72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c76:	18 16       	cp	r1, r24
    2c78:	4c f5       	brge	.+82     	; 0x2ccc <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e2       	ldi	r20, 0x20	; 32
    2c88:	51 e4       	ldi	r21, 0x41	; 65
    2c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	bc 01       	movw	r22, r24
    2c94:	cd 01       	movw	r24, r26
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9e 83       	std	Y+6, r25	; 0x06
    2ca0:	8d 83       	std	Y+5, r24	; 0x05
    2ca2:	0f c0       	rjmp	.+30     	; 0x2cc2 <LCD_displayCharacter+0x3a4>
    2ca4:	88 ec       	ldi	r24, 0xC8	; 200
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	9c 83       	std	Y+4, r25	; 0x04
    2caa:	8b 83       	std	Y+3, r24	; 0x03
    2cac:	8b 81       	ldd	r24, Y+3	; 0x03
    2cae:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <LCD_displayCharacter+0x392>
    2cb4:	9c 83       	std	Y+4, r25	; 0x04
    2cb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cba:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	9e 83       	std	Y+6, r25	; 0x06
    2cc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	69 f7       	brne	.-38     	; 0x2ca4 <LCD_displayCharacter+0x386>
    2cca:	14 c0       	rjmp	.+40     	; 0x2cf4 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cce:	78 85       	ldd	r23, Y+8	; 0x08
    2cd0:	89 85       	ldd	r24, Y+9	; 0x09
    2cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	9e 83       	std	Y+6, r25	; 0x06
    2cde:	8d 83       	std	Y+5, r24	; 0x05
    2ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce4:	9a 83       	std	Y+2, r25	; 0x02
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <LCD_displayCharacter+0x3ce>
    2cf0:	9a 83       	std	Y+2, r25	; 0x02
    2cf2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2cf4:	e9 96       	adiw	r28, 0x39	; 57
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	08 95       	ret

00002d06 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	00 d0       	rcall	.+0      	; 0x2d0c <LCD_displayString+0x6>
    2d0c:	0f 92       	push	r0
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	9b 83       	std	Y+3, r25	; 0x03
    2d14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d16:	19 82       	std	Y+1, r1	; 0x01
    2d18:	0e c0       	rjmp	.+28     	; 0x2d36 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	9b 81       	ldd	r25, Y+3	; 0x03
    2d24:	fc 01       	movw	r30, r24
    2d26:	e2 0f       	add	r30, r18
    2d28:	f3 1f       	adc	r31, r19
    2d2a:	80 81       	ld	r24, Z
    2d2c:	0e 94 8f 14 	call	0x291e	; 0x291e <LCD_displayCharacter>
		i++;
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	8f 5f       	subi	r24, 0xFF	; 255
    2d34:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	28 2f       	mov	r18, r24
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d40:	fc 01       	movw	r30, r24
    2d42:	e2 0f       	add	r30, r18
    2d44:	f3 1f       	adc	r31, r19
    2d46:	80 81       	ld	r24, Z
    2d48:	88 23       	and	r24, r24
    2d4a:	39 f7       	brne	.-50     	; 0x2d1a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	08 95       	ret

00002d58 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	00 d0       	rcall	.+0      	; 0x2d5e <LCD_moveCursor+0x6>
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <LCD_moveCursor+0x8>
    2d60:	0f 92       	push	r0
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	8a 83       	std	Y+2, r24	; 0x02
    2d68:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	3d 83       	std	Y+5, r19	; 0x05
    2d72:	2c 83       	std	Y+4, r18	; 0x04
    2d74:	8c 81       	ldd	r24, Y+4	; 0x04
    2d76:	9d 81       	ldd	r25, Y+5	; 0x05
    2d78:	81 30       	cpi	r24, 0x01	; 1
    2d7a:	91 05       	cpc	r25, r1
    2d7c:	c1 f0       	breq	.+48     	; 0x2dae <LCD_moveCursor+0x56>
    2d7e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d80:	3d 81       	ldd	r19, Y+5	; 0x05
    2d82:	22 30       	cpi	r18, 0x02	; 2
    2d84:	31 05       	cpc	r19, r1
    2d86:	2c f4       	brge	.+10     	; 0x2d92 <LCD_moveCursor+0x3a>
    2d88:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	61 f0       	breq	.+24     	; 0x2da8 <LCD_moveCursor+0x50>
    2d90:	19 c0       	rjmp	.+50     	; 0x2dc4 <LCD_moveCursor+0x6c>
    2d92:	2c 81       	ldd	r18, Y+4	; 0x04
    2d94:	3d 81       	ldd	r19, Y+5	; 0x05
    2d96:	22 30       	cpi	r18, 0x02	; 2
    2d98:	31 05       	cpc	r19, r1
    2d9a:	69 f0       	breq	.+26     	; 0x2db6 <LCD_moveCursor+0x5e>
    2d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2da0:	83 30       	cpi	r24, 0x03	; 3
    2da2:	91 05       	cpc	r25, r1
    2da4:	61 f0       	breq	.+24     	; 0x2dbe <LCD_moveCursor+0x66>
    2da6:	0e c0       	rjmp	.+28     	; 0x2dc4 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	0b c0       	rjmp	.+22     	; 0x2dc4 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	80 5c       	subi	r24, 0xC0	; 192
    2db2:	89 83       	std	Y+1, r24	; 0x01
    2db4:	07 c0       	rjmp	.+14     	; 0x2dc4 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2db6:	8b 81       	ldd	r24, Y+3	; 0x03
    2db8:	80 5f       	subi	r24, 0xF0	; 240
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	03 c0       	rjmp	.+6      	; 0x2dc4 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	80 5b       	subi	r24, 0xB0	; 176
    2dc2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	80 68       	ori	r24, 0x80	; 128
    2dc8:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_sendCommand>
}
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	00 d0       	rcall	.+0      	; 0x2de2 <LCD_displayStringRowColumn+0x6>
    2de2:	00 d0       	rcall	.+0      	; 0x2de4 <LCD_displayStringRowColumn+0x8>
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	89 83       	std	Y+1, r24	; 0x01
    2dea:	6a 83       	std	Y+2, r22	; 0x02
    2dec:	5c 83       	std	Y+4, r21	; 0x04
    2dee:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	6a 81       	ldd	r22, Y+2	; 0x02
    2df4:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2df8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfc:	0e 94 83 16 	call	0x2d06	; 0x2d06 <LCD_displayString>
}
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	0f 90       	pop	r0
    2e06:	0f 90       	pop	r0
    2e08:	cf 91       	pop	r28
    2e0a:	df 91       	pop	r29
    2e0c:	08 95       	ret

00002e0e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2e0e:	df 93       	push	r29
    2e10:	cf 93       	push	r28
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
    2e16:	62 97       	sbiw	r28, 0x12	; 18
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	de bf       	out	0x3e, r29	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	9a 8b       	std	Y+18, r25	; 0x12
    2e24:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e26:	89 89       	ldd	r24, Y+17	; 0x11
    2e28:	9a 89       	ldd	r25, Y+18	; 0x12
    2e2a:	9e 01       	movw	r18, r28
    2e2c:	2f 5f       	subi	r18, 0xFF	; 255
    2e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e30:	b9 01       	movw	r22, r18
    2e32:	4a e0       	ldi	r20, 0x0A	; 10
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	0e 94 91 18 	call	0x3122	; 0x3122 <itoa>
   LCD_displayString(buff); /* Display the string */
    2e3a:	ce 01       	movw	r24, r28
    2e3c:	01 96       	adiw	r24, 0x01	; 1
    2e3e:	0e 94 83 16 	call	0x2d06	; 0x2d06 <LCD_displayString>
}
    2e42:	62 96       	adiw	r28, 0x12	; 18
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	f8 94       	cli
    2e48:	de bf       	out	0x3e, r29	; 62
    2e4a:	0f be       	out	0x3f, r0	; 63
    2e4c:	cd bf       	out	0x3d, r28	; 61
    2e4e:	cf 91       	pop	r28
    2e50:	df 91       	pop	r29
    2e52:	08 95       	ret

00002e54 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2e54:	df 93       	push	r29
    2e56:	cf 93       	push	r28
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_sendCommand>
}
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	08 95       	ret

00002e68 <UART_config>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_config(BaudRate_uart BR,Bitdata_uart BD,Parity_uart P,StopBit_uart SB)
{
    2e68:	df 93       	push	r29
    2e6a:	cf 93       	push	r28
    2e6c:	00 d0       	rcall	.+0      	; 0x2e6e <UART_config+0x6>
    2e6e:	00 d0       	rcall	.+0      	; 0x2e70 <UART_config+0x8>
    2e70:	0f 92       	push	r0
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
    2e76:	9a 83       	std	Y+2, r25	; 0x02
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	6b 83       	std	Y+3, r22	; 0x03
    2e7c:	4c 83       	std	Y+4, r20	; 0x04
    2e7e:	2d 83       	std	Y+5, r18	; 0x05

}
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	cf 91       	pop	r28
    2e8c:	df 91       	pop	r29
    2e8e:	08 95       	ret

00002e90 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const config_uart *config)
{
    2e90:	df 93       	push	r29
    2e92:	cf 93       	push	r28
    2e94:	00 d0       	rcall	.+0      	; 0x2e96 <UART_init+0x6>
    2e96:	00 d0       	rcall	.+0      	; 0x2e98 <UART_init+0x8>
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	9c 83       	std	Y+4, r25	; 0x04
    2e9e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2ea0:	1a 82       	std	Y+2, r1	; 0x02
    2ea2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2ea4:	eb e2       	ldi	r30, 0x2B	; 43
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	82 e0       	ldi	r24, 0x02	; 2
    2eaa:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2eac:	ea e2       	ldi	r30, 0x2A	; 42
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	88 e1       	ldi	r24, 0x18	; 24
    2eb2:	80 83       	st	Z, r24
//(1<<UCSZ0) | (1<<UCSZ1);(config->databit)
	//(EigthBits & 0x02)
	 //(EigthBits<<UCSRC) ;
	//(((EigthBits & 0x01))<<UCSZ0) | (((EigthBits & 0x02)>>1)<<UCSZ1)
	//| (((even_parity & 0x02)>>1)<<UPM1) |(((even_parity & 0x01))<<UPM0)
	UCSRC = (1<<URSEL) |(config->databit) |(config->parity)|((config->stopbit)<<USBS);
    2eb4:	a0 e4       	ldi	r26, 0x40	; 64
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	eb 81       	ldd	r30, Y+3	; 0x03
    2eba:	fc 81       	ldd	r31, Y+4	; 0x04
    2ebc:	92 81       	ldd	r25, Z+2	; 0x02
    2ebe:	eb 81       	ldd	r30, Y+3	; 0x03
    2ec0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ec2:	83 81       	ldd	r24, Z+3	; 0x03
    2ec4:	89 2b       	or	r24, r25
    2ec6:	80 68       	ori	r24, 0x80	; 128
    2ec8:	28 2f       	mov	r18, r24
    2eca:	eb 81       	ldd	r30, Y+3	; 0x03
    2ecc:	fc 81       	ldd	r31, Y+4	; 0x04
    2ece:	84 81       	ldd	r24, Z+4	; 0x04
    2ed0:	88 2f       	mov	r24, r24
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	88 0f       	add	r24, r24
    2ed6:	99 1f       	adc	r25, r25
    2ed8:	88 0f       	add	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	88 0f       	add	r24, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	82 2b       	or	r24, r18
    2ee2:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config->baud * 8UL))) - 1);
    2ee4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ee6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ee8:	80 81       	ld	r24, Z
    2eea:	91 81       	ldd	r25, Z+1	; 0x01
    2eec:	cc 01       	movw	r24, r24
    2eee:	a0 e0       	ldi	r26, 0x00	; 0
    2ef0:	b0 e0       	ldi	r27, 0x00	; 0
    2ef2:	88 0f       	add	r24, r24
    2ef4:	99 1f       	adc	r25, r25
    2ef6:	aa 1f       	adc	r26, r26
    2ef8:	bb 1f       	adc	r27, r27
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	aa 1f       	adc	r26, r26
    2f00:	bb 1f       	adc	r27, r27
    2f02:	88 0f       	add	r24, r24
    2f04:	99 1f       	adc	r25, r25
    2f06:	aa 1f       	adc	r26, r26
    2f08:	bb 1f       	adc	r27, r27
    2f0a:	9c 01       	movw	r18, r24
    2f0c:	ad 01       	movw	r20, r26
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	92 e1       	ldi	r25, 0x12	; 18
    2f12:	aa e7       	ldi	r26, 0x7A	; 122
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
    2f16:	bc 01       	movw	r22, r24
    2f18:	cd 01       	movw	r24, r26
    2f1a:	0e 94 38 18 	call	0x3070	; 0x3070 <__udivmodsi4>
    2f1e:	da 01       	movw	r26, r20
    2f20:	c9 01       	movw	r24, r18
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	9a 83       	std	Y+2, r25	; 0x02
    2f26:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2f28:	e0 e4       	ldi	r30, 0x40	; 64
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f30:	89 2f       	mov	r24, r25
    2f32:	99 27       	eor	r25, r25
    2f34:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2f36:	e9 e2       	ldi	r30, 0x29	; 41
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	80 83       	st	Z, r24
}
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	cf 91       	pop	r28
    2f48:	df 91       	pop	r29
    2f4a:	08 95       	ret

00002f4c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2f4c:	df 93       	push	r29
    2f4e:	cf 93       	push	r28
    2f50:	0f 92       	push	r0
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
    2f56:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2f58:	eb e2       	ldi	r30, 0x2B	; 43
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	88 2f       	mov	r24, r24
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	80 72       	andi	r24, 0x20	; 32
    2f64:	90 70       	andi	r25, 0x00	; 0
    2f66:	00 97       	sbiw	r24, 0x00	; 0
    2f68:	b9 f3       	breq	.-18     	; 0x2f58 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2f6a:	ec e2       	ldi	r30, 0x2C	; 44
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2f72:	0f 90       	pop	r0
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	08 95       	ret

00002f7a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2f7a:	df 93       	push	r29
    2f7c:	cf 93       	push	r28
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2f82:	eb e2       	ldi	r30, 0x2B	; 43
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	80 81       	ld	r24, Z
    2f88:	88 23       	and	r24, r24
    2f8a:	dc f7       	brge	.-10     	; 0x2f82 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2f8c:	ec e2       	ldi	r30, 0x2C	; 44
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
}
    2f92:	cf 91       	pop	r28
    2f94:	df 91       	pop	r29
    2f96:	08 95       	ret

00002f98 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2f98:	df 93       	push	r29
    2f9a:	cf 93       	push	r28
    2f9c:	00 d0       	rcall	.+0      	; 0x2f9e <UART_sendString+0x6>
    2f9e:	0f 92       	push	r0
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    2fa4:	9b 83       	std	Y+3, r25	; 0x03
    2fa6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2fa8:	19 82       	std	Y+1, r1	; 0x01
    2faa:	0e c0       	rjmp	.+28     	; 0x2fc8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	28 2f       	mov	r18, r24
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	e2 0f       	add	r30, r18
    2fba:	f3 1f       	adc	r31, r19
    2fbc:	80 81       	ld	r24, Z
    2fbe:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <UART_sendByte>
		i++;
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	8f 5f       	subi	r24, 0xFF	; 255
    2fc6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	28 2f       	mov	r18, r24
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd2:	fc 01       	movw	r30, r24
    2fd4:	e2 0f       	add	r30, r18
    2fd6:	f3 1f       	adc	r31, r19
    2fd8:	80 81       	ld	r24, Z
    2fda:	88 23       	and	r24, r24
    2fdc:	39 f7       	brne	.-50     	; 0x2fac <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	cf 91       	pop	r28
    2fe6:	df 91       	pop	r29
    2fe8:	08 95       	ret

00002fea <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2fea:	0f 93       	push	r16
    2fec:	1f 93       	push	r17
    2fee:	df 93       	push	r29
    2ff0:	cf 93       	push	r28
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <UART_receiveString+0xa>
    2ff4:	0f 92       	push	r0
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
    2ffa:	9b 83       	std	Y+3, r25	; 0x03
    2ffc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ffe:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3000:	89 81       	ldd	r24, Y+1	; 0x01
    3002:	28 2f       	mov	r18, r24
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	8a 81       	ldd	r24, Y+2	; 0x02
    3008:	9b 81       	ldd	r25, Y+3	; 0x03
    300a:	8c 01       	movw	r16, r24
    300c:	02 0f       	add	r16, r18
    300e:	13 1f       	adc	r17, r19
    3010:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <UART_recieveByte>
    3014:	f8 01       	movw	r30, r16
    3016:	80 83       	st	Z, r24
    3018:	0f c0       	rjmp	.+30     	; 0x3038 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	8f 5f       	subi	r24, 0xFF	; 255
    301e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	28 2f       	mov	r18, r24
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	8a 81       	ldd	r24, Y+2	; 0x02
    3028:	9b 81       	ldd	r25, Y+3	; 0x03
    302a:	8c 01       	movw	r16, r24
    302c:	02 0f       	add	r16, r18
    302e:	13 1f       	adc	r17, r19
    3030:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <UART_recieveByte>
    3034:	f8 01       	movw	r30, r16
    3036:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	28 2f       	mov	r18, r24
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	8a 81       	ldd	r24, Y+2	; 0x02
    3040:	9b 81       	ldd	r25, Y+3	; 0x03
    3042:	fc 01       	movw	r30, r24
    3044:	e2 0f       	add	r30, r18
    3046:	f3 1f       	adc	r31, r19
    3048:	80 81       	ld	r24, Z
    304a:	83 32       	cpi	r24, 0x23	; 35
    304c:	31 f7       	brne	.-52     	; 0x301a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	28 2f       	mov	r18, r24
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	8a 81       	ldd	r24, Y+2	; 0x02
    3056:	9b 81       	ldd	r25, Y+3	; 0x03
    3058:	fc 01       	movw	r30, r24
    305a:	e2 0f       	add	r30, r18
    305c:	f3 1f       	adc	r31, r19
    305e:	10 82       	st	Z, r1
}
    3060:	0f 90       	pop	r0
    3062:	0f 90       	pop	r0
    3064:	0f 90       	pop	r0
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	1f 91       	pop	r17
    306c:	0f 91       	pop	r16
    306e:	08 95       	ret

00003070 <__udivmodsi4>:
    3070:	a1 e2       	ldi	r26, 0x21	; 33
    3072:	1a 2e       	mov	r1, r26
    3074:	aa 1b       	sub	r26, r26
    3076:	bb 1b       	sub	r27, r27
    3078:	fd 01       	movw	r30, r26
    307a:	0d c0       	rjmp	.+26     	; 0x3096 <__udivmodsi4_ep>

0000307c <__udivmodsi4_loop>:
    307c:	aa 1f       	adc	r26, r26
    307e:	bb 1f       	adc	r27, r27
    3080:	ee 1f       	adc	r30, r30
    3082:	ff 1f       	adc	r31, r31
    3084:	a2 17       	cp	r26, r18
    3086:	b3 07       	cpc	r27, r19
    3088:	e4 07       	cpc	r30, r20
    308a:	f5 07       	cpc	r31, r21
    308c:	20 f0       	brcs	.+8      	; 0x3096 <__udivmodsi4_ep>
    308e:	a2 1b       	sub	r26, r18
    3090:	b3 0b       	sbc	r27, r19
    3092:	e4 0b       	sbc	r30, r20
    3094:	f5 0b       	sbc	r31, r21

00003096 <__udivmodsi4_ep>:
    3096:	66 1f       	adc	r22, r22
    3098:	77 1f       	adc	r23, r23
    309a:	88 1f       	adc	r24, r24
    309c:	99 1f       	adc	r25, r25
    309e:	1a 94       	dec	r1
    30a0:	69 f7       	brne	.-38     	; 0x307c <__udivmodsi4_loop>
    30a2:	60 95       	com	r22
    30a4:	70 95       	com	r23
    30a6:	80 95       	com	r24
    30a8:	90 95       	com	r25
    30aa:	9b 01       	movw	r18, r22
    30ac:	ac 01       	movw	r20, r24
    30ae:	bd 01       	movw	r22, r26
    30b0:	cf 01       	movw	r24, r30
    30b2:	08 95       	ret

000030b4 <__prologue_saves__>:
    30b4:	2f 92       	push	r2
    30b6:	3f 92       	push	r3
    30b8:	4f 92       	push	r4
    30ba:	5f 92       	push	r5
    30bc:	6f 92       	push	r6
    30be:	7f 92       	push	r7
    30c0:	8f 92       	push	r8
    30c2:	9f 92       	push	r9
    30c4:	af 92       	push	r10
    30c6:	bf 92       	push	r11
    30c8:	cf 92       	push	r12
    30ca:	df 92       	push	r13
    30cc:	ef 92       	push	r14
    30ce:	ff 92       	push	r15
    30d0:	0f 93       	push	r16
    30d2:	1f 93       	push	r17
    30d4:	cf 93       	push	r28
    30d6:	df 93       	push	r29
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
    30dc:	ca 1b       	sub	r28, r26
    30de:	db 0b       	sbc	r29, r27
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	f8 94       	cli
    30e4:	de bf       	out	0x3e, r29	; 62
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	cd bf       	out	0x3d, r28	; 61
    30ea:	09 94       	ijmp

000030ec <__epilogue_restores__>:
    30ec:	2a 88       	ldd	r2, Y+18	; 0x12
    30ee:	39 88       	ldd	r3, Y+17	; 0x11
    30f0:	48 88       	ldd	r4, Y+16	; 0x10
    30f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    30f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    30f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    30f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    30fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    30fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    30fe:	b9 84       	ldd	r11, Y+9	; 0x09
    3100:	c8 84       	ldd	r12, Y+8	; 0x08
    3102:	df 80       	ldd	r13, Y+7	; 0x07
    3104:	ee 80       	ldd	r14, Y+6	; 0x06
    3106:	fd 80       	ldd	r15, Y+5	; 0x05
    3108:	0c 81       	ldd	r16, Y+4	; 0x04
    310a:	1b 81       	ldd	r17, Y+3	; 0x03
    310c:	aa 81       	ldd	r26, Y+2	; 0x02
    310e:	b9 81       	ldd	r27, Y+1	; 0x01
    3110:	ce 0f       	add	r28, r30
    3112:	d1 1d       	adc	r29, r1
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	cd bf       	out	0x3d, r28	; 61
    311e:	ed 01       	movw	r28, r26
    3120:	08 95       	ret

00003122 <itoa>:
    3122:	fb 01       	movw	r30, r22
    3124:	9f 01       	movw	r18, r30
    3126:	e8 94       	clt
    3128:	42 30       	cpi	r20, 0x02	; 2
    312a:	c4 f0       	brlt	.+48     	; 0x315c <itoa+0x3a>
    312c:	45 32       	cpi	r20, 0x25	; 37
    312e:	b4 f4       	brge	.+44     	; 0x315c <itoa+0x3a>
    3130:	4a 30       	cpi	r20, 0x0A	; 10
    3132:	29 f4       	brne	.+10     	; 0x313e <itoa+0x1c>
    3134:	97 fb       	bst	r25, 7
    3136:	1e f4       	brtc	.+6      	; 0x313e <itoa+0x1c>
    3138:	90 95       	com	r25
    313a:	81 95       	neg	r24
    313c:	9f 4f       	sbci	r25, 0xFF	; 255
    313e:	64 2f       	mov	r22, r20
    3140:	77 27       	eor	r23, r23
    3142:	0e 94 c2 18 	call	0x3184	; 0x3184 <__udivmodhi4>
    3146:	80 5d       	subi	r24, 0xD0	; 208
    3148:	8a 33       	cpi	r24, 0x3A	; 58
    314a:	0c f0       	brlt	.+2      	; 0x314e <itoa+0x2c>
    314c:	89 5d       	subi	r24, 0xD9	; 217
    314e:	81 93       	st	Z+, r24
    3150:	cb 01       	movw	r24, r22
    3152:	00 97       	sbiw	r24, 0x00	; 0
    3154:	a1 f7       	brne	.-24     	; 0x313e <itoa+0x1c>
    3156:	16 f4       	brtc	.+4      	; 0x315c <itoa+0x3a>
    3158:	5d e2       	ldi	r21, 0x2D	; 45
    315a:	51 93       	st	Z+, r21
    315c:	10 82       	st	Z, r1
    315e:	c9 01       	movw	r24, r18
    3160:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <strrev>

00003164 <strrev>:
    3164:	dc 01       	movw	r26, r24
    3166:	fc 01       	movw	r30, r24
    3168:	67 2f       	mov	r22, r23
    316a:	71 91       	ld	r23, Z+
    316c:	77 23       	and	r23, r23
    316e:	e1 f7       	brne	.-8      	; 0x3168 <strrev+0x4>
    3170:	32 97       	sbiw	r30, 0x02	; 2
    3172:	04 c0       	rjmp	.+8      	; 0x317c <strrev+0x18>
    3174:	7c 91       	ld	r23, X
    3176:	6d 93       	st	X+, r22
    3178:	70 83       	st	Z, r23
    317a:	62 91       	ld	r22, -Z
    317c:	ae 17       	cp	r26, r30
    317e:	bf 07       	cpc	r27, r31
    3180:	c8 f3       	brcs	.-14     	; 0x3174 <strrev+0x10>
    3182:	08 95       	ret

00003184 <__udivmodhi4>:
    3184:	aa 1b       	sub	r26, r26
    3186:	bb 1b       	sub	r27, r27
    3188:	51 e1       	ldi	r21, 0x11	; 17
    318a:	07 c0       	rjmp	.+14     	; 0x319a <__udivmodhi4_ep>

0000318c <__udivmodhi4_loop>:
    318c:	aa 1f       	adc	r26, r26
    318e:	bb 1f       	adc	r27, r27
    3190:	a6 17       	cp	r26, r22
    3192:	b7 07       	cpc	r27, r23
    3194:	10 f0       	brcs	.+4      	; 0x319a <__udivmodhi4_ep>
    3196:	a6 1b       	sub	r26, r22
    3198:	b7 0b       	sbc	r27, r23

0000319a <__udivmodhi4_ep>:
    319a:	88 1f       	adc	r24, r24
    319c:	99 1f       	adc	r25, r25
    319e:	5a 95       	dec	r21
    31a0:	a9 f7       	brne	.-22     	; 0x318c <__udivmodhi4_loop>
    31a2:	80 95       	com	r24
    31a4:	90 95       	com	r25
    31a6:	bc 01       	movw	r22, r24
    31a8:	cd 01       	movw	r24, r26
    31aa:	08 95       	ret

000031ac <_exit>:
    31ac:	f8 94       	cli

000031ae <__stop_program>:
    31ae:	ff cf       	rjmp	.-2      	; 0x31ae <__stop_program>
