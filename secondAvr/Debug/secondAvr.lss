
secondAvr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002a74  00002b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800074  00800074  00002b1c  2**0
                  ALLOC
  3 .stab         00003078  00000000  00000000  00002b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014ee  00000000  00000000  00005b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007082  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000071c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007332  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ac14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ad74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b001  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b7cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c1 11 	call	0x2382	; 0x2382 <main>
      8a:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzinit>:
#include "common_macros.h"
#include <util/delay.h>
#include "buzzer.h"


void Buzzinit(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BuzzPort, BuzzPin, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	63 e0       	ldi	r22, 0x03	; 3
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 b8 06 	call	0xd70	; 0xd70 <GPIO_setupPinDirection>
	GPIO_writePin(BuzzPort, BuzzPin, LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	63 e0       	ldi	r22, 0x03	; 3
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzon>:

void Buzzon(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BuzzPort, BuzzPin, LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	63 e0       	ldi	r22, 0x03	; 3
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>

}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzoff>:

void Buzzoff(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BuzzPort, BuzzPin, LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	63 e0       	ldi	r22, 0x03	; 3
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>

}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <MotorInit>:




void MotorInit(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTMotor, PinMotor1, PIN_OUTPUT);
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	62 e0       	ldi	r22, 0x02	; 2
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 b8 06 	call	0xd70	; 0xd70 <GPIO_setupPinDirection>
	GPIO_writePin(PORTMotor, PinMotor1, LOGIC_LOW);
     baa:	83 e0       	ldi	r24, 0x03	; 3
     bac:	62 e0       	ldi	r22, 0x02	; 2
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>

	GPIO_setupPinDirection(PORTMotor, PinMotor2, PIN_OUTPUT);
     bb4:	83 e0       	ldi	r24, 0x03	; 3
     bb6:	63 e0       	ldi	r22, 0x03	; 3
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	0e 94 b8 06 	call	0xd70	; 0xd70 <GPIO_setupPinDirection>
	GPIO_writePin(PORTMotor, PinMotor2, LOGIC_LOW);
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	63 e0       	ldi	r22, 0x03	; 3
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <MotorM>:

void MotorM(MotorMode mode)
{
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	89 83       	std	Y+1, r24	; 0x01
	if (mode == ClockWise_Motor)
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	88 23       	and	r24, r24
     bde:	59 f4       	brne	.+22     	; 0xbf6 <MotorM+0x28>
	{
		GPIO_writePin(PORTMotor, PinMotor1, LOGIC_LOW);
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	62 e0       	ldi	r22, 0x02	; 2
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
		GPIO_writePin(PORTMotor, PinMotor2, LOGIC_HIGH);
     bea:	83 e0       	ldi	r24, 0x03	; 3
     bec:	63 e0       	ldi	r22, 0x03	; 3
     bee:	41 e0       	ldi	r20, 0x01	; 1
     bf0:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
     bf4:	18 c0       	rjmp	.+48     	; 0xc26 <MotorM+0x58>
	}
	else if(mode==AntiClock_Motor)
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	59 f4       	brne	.+22     	; 0xc12 <MotorM+0x44>
	{
		GPIO_writePin(PORTMotor, PinMotor1, LOGIC_HIGH);
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	41 e0       	ldi	r20, 0x01	; 1
     c02:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
		GPIO_writePin(PORTMotor, PinMotor2, LOGIC_LOW);
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	63 e0       	ldi	r22, 0x03	; 3
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
     c10:	0a c0       	rjmp	.+20     	; 0xc26 <MotorM+0x58>

	}
	else
	{
		GPIO_writePin(PORTMotor, PinMotor1, LOGIC_LOW);
     c12:	83 e0       	ldi	r24, 0x03	; 3
     c14:	62 e0       	ldi	r22, 0x02	; 2
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
		GPIO_writePin(PORTMotor, PinMotor2, LOGIC_LOW);
     c1c:	83 e0       	ldi	r24, 0x03	; 3
     c1e:	63 e0       	ldi	r22, 0x03	; 3
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>

	}
}
     c26:	0f 90       	pop	r0
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <EEPROM_writeByte>:
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	00 d0       	rcall	.+0      	; 0xc34 <EEPROM_writeByte+0x6>
     c34:	00 d0       	rcall	.+0      	; 0xc36 <EEPROM_writeByte+0x8>
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c40:	0e 94 2f 13 	call	0x265e	; 0x265e <TWI_start>
    if (TWI_getStatus() != TWI_START)
     c44:	0e 94 87 13 	call	0x270e	; 0x270e <TWI_getStatus>
     c48:	88 30       	cpi	r24, 0x08	; 8
     c4a:	11 f0       	breq	.+4      	; 0xc50 <EEPROM_writeByte+0x22>
        return ERROR;
     c4c:	1c 82       	std	Y+4, r1	; 0x04
     c4e:	28 c0       	rjmp	.+80     	; 0xca0 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	9a 81       	ldd	r25, Y+2	; 0x02
     c54:	80 70       	andi	r24, 0x00	; 0
     c56:	97 70       	andi	r25, 0x07	; 7
     c58:	88 0f       	add	r24, r24
     c5a:	89 2f       	mov	r24, r25
     c5c:	88 1f       	adc	r24, r24
     c5e:	99 0b       	sbc	r25, r25
     c60:	91 95       	neg	r25
     c62:	80 6a       	ori	r24, 0xA0	; 160
     c64:	0e 94 4a 13 	call	0x2694	; 0x2694 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c68:	0e 94 87 13 	call	0x270e	; 0x270e <TWI_getStatus>
     c6c:	88 31       	cpi	r24, 0x18	; 24
     c6e:	11 f0       	breq	.+4      	; 0xc74 <EEPROM_writeByte+0x46>
        return ERROR; 
     c70:	1c 82       	std	Y+4, r1	; 0x04
     c72:	16 c0       	rjmp	.+44     	; 0xca0 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	0e 94 4a 13 	call	0x2694	; 0x2694 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c7a:	0e 94 87 13 	call	0x270e	; 0x270e <TWI_getStatus>
     c7e:	88 32       	cpi	r24, 0x28	; 40
     c80:	11 f0       	breq	.+4      	; 0xc86 <EEPROM_writeByte+0x58>
        return ERROR;
     c82:	1c 82       	std	Y+4, r1	; 0x04
     c84:	0d c0       	rjmp	.+26     	; 0xca0 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	0e 94 4a 13 	call	0x2694	; 0x2694 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c8c:	0e 94 87 13 	call	0x270e	; 0x270e <TWI_getStatus>
     c90:	88 32       	cpi	r24, 0x28	; 40
     c92:	11 f0       	breq	.+4      	; 0xc98 <EEPROM_writeByte+0x6a>
        return ERROR;
     c94:	1c 82       	std	Y+4, r1	; 0x04
     c96:	04 c0       	rjmp	.+8      	; 0xca0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     c98:	0e 94 3f 13 	call	0x267e	; 0x267e <TWI_stop>
	
    return SUCCESS;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	8c 83       	std	Y+4, r24	; 0x04
     ca0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <EEPROM_readByte+0x6>
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <EEPROM_readByte+0x8>
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	9a 83       	std	Y+2, r25	; 0x02
     cc0:	89 83       	std	Y+1, r24	; 0x01
     cc2:	7c 83       	std	Y+4, r23	; 0x04
     cc4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     cc6:	0e 94 2f 13 	call	0x265e	; 0x265e <TWI_start>
    if (TWI_getStatus() != TWI_START)
     cca:	0e 94 87 13 	call	0x270e	; 0x270e <TWI_getStatus>
     cce:	88 30       	cpi	r24, 0x08	; 8
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <EEPROM_readByte+0x26>
        return ERROR;
     cd2:	1d 82       	std	Y+5, r1	; 0x05
     cd4:	44 c0       	rjmp	.+136    	; 0xd5e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	80 70       	andi	r24, 0x00	; 0
     cdc:	97 70       	andi	r25, 0x07	; 7
     cde:	88 0f       	add	r24, r24
     ce0:	89 2f       	mov	r24, r25
     ce2:	88 1f       	adc	r24, r24
     ce4:	99 0b       	sbc	r25, r25
     ce6:	91 95       	neg	r25
     ce8:	80 6a       	ori	r24, 0xA0	; 160
     cea:	0e 94 4a 13 	call	0x2694	; 0x2694 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     cee:	0e 94 87 13 	call	0x270e	; 0x270e <TWI_getStatus>
     cf2:	88 31       	cpi	r24, 0x18	; 24
     cf4:	11 f0       	breq	.+4      	; 0xcfa <EEPROM_readByte+0x4a>
        return ERROR;
     cf6:	1d 82       	std	Y+5, r1	; 0x05
     cf8:	32 c0       	rjmp	.+100    	; 0xd5e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	0e 94 4a 13 	call	0x2694	; 0x2694 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     d00:	0e 94 87 13 	call	0x270e	; 0x270e <TWI_getStatus>
     d04:	88 32       	cpi	r24, 0x28	; 40
     d06:	11 f0       	breq	.+4      	; 0xd0c <EEPROM_readByte+0x5c>
        return ERROR;
     d08:	1d 82       	std	Y+5, r1	; 0x05
     d0a:	29 c0       	rjmp	.+82     	; 0xd5e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     d0c:	0e 94 2f 13 	call	0x265e	; 0x265e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     d10:	0e 94 87 13 	call	0x270e	; 0x270e <TWI_getStatus>
     d14:	80 31       	cpi	r24, 0x10	; 16
     d16:	11 f0       	breq	.+4      	; 0xd1c <EEPROM_readByte+0x6c>
        return ERROR;
     d18:	1d 82       	std	Y+5, r1	; 0x05
     d1a:	21 c0       	rjmp	.+66     	; 0xd5e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	80 70       	andi	r24, 0x00	; 0
     d22:	97 70       	andi	r25, 0x07	; 7
     d24:	88 0f       	add	r24, r24
     d26:	89 2f       	mov	r24, r25
     d28:	88 1f       	adc	r24, r24
     d2a:	99 0b       	sbc	r25, r25
     d2c:	91 95       	neg	r25
     d2e:	81 6a       	ori	r24, 0xA1	; 161
     d30:	0e 94 4a 13 	call	0x2694	; 0x2694 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     d34:	0e 94 87 13 	call	0x270e	; 0x270e <TWI_getStatus>
     d38:	80 34       	cpi	r24, 0x40	; 64
     d3a:	11 f0       	breq	.+4      	; 0xd40 <EEPROM_readByte+0x90>
        return ERROR;
     d3c:	1d 82       	std	Y+5, r1	; 0x05
     d3e:	0f c0       	rjmp	.+30     	; 0xd5e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     d40:	0e 94 74 13 	call	0x26e8	; 0x26e8 <TWI_readByteWithNACK>
     d44:	eb 81       	ldd	r30, Y+3	; 0x03
     d46:	fc 81       	ldd	r31, Y+4	; 0x04
     d48:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     d4a:	0e 94 87 13 	call	0x270e	; 0x270e <TWI_getStatus>
     d4e:	88 35       	cpi	r24, 0x58	; 88
     d50:	11 f0       	breq	.+4      	; 0xd56 <EEPROM_readByte+0xa6>
        return ERROR;
     d52:	1d 82       	std	Y+5, r1	; 0x05
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     d56:	0e 94 3f 13 	call	0x267e	; 0x267e <TWI_stop>

    return SUCCESS;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	8d 83       	std	Y+5, r24	; 0x05
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	00 d0       	rcall	.+0      	; 0xd76 <GPIO_setupPinDirection+0x6>
     d76:	00 d0       	rcall	.+0      	; 0xd78 <GPIO_setupPinDirection+0x8>
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	6a 83       	std	Y+2, r22	; 0x02
     d82:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	88 30       	cpi	r24, 0x08	; 8
     d88:	08 f0       	brcs	.+2      	; 0xd8c <GPIO_setupPinDirection+0x1c>
     d8a:	d5 c0       	rjmp	.+426    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	84 30       	cpi	r24, 0x04	; 4
     d90:	08 f0       	brcs	.+2      	; 0xd94 <GPIO_setupPinDirection+0x24>
     d92:	d1 c0       	rjmp	.+418    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	3d 83       	std	Y+5, r19	; 0x05
     d9c:	2c 83       	std	Y+4, r18	; 0x04
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	9d 81       	ldd	r25, Y+5	; 0x05
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	91 05       	cpc	r25, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <GPIO_setupPinDirection+0x3a>
     da8:	43 c0       	rjmp	.+134    	; 0xe30 <GPIO_setupPinDirection+0xc0>
     daa:	2c 81       	ldd	r18, Y+4	; 0x04
     dac:	3d 81       	ldd	r19, Y+5	; 0x05
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	2c f4       	brge	.+10     	; 0xdbe <GPIO_setupPinDirection+0x4e>
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	9d 81       	ldd	r25, Y+5	; 0x05
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	71 f0       	breq	.+28     	; 0xdd8 <GPIO_setupPinDirection+0x68>
     dbc:	bc c0       	rjmp	.+376    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
     dbe:	2c 81       	ldd	r18, Y+4	; 0x04
     dc0:	3d 81       	ldd	r19, Y+5	; 0x05
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	09 f4       	brne	.+2      	; 0xdca <GPIO_setupPinDirection+0x5a>
     dc8:	5f c0       	rjmp	.+190    	; 0xe88 <GPIO_setupPinDirection+0x118>
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	9d 81       	ldd	r25, Y+5	; 0x05
     dce:	83 30       	cpi	r24, 0x03	; 3
     dd0:	91 05       	cpc	r25, r1
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <GPIO_setupPinDirection+0x66>
     dd4:	85 c0       	rjmp	.+266    	; 0xee0 <GPIO_setupPinDirection+0x170>
     dd6:	af c0       	rjmp	.+350    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	a1 f4       	brne	.+40     	; 0xe06 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     dde:	aa e3       	ldi	r26, 0x3A	; 58
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	ea e3       	ldi	r30, 0x3A	; 58
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <GPIO_setupPinDirection+0x8c>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <GPIO_setupPinDirection+0x88>
     e00:	84 2b       	or	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	98 c0       	rjmp	.+304    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e06:	aa e3       	ldi	r26, 0x3A	; 58
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ea e3       	ldi	r30, 0x3A	; 58
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <GPIO_setupPinDirection+0xb4>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <GPIO_setupPinDirection+0xb0>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	83 c0       	rjmp	.+262    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	a1 f4       	brne	.+40     	; 0xe5e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e36:	a7 e3       	ldi	r26, 0x37	; 55
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e3       	ldi	r30, 0x37	; 55
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <GPIO_setupPinDirection+0xe4>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <GPIO_setupPinDirection+0xe0>
     e58:	84 2b       	or	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	6c c0       	rjmp	.+216    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e5e:	a7 e3       	ldi	r26, 0x37	; 55
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e7 e3       	ldi	r30, 0x37	; 55
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <GPIO_setupPinDirection+0x10c>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <GPIO_setupPinDirection+0x108>
     e80:	80 95       	com	r24
     e82:	84 23       	and	r24, r20
     e84:	8c 93       	st	X, r24
     e86:	57 c0       	rjmp	.+174    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	a1 f4       	brne	.+40     	; 0xeb6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e8e:	a4 e3       	ldi	r26, 0x34	; 52
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e4 e3       	ldi	r30, 0x34	; 52
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <GPIO_setupPinDirection+0x13c>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <GPIO_setupPinDirection+0x138>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	40 c0       	rjmp	.+128    	; 0xf36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     eb6:	a4 e3       	ldi	r26, 0x34	; 52
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e4 e3       	ldi	r30, 0x34	; 52
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <GPIO_setupPinDirection+0x164>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <GPIO_setupPinDirection+0x160>
     ed8:	80 95       	com	r24
     eda:	84 23       	and	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	2b c0       	rjmp	.+86     	; 0xf36 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	a1 f4       	brne	.+40     	; 0xf0e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     ee6:	a1 e3       	ldi	r26, 0x31	; 49
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e1 e3       	ldi	r30, 0x31	; 49
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <GPIO_setupPinDirection+0x194>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <GPIO_setupPinDirection+0x190>
     f08:	84 2b       	or	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f0e:	a1 e3       	ldi	r26, 0x31	; 49
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e3       	ldi	r30, 0x31	; 49
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <GPIO_setupPinDirection+0x1bc>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <GPIO_setupPinDirection+0x1b8>
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <GPIO_writePin+0x6>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <GPIO_writePin+0x8>
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	6a 83       	std	Y+2, r22	; 0x02
     f58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	88 30       	cpi	r24, 0x08	; 8
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <GPIO_writePin+0x1c>
     f60:	d5 c0       	rjmp	.+426    	; 0x110c <GPIO_writePin+0x1c6>
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	84 30       	cpi	r24, 0x04	; 4
     f66:	08 f0       	brcs	.+2      	; 0xf6a <GPIO_writePin+0x24>
     f68:	d1 c0       	rjmp	.+418    	; 0x110c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	3d 83       	std	Y+5, r19	; 0x05
     f72:	2c 83       	std	Y+4, r18	; 0x04
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	9d 81       	ldd	r25, Y+5	; 0x05
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	91 05       	cpc	r25, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <GPIO_writePin+0x3a>
     f7e:	43 c0       	rjmp	.+134    	; 0x1006 <GPIO_writePin+0xc0>
     f80:	2c 81       	ldd	r18, Y+4	; 0x04
     f82:	3d 81       	ldd	r19, Y+5	; 0x05
     f84:	22 30       	cpi	r18, 0x02	; 2
     f86:	31 05       	cpc	r19, r1
     f88:	2c f4       	brge	.+10     	; 0xf94 <GPIO_writePin+0x4e>
     f8a:	8c 81       	ldd	r24, Y+4	; 0x04
     f8c:	9d 81       	ldd	r25, Y+5	; 0x05
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	71 f0       	breq	.+28     	; 0xfae <GPIO_writePin+0x68>
     f92:	bc c0       	rjmp	.+376    	; 0x110c <GPIO_writePin+0x1c6>
     f94:	2c 81       	ldd	r18, Y+4	; 0x04
     f96:	3d 81       	ldd	r19, Y+5	; 0x05
     f98:	22 30       	cpi	r18, 0x02	; 2
     f9a:	31 05       	cpc	r19, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <GPIO_writePin+0x5a>
     f9e:	5f c0       	rjmp	.+190    	; 0x105e <GPIO_writePin+0x118>
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	9d 81       	ldd	r25, Y+5	; 0x05
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	91 05       	cpc	r25, r1
     fa8:	09 f4       	brne	.+2      	; 0xfac <GPIO_writePin+0x66>
     faa:	85 c0       	rjmp	.+266    	; 0x10b6 <GPIO_writePin+0x170>
     fac:	af c0       	rjmp	.+350    	; 0x110c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	a1 f4       	brne	.+40     	; 0xfdc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     fb4:	ab e3       	ldi	r26, 0x3B	; 59
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	eb e3       	ldi	r30, 0x3B	; 59
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <GPIO_writePin+0x8c>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <GPIO_writePin+0x88>
     fd6:	84 2b       	or	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	98 c0       	rjmp	.+304    	; 0x110c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     fdc:	ab e3       	ldi	r26, 0x3B	; 59
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	eb e3       	ldi	r30, 0x3B	; 59
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <GPIO_writePin+0xb4>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <GPIO_writePin+0xb0>
     ffe:	80 95       	com	r24
    1000:	84 23       	and	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	83 c0       	rjmp	.+262    	; 0x110c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	a1 f4       	brne	.+40     	; 0x1034 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    100c:	a8 e3       	ldi	r26, 0x38	; 56
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e8 e3       	ldi	r30, 0x38	; 56
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <GPIO_writePin+0xe4>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <GPIO_writePin+0xe0>
    102e:	84 2b       	or	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	6c c0       	rjmp	.+216    	; 0x110c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1034:	a8 e3       	ldi	r26, 0x38	; 56
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e8 e3       	ldi	r30, 0x38	; 56
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <GPIO_writePin+0x10c>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <GPIO_writePin+0x108>
    1056:	80 95       	com	r24
    1058:	84 23       	and	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	57 c0       	rjmp	.+174    	; 0x110c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	a1 f4       	brne	.+40     	; 0x108c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1064:	a5 e3       	ldi	r26, 0x35	; 53
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e5 e3       	ldi	r30, 0x35	; 53
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <GPIO_writePin+0x13c>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <GPIO_writePin+0x138>
    1086:	84 2b       	or	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	40 c0       	rjmp	.+128    	; 0x110c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    108c:	a5 e3       	ldi	r26, 0x35	; 53
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e5 e3       	ldi	r30, 0x35	; 53
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <GPIO_writePin+0x164>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <GPIO_writePin+0x160>
    10ae:	80 95       	com	r24
    10b0:	84 23       	and	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	2b c0       	rjmp	.+86     	; 0x110c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	a1 f4       	brne	.+40     	; 0x10e4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    10bc:	a2 e3       	ldi	r26, 0x32	; 50
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e2 e3       	ldi	r30, 0x32	; 50
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <GPIO_writePin+0x194>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <GPIO_writePin+0x190>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	14 c0       	rjmp	.+40     	; 0x110c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    10e4:	a2 e3       	ldi	r26, 0x32	; 50
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e2 e3       	ldi	r30, 0x32	; 50
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <GPIO_writePin+0x1bc>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <GPIO_writePin+0x1b8>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <GPIO_readPin+0x6>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <GPIO_readPin+0x8>
    1124:	0f 92       	push	r0
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	8a 83       	std	Y+2, r24	; 0x02
    112c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    112e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 30       	cpi	r24, 0x08	; 8
    1134:	08 f0       	brcs	.+2      	; 0x1138 <GPIO_readPin+0x1c>
    1136:	84 c0       	rjmp	.+264    	; 0x1240 <GPIO_readPin+0x124>
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	08 f0       	brcs	.+2      	; 0x1140 <GPIO_readPin+0x24>
    113e:	80 c0       	rjmp	.+256    	; 0x1240 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3d 83       	std	Y+5, r19	; 0x05
    1148:	2c 83       	std	Y+4, r18	; 0x04
    114a:	4c 81       	ldd	r20, Y+4	; 0x04
    114c:	5d 81       	ldd	r21, Y+5	; 0x05
    114e:	41 30       	cpi	r20, 0x01	; 1
    1150:	51 05       	cpc	r21, r1
    1152:	79 f1       	breq	.+94     	; 0x11b2 <GPIO_readPin+0x96>
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	82 30       	cpi	r24, 0x02	; 2
    115a:	91 05       	cpc	r25, r1
    115c:	34 f4       	brge	.+12     	; 0x116a <GPIO_readPin+0x4e>
    115e:	2c 81       	ldd	r18, Y+4	; 0x04
    1160:	3d 81       	ldd	r19, Y+5	; 0x05
    1162:	21 15       	cp	r18, r1
    1164:	31 05       	cpc	r19, r1
    1166:	69 f0       	breq	.+26     	; 0x1182 <GPIO_readPin+0x66>
    1168:	6b c0       	rjmp	.+214    	; 0x1240 <GPIO_readPin+0x124>
    116a:	4c 81       	ldd	r20, Y+4	; 0x04
    116c:	5d 81       	ldd	r21, Y+5	; 0x05
    116e:	42 30       	cpi	r20, 0x02	; 2
    1170:	51 05       	cpc	r21, r1
    1172:	b9 f1       	breq	.+110    	; 0x11e2 <GPIO_readPin+0xc6>
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	9d 81       	ldd	r25, Y+5	; 0x05
    1178:	83 30       	cpi	r24, 0x03	; 3
    117a:	91 05       	cpc	r25, r1
    117c:	09 f4       	brne	.+2      	; 0x1180 <GPIO_readPin+0x64>
    117e:	49 c0       	rjmp	.+146    	; 0x1212 <GPIO_readPin+0xf6>
    1180:	5f c0       	rjmp	.+190    	; 0x1240 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1182:	e9 e3       	ldi	r30, 0x39	; 57
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	a9 01       	movw	r20, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <GPIO_readPin+0x7e>
    1196:	55 95       	asr	r21
    1198:	47 95       	ror	r20
    119a:	8a 95       	dec	r24
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <GPIO_readPin+0x7a>
    119e:	ca 01       	movw	r24, r20
    11a0:	81 70       	andi	r24, 0x01	; 1
    11a2:	90 70       	andi	r25, 0x00	; 0
    11a4:	88 23       	and	r24, r24
    11a6:	19 f0       	breq	.+6      	; 0x11ae <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	49 c0       	rjmp	.+146    	; 0x1240 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11ae:	19 82       	std	Y+1, r1	; 0x01
    11b0:	47 c0       	rjmp	.+142    	; 0x1240 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    11b2:	e6 e3       	ldi	r30, 0x36	; 54
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	88 2f       	mov	r24, r24
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a9 01       	movw	r20, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <GPIO_readPin+0xae>
    11c6:	55 95       	asr	r21
    11c8:	47 95       	ror	r20
    11ca:	8a 95       	dec	r24
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <GPIO_readPin+0xaa>
    11ce:	ca 01       	movw	r24, r20
    11d0:	81 70       	andi	r24, 0x01	; 1
    11d2:	90 70       	andi	r25, 0x00	; 0
    11d4:	88 23       	and	r24, r24
    11d6:	19 f0       	breq	.+6      	; 0x11de <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	31 c0       	rjmp	.+98     	; 0x1240 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11de:	19 82       	std	Y+1, r1	; 0x01
    11e0:	2f c0       	rjmp	.+94     	; 0x1240 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    11e2:	e3 e3       	ldi	r30, 0x33	; 51
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	a9 01       	movw	r20, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <GPIO_readPin+0xde>
    11f6:	55 95       	asr	r21
    11f8:	47 95       	ror	r20
    11fa:	8a 95       	dec	r24
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <GPIO_readPin+0xda>
    11fe:	ca 01       	movw	r24, r20
    1200:	81 70       	andi	r24, 0x01	; 1
    1202:	90 70       	andi	r25, 0x00	; 0
    1204:	88 23       	and	r24, r24
    1206:	19 f0       	breq	.+6      	; 0x120e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	19 c0       	rjmp	.+50     	; 0x1240 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    120e:	19 82       	std	Y+1, r1	; 0x01
    1210:	17 c0       	rjmp	.+46     	; 0x1240 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1212:	e0 e3       	ldi	r30, 0x30	; 48
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	a9 01       	movw	r20, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <GPIO_readPin+0x10e>
    1226:	55 95       	asr	r21
    1228:	47 95       	ror	r20
    122a:	8a 95       	dec	r24
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <GPIO_readPin+0x10a>
    122e:	ca 01       	movw	r24, r20
    1230:	81 70       	andi	r24, 0x01	; 1
    1232:	90 70       	andi	r25, 0x00	; 0
    1234:	88 23       	and	r24, r24
    1236:	19 f0       	breq	.+6      	; 0x123e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    123e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1240:	89 81       	ldd	r24, Y+1	; 0x01
}
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <GPIO_setupPortDirection+0x6>
    1258:	00 d0       	rcall	.+0      	; 0x125a <GPIO_setupPortDirection+0x8>
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	84 30       	cpi	r24, 0x04	; 4
    1266:	90 f5       	brcc	.+100    	; 0x12cc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	3c 83       	std	Y+4, r19	; 0x04
    1270:	2b 83       	std	Y+3, r18	; 0x03
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	91 05       	cpc	r25, r1
    127a:	d1 f0       	breq	.+52     	; 0x12b0 <GPIO_setupPortDirection+0x5e>
    127c:	2b 81       	ldd	r18, Y+3	; 0x03
    127e:	3c 81       	ldd	r19, Y+4	; 0x04
    1280:	22 30       	cpi	r18, 0x02	; 2
    1282:	31 05       	cpc	r19, r1
    1284:	2c f4       	brge	.+10     	; 0x1290 <GPIO_setupPortDirection+0x3e>
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	61 f0       	breq	.+24     	; 0x12a6 <GPIO_setupPortDirection+0x54>
    128e:	1e c0       	rjmp	.+60     	; 0x12cc <GPIO_setupPortDirection+0x7a>
    1290:	2b 81       	ldd	r18, Y+3	; 0x03
    1292:	3c 81       	ldd	r19, Y+4	; 0x04
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	81 f0       	breq	.+32     	; 0x12ba <GPIO_setupPortDirection+0x68>
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	83 30       	cpi	r24, 0x03	; 3
    12a0:	91 05       	cpc	r25, r1
    12a2:	81 f0       	breq	.+32     	; 0x12c4 <GPIO_setupPortDirection+0x72>
    12a4:	13 c0       	rjmp	.+38     	; 0x12cc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    12a6:	ea e3       	ldi	r30, 0x3A	; 58
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	80 83       	st	Z, r24
    12ae:	0e c0       	rjmp	.+28     	; 0x12cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    12b0:	e7 e3       	ldi	r30, 0x37	; 55
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	80 83       	st	Z, r24
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    12ba:	e4 e3       	ldi	r30, 0x34	; 52
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	80 83       	st	Z, r24
    12c2:	04 c0       	rjmp	.+8      	; 0x12cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    12c4:	e1 e3       	ldi	r30, 0x31	; 49
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	80 83       	st	Z, r24
			break;
		}
	}
}
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <GPIO_writePort+0x6>
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <GPIO_writePort+0x8>
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	84 30       	cpi	r24, 0x04	; 4
    12ee:	90 f5       	brcc	.+100    	; 0x1354 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3c 83       	std	Y+4, r19	; 0x04
    12f8:	2b 83       	std	Y+3, r18	; 0x03
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	91 05       	cpc	r25, r1
    1302:	d1 f0       	breq	.+52     	; 0x1338 <GPIO_writePort+0x5e>
    1304:	2b 81       	ldd	r18, Y+3	; 0x03
    1306:	3c 81       	ldd	r19, Y+4	; 0x04
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	2c f4       	brge	.+10     	; 0x1318 <GPIO_writePort+0x3e>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	61 f0       	breq	.+24     	; 0x132e <GPIO_writePort+0x54>
    1316:	1e c0       	rjmp	.+60     	; 0x1354 <GPIO_writePort+0x7a>
    1318:	2b 81       	ldd	r18, Y+3	; 0x03
    131a:	3c 81       	ldd	r19, Y+4	; 0x04
    131c:	22 30       	cpi	r18, 0x02	; 2
    131e:	31 05       	cpc	r19, r1
    1320:	81 f0       	breq	.+32     	; 0x1342 <GPIO_writePort+0x68>
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	91 05       	cpc	r25, r1
    132a:	81 f0       	breq	.+32     	; 0x134c <GPIO_writePort+0x72>
    132c:	13 c0       	rjmp	.+38     	; 0x1354 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    132e:	eb e3       	ldi	r30, 0x3B	; 59
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	80 83       	st	Z, r24
    1336:	0e c0       	rjmp	.+28     	; 0x1354 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1338:	e8 e3       	ldi	r30, 0x38	; 56
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	80 83       	st	Z, r24
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1342:	e5 e3       	ldi	r30, 0x35	; 53
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	80 83       	st	Z, r24
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    134c:	e2 e3       	ldi	r30, 0x32	; 50
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	80 83       	st	Z, r24
			break;
		}
	}
}
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <GPIO_readPort+0x6>
    1368:	00 d0       	rcall	.+0      	; 0x136a <GPIO_readPort+0x8>
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1370:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	84 30       	cpi	r24, 0x04	; 4
    1376:	90 f5       	brcc	.+100    	; 0x13dc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3c 83       	std	Y+4, r19	; 0x04
    1380:	2b 83       	std	Y+3, r18	; 0x03
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	91 05       	cpc	r25, r1
    138a:	d1 f0       	breq	.+52     	; 0x13c0 <GPIO_readPort+0x5e>
    138c:	2b 81       	ldd	r18, Y+3	; 0x03
    138e:	3c 81       	ldd	r19, Y+4	; 0x04
    1390:	22 30       	cpi	r18, 0x02	; 2
    1392:	31 05       	cpc	r19, r1
    1394:	2c f4       	brge	.+10     	; 0x13a0 <GPIO_readPort+0x3e>
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	61 f0       	breq	.+24     	; 0x13b6 <GPIO_readPort+0x54>
    139e:	1e c0       	rjmp	.+60     	; 0x13dc <GPIO_readPort+0x7a>
    13a0:	2b 81       	ldd	r18, Y+3	; 0x03
    13a2:	3c 81       	ldd	r19, Y+4	; 0x04
    13a4:	22 30       	cpi	r18, 0x02	; 2
    13a6:	31 05       	cpc	r19, r1
    13a8:	81 f0       	breq	.+32     	; 0x13ca <GPIO_readPort+0x68>
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	83 30       	cpi	r24, 0x03	; 3
    13b0:	91 05       	cpc	r25, r1
    13b2:	81 f0       	breq	.+32     	; 0x13d4 <GPIO_readPort+0x72>
    13b4:	13 c0       	rjmp	.+38     	; 0x13dc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    13b6:	e9 e3       	ldi	r30, 0x39	; 57
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	0e c0       	rjmp	.+28     	; 0x13dc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    13c0:	e6 e3       	ldi	r30, 0x36	; 54
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	09 c0       	rjmp	.+18     	; 0x13dc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    13ca:	e3 e3       	ldi	r30, 0x33	; 51
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    13d4:	e0 e3       	ldi	r30, 0x30	; 48
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    13f4:	83 e0       	ldi	r24, 0x03	; 3
    13f6:	66 e0       	ldi	r22, 0x06	; 6
    13f8:	41 e0       	ldi	r20, 0x01	; 1
    13fa:	0e 94 b8 06 	call	0xd70	; 0xd70 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    13fe:	83 e0       	ldi	r24, 0x03	; 3
    1400:	65 e0       	ldi	r22, 0x05	; 5
    1402:	41 e0       	ldi	r20, 0x01	; 1
    1404:	0e 94 b8 06 	call	0xd70	; 0xd70 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1408:	83 e0       	ldi	r24, 0x03	; 3
    140a:	64 e0       	ldi	r22, 0x04	; 4
    140c:	41 e0       	ldi	r20, 0x01	; 1
    140e:	0e 94 b8 06 	call	0xd70	; 0xd70 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	6f ef       	ldi	r22, 0xFF	; 255
    1416:	0e 94 29 09 	call	0x1252	; 0x1252 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    141a:	88 e3       	ldi	r24, 0x38	; 56
    141c:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_sendCommand>

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1420:	8c e0       	ldi	r24, 0x0C	; 12
    1422:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_sendCommand>

	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_sendCommand>
}
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	e9 97       	sbiw	r28, 0x39	; 57
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1448:	83 e0       	ldi	r24, 0x03	; 3
    144a:	66 e0       	ldi	r22, 0x06	; 6
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	65 e0       	ldi	r22, 0x05	; 5
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a0 e8       	ldi	r26, 0x80	; 128
    1462:	bf e3       	ldi	r27, 0x3F	; 63
    1464:	8d ab       	std	Y+53, r24	; 0x35
    1466:	9e ab       	std	Y+54, r25	; 0x36
    1468:	af ab       	std	Y+55, r26	; 0x37
    146a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146c:	6d a9       	ldd	r22, Y+53	; 0x35
    146e:	7e a9       	ldd	r23, Y+54	; 0x36
    1470:	8f a9       	ldd	r24, Y+55	; 0x37
    1472:	98 ad       	ldd	r25, Y+56	; 0x38
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	4a ef       	ldi	r20, 0xFA	; 250
    147a:	54 e4       	ldi	r21, 0x44	; 68
    147c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	89 ab       	std	Y+49, r24	; 0x31
    1486:	9a ab       	std	Y+50, r25	; 0x32
    1488:	ab ab       	std	Y+51, r26	; 0x33
    148a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    148c:	69 a9       	ldd	r22, Y+49	; 0x31
    148e:	7a a9       	ldd	r23, Y+50	; 0x32
    1490:	8b a9       	ldd	r24, Y+51	; 0x33
    1492:	9c a9       	ldd	r25, Y+52	; 0x34
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	5f e3       	ldi	r21, 0x3F	; 63
    149c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a0:	88 23       	and	r24, r24
    14a2:	2c f4       	brge	.+10     	; 0x14ae <LCD_sendCommand+0x7c>
		__ticks = 1;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	98 ab       	std	Y+48, r25	; 0x30
    14aa:	8f a7       	std	Y+47, r24	; 0x2f
    14ac:	3f c0       	rjmp	.+126    	; 0x152c <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    14ae:	69 a9       	ldd	r22, Y+49	; 0x31
    14b0:	7a a9       	ldd	r23, Y+50	; 0x32
    14b2:	8b a9       	ldd	r24, Y+51	; 0x33
    14b4:	9c a9       	ldd	r25, Y+52	; 0x34
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	3f ef       	ldi	r19, 0xFF	; 255
    14ba:	4f e7       	ldi	r20, 0x7F	; 127
    14bc:	57 e4       	ldi	r21, 0x47	; 71
    14be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c2:	18 16       	cp	r1, r24
    14c4:	4c f5       	brge	.+82     	; 0x1518 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c6:	6d a9       	ldd	r22, Y+53	; 0x35
    14c8:	7e a9       	ldd	r23, Y+54	; 0x36
    14ca:	8f a9       	ldd	r24, Y+55	; 0x37
    14cc:	98 ad       	ldd	r25, Y+56	; 0x38
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e2       	ldi	r20, 0x20	; 32
    14d4:	51 e4       	ldi	r21, 0x41	; 65
    14d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	98 ab       	std	Y+48, r25	; 0x30
    14ec:	8f a7       	std	Y+47, r24	; 0x2f
    14ee:	0f c0       	rjmp	.+30     	; 0x150e <LCD_sendCommand+0xdc>
    14f0:	88 ec       	ldi	r24, 0xC8	; 200
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	9e a7       	std	Y+46, r25	; 0x2e
    14f6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    14fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <LCD_sendCommand+0xca>
    1500:	9e a7       	std	Y+46, r25	; 0x2e
    1502:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1504:	8f a5       	ldd	r24, Y+47	; 0x2f
    1506:	98 a9       	ldd	r25, Y+48	; 0x30
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	98 ab       	std	Y+48, r25	; 0x30
    150c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1510:	98 a9       	ldd	r25, Y+48	; 0x30
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	69 f7       	brne	.-38     	; 0x14f0 <LCD_sendCommand+0xbe>
    1516:	14 c0       	rjmp	.+40     	; 0x1540 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1518:	69 a9       	ldd	r22, Y+49	; 0x31
    151a:	7a a9       	ldd	r23, Y+50	; 0x32
    151c:	8b a9       	ldd	r24, Y+51	; 0x33
    151e:	9c a9       	ldd	r25, Y+52	; 0x34
    1520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	98 ab       	std	Y+48, r25	; 0x30
    152a:	8f a7       	std	Y+47, r24	; 0x2f
    152c:	8f a5       	ldd	r24, Y+47	; 0x2f
    152e:	98 a9       	ldd	r25, Y+48	; 0x30
    1530:	9c a7       	std	Y+44, r25	; 0x2c
    1532:	8b a7       	std	Y+43, r24	; 0x2b
    1534:	8b a5       	ldd	r24, Y+43	; 0x2b
    1536:	9c a5       	ldd	r25, Y+44	; 0x2c
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <LCD_sendCommand+0x106>
    153c:	9c a7       	std	Y+44, r25	; 0x2c
    153e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	64 e0       	ldi	r22, 0x04	; 4
    1544:	41 e0       	ldi	r20, 0x01	; 1
    1546:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a0 e8       	ldi	r26, 0x80	; 128
    1550:	bf e3       	ldi	r27, 0x3F	; 63
    1552:	8f a3       	std	Y+39, r24	; 0x27
    1554:	98 a7       	std	Y+40, r25	; 0x28
    1556:	a9 a7       	std	Y+41, r26	; 0x29
    1558:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155a:	6f a1       	ldd	r22, Y+39	; 0x27
    155c:	78 a5       	ldd	r23, Y+40	; 0x28
    155e:	89 a5       	ldd	r24, Y+41	; 0x29
    1560:	9a a5       	ldd	r25, Y+42	; 0x2a
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4a ef       	ldi	r20, 0xFA	; 250
    1568:	54 e4       	ldi	r21, 0x44	; 68
    156a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	8b a3       	std	Y+35, r24	; 0x23
    1574:	9c a3       	std	Y+36, r25	; 0x24
    1576:	ad a3       	std	Y+37, r26	; 0x25
    1578:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    157a:	6b a1       	ldd	r22, Y+35	; 0x23
    157c:	7c a1       	ldd	r23, Y+36	; 0x24
    157e:	8d a1       	ldd	r24, Y+37	; 0x25
    1580:	9e a1       	ldd	r25, Y+38	; 0x26
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e8       	ldi	r20, 0x80	; 128
    1588:	5f e3       	ldi	r21, 0x3F	; 63
    158a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    158e:	88 23       	and	r24, r24
    1590:	2c f4       	brge	.+10     	; 0x159c <LCD_sendCommand+0x16a>
		__ticks = 1;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9a a3       	std	Y+34, r25	; 0x22
    1598:	89 a3       	std	Y+33, r24	; 0x21
    159a:	3f c0       	rjmp	.+126    	; 0x161a <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    159c:	6b a1       	ldd	r22, Y+35	; 0x23
    159e:	7c a1       	ldd	r23, Y+36	; 0x24
    15a0:	8d a1       	ldd	r24, Y+37	; 0x25
    15a2:	9e a1       	ldd	r25, Y+38	; 0x26
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	57 e4       	ldi	r21, 0x47	; 71
    15ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b0:	18 16       	cp	r1, r24
    15b2:	4c f5       	brge	.+82     	; 0x1606 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b4:	6f a1       	ldd	r22, Y+39	; 0x27
    15b6:	78 a5       	ldd	r23, Y+40	; 0x28
    15b8:	89 a5       	ldd	r24, Y+41	; 0x29
    15ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	9a a3       	std	Y+34, r25	; 0x22
    15da:	89 a3       	std	Y+33, r24	; 0x21
    15dc:	0f c0       	rjmp	.+30     	; 0x15fc <LCD_sendCommand+0x1ca>
    15de:	88 ec       	ldi	r24, 0xC8	; 200
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	98 a3       	std	Y+32, r25	; 0x20
    15e4:	8f 8f       	std	Y+31, r24	; 0x1f
    15e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15e8:	98 a1       	ldd	r25, Y+32	; 0x20
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <LCD_sendCommand+0x1b8>
    15ee:	98 a3       	std	Y+32, r25	; 0x20
    15f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f2:	89 a1       	ldd	r24, Y+33	; 0x21
    15f4:	9a a1       	ldd	r25, Y+34	; 0x22
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	9a a3       	std	Y+34, r25	; 0x22
    15fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fc:	89 a1       	ldd	r24, Y+33	; 0x21
    15fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	69 f7       	brne	.-38     	; 0x15de <LCD_sendCommand+0x1ac>
    1604:	14 c0       	rjmp	.+40     	; 0x162e <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1606:	6b a1       	ldd	r22, Y+35	; 0x23
    1608:	7c a1       	ldd	r23, Y+36	; 0x24
    160a:	8d a1       	ldd	r24, Y+37	; 0x25
    160c:	9e a1       	ldd	r25, Y+38	; 0x26
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9a a3       	std	Y+34, r25	; 0x22
    1618:	89 a3       	std	Y+33, r24	; 0x21
    161a:	89 a1       	ldd	r24, Y+33	; 0x21
    161c:	9a a1       	ldd	r25, Y+34	; 0x22
    161e:	9e 8f       	std	Y+30, r25	; 0x1e
    1620:	8d 8f       	std	Y+29, r24	; 0x1d
    1622:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1624:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <LCD_sendCommand+0x1f4>
    162a:	9e 8f       	std	Y+30, r25	; 0x1e
    162c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	69 ad       	ldd	r22, Y+57	; 0x39
    1632:	0e 94 6d 09 	call	0x12da	; 0x12da <GPIO_writePort>
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	a0 e8       	ldi	r26, 0x80	; 128
    163c:	bf e3       	ldi	r27, 0x3F	; 63
    163e:	89 8f       	std	Y+25, r24	; 0x19
    1640:	9a 8f       	std	Y+26, r25	; 0x1a
    1642:	ab 8f       	std	Y+27, r26	; 0x1b
    1644:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1646:	69 8d       	ldd	r22, Y+25	; 0x19
    1648:	7a 8d       	ldd	r23, Y+26	; 0x1a
    164a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    164c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	4a ef       	ldi	r20, 0xFA	; 250
    1654:	54 e4       	ldi	r21, 0x44	; 68
    1656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	8d 8b       	std	Y+21, r24	; 0x15
    1660:	9e 8b       	std	Y+22, r25	; 0x16
    1662:	af 8b       	std	Y+23, r26	; 0x17
    1664:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1666:	6d 89       	ldd	r22, Y+21	; 0x15
    1668:	7e 89       	ldd	r23, Y+22	; 0x16
    166a:	8f 89       	ldd	r24, Y+23	; 0x17
    166c:	98 8d       	ldd	r25, Y+24	; 0x18
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e8       	ldi	r20, 0x80	; 128
    1674:	5f e3       	ldi	r21, 0x3F	; 63
    1676:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    167a:	88 23       	and	r24, r24
    167c:	2c f4       	brge	.+10     	; 0x1688 <LCD_sendCommand+0x256>
		__ticks = 1;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	9c 8b       	std	Y+20, r25	; 0x14
    1684:	8b 8b       	std	Y+19, r24	; 0x13
    1686:	3f c0       	rjmp	.+126    	; 0x1706 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1688:	6d 89       	ldd	r22, Y+21	; 0x15
    168a:	7e 89       	ldd	r23, Y+22	; 0x16
    168c:	8f 89       	ldd	r24, Y+23	; 0x17
    168e:	98 8d       	ldd	r25, Y+24	; 0x18
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	3f ef       	ldi	r19, 0xFF	; 255
    1694:	4f e7       	ldi	r20, 0x7F	; 127
    1696:	57 e4       	ldi	r21, 0x47	; 71
    1698:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    169c:	18 16       	cp	r1, r24
    169e:	4c f5       	brge	.+82     	; 0x16f2 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a0:	69 8d       	ldd	r22, Y+25	; 0x19
    16a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e2       	ldi	r20, 0x20	; 32
    16ae:	51 e4       	ldi	r21, 0x41	; 65
    16b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	bc 01       	movw	r22, r24
    16ba:	cd 01       	movw	r24, r26
    16bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	9c 8b       	std	Y+20, r25	; 0x14
    16c6:	8b 8b       	std	Y+19, r24	; 0x13
    16c8:	0f c0       	rjmp	.+30     	; 0x16e8 <LCD_sendCommand+0x2b6>
    16ca:	88 ec       	ldi	r24, 0xC8	; 200
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	9a 8b       	std	Y+18, r25	; 0x12
    16d0:	89 8b       	std	Y+17, r24	; 0x11
    16d2:	89 89       	ldd	r24, Y+17	; 0x11
    16d4:	9a 89       	ldd	r25, Y+18	; 0x12
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <LCD_sendCommand+0x2a4>
    16da:	9a 8b       	std	Y+18, r25	; 0x12
    16dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16de:	8b 89       	ldd	r24, Y+19	; 0x13
    16e0:	9c 89       	ldd	r25, Y+20	; 0x14
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	9c 8b       	std	Y+20, r25	; 0x14
    16e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e8:	8b 89       	ldd	r24, Y+19	; 0x13
    16ea:	9c 89       	ldd	r25, Y+20	; 0x14
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	69 f7       	brne	.-38     	; 0x16ca <LCD_sendCommand+0x298>
    16f0:	14 c0       	rjmp	.+40     	; 0x171a <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f2:	6d 89       	ldd	r22, Y+21	; 0x15
    16f4:	7e 89       	ldd	r23, Y+22	; 0x16
    16f6:	8f 89       	ldd	r24, Y+23	; 0x17
    16f8:	98 8d       	ldd	r25, Y+24	; 0x18
    16fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	9c 8b       	std	Y+20, r25	; 0x14
    1704:	8b 8b       	std	Y+19, r24	; 0x13
    1706:	8b 89       	ldd	r24, Y+19	; 0x13
    1708:	9c 89       	ldd	r25, Y+20	; 0x14
    170a:	98 8b       	std	Y+16, r25	; 0x10
    170c:	8f 87       	std	Y+15, r24	; 0x0f
    170e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1710:	98 89       	ldd	r25, Y+16	; 0x10
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <LCD_sendCommand+0x2e0>
    1716:	98 8b       	std	Y+16, r25	; 0x10
    1718:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    171a:	83 e0       	ldi	r24, 0x03	; 3
    171c:	64 e0       	ldi	r22, 0x04	; 4
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	a0 e8       	ldi	r26, 0x80	; 128
    172a:	bf e3       	ldi	r27, 0x3F	; 63
    172c:	8b 87       	std	Y+11, r24	; 0x0b
    172e:	9c 87       	std	Y+12, r25	; 0x0c
    1730:	ad 87       	std	Y+13, r26	; 0x0d
    1732:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1734:	6b 85       	ldd	r22, Y+11	; 0x0b
    1736:	7c 85       	ldd	r23, Y+12	; 0x0c
    1738:	8d 85       	ldd	r24, Y+13	; 0x0d
    173a:	9e 85       	ldd	r25, Y+14	; 0x0e
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	4a ef       	ldi	r20, 0xFA	; 250
    1742:	54 e4       	ldi	r21, 0x44	; 68
    1744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	8f 83       	std	Y+7, r24	; 0x07
    174e:	98 87       	std	Y+8, r25	; 0x08
    1750:	a9 87       	std	Y+9, r26	; 0x09
    1752:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1754:	6f 81       	ldd	r22, Y+7	; 0x07
    1756:	78 85       	ldd	r23, Y+8	; 0x08
    1758:	89 85       	ldd	r24, Y+9	; 0x09
    175a:	9a 85       	ldd	r25, Y+10	; 0x0a
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e8       	ldi	r20, 0x80	; 128
    1762:	5f e3       	ldi	r21, 0x3F	; 63
    1764:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1768:	88 23       	and	r24, r24
    176a:	2c f4       	brge	.+10     	; 0x1776 <LCD_sendCommand+0x344>
		__ticks = 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
    1774:	3f c0       	rjmp	.+126    	; 0x17f4 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1776:	6f 81       	ldd	r22, Y+7	; 0x07
    1778:	78 85       	ldd	r23, Y+8	; 0x08
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	3f ef       	ldi	r19, 0xFF	; 255
    1782:	4f e7       	ldi	r20, 0x7F	; 127
    1784:	57 e4       	ldi	r21, 0x47	; 71
    1786:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    178a:	18 16       	cp	r1, r24
    178c:	4c f5       	brge	.+82     	; 0x17e0 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1790:	7c 85       	ldd	r23, Y+12	; 0x0c
    1792:	8d 85       	ldd	r24, Y+13	; 0x0d
    1794:	9e 85       	ldd	r25, Y+14	; 0x0e
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e2       	ldi	r20, 0x20	; 32
    179c:	51 e4       	ldi	r21, 0x41	; 65
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	bc 01       	movw	r22, r24
    17a8:	cd 01       	movw	r24, r26
    17aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	9e 83       	std	Y+6, r25	; 0x06
    17b4:	8d 83       	std	Y+5, r24	; 0x05
    17b6:	0f c0       	rjmp	.+30     	; 0x17d6 <LCD_sendCommand+0x3a4>
    17b8:	88 ec       	ldi	r24, 0xC8	; 200
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9c 83       	std	Y+4, r25	; 0x04
    17be:	8b 83       	std	Y+3, r24	; 0x03
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <LCD_sendCommand+0x392>
    17c8:	9c 83       	std	Y+4, r25	; 0x04
    17ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	9e 83       	std	Y+6, r25	; 0x06
    17d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	69 f7       	brne	.-38     	; 0x17b8 <LCD_sendCommand+0x386>
    17de:	14 c0       	rjmp	.+40     	; 0x1808 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e0:	6f 81       	ldd	r22, Y+7	; 0x07
    17e2:	78 85       	ldd	r23, Y+8	; 0x08
    17e4:	89 85       	ldd	r24, Y+9	; 0x09
    17e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	8d 81       	ldd	r24, Y+5	; 0x05
    17f6:	9e 81       	ldd	r25, Y+6	; 0x06
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <LCD_sendCommand+0x3ce>
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1808:	e9 96       	adiw	r28, 0x39	; 57
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	e9 97       	sbiw	r28, 0x39	; 57
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1830:	83 e0       	ldi	r24, 0x03	; 3
    1832:	66 e0       	ldi	r22, 0x06	; 6
    1834:	41 e0       	ldi	r20, 0x01	; 1
    1836:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	65 e0       	ldi	r22, 0x05	; 5
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a0 e8       	ldi	r26, 0x80	; 128
    184a:	bf e3       	ldi	r27, 0x3F	; 63
    184c:	8d ab       	std	Y+53, r24	; 0x35
    184e:	9e ab       	std	Y+54, r25	; 0x36
    1850:	af ab       	std	Y+55, r26	; 0x37
    1852:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1854:	6d a9       	ldd	r22, Y+53	; 0x35
    1856:	7e a9       	ldd	r23, Y+54	; 0x36
    1858:	8f a9       	ldd	r24, Y+55	; 0x37
    185a:	98 ad       	ldd	r25, Y+56	; 0x38
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4a ef       	ldi	r20, 0xFA	; 250
    1862:	54 e4       	ldi	r21, 0x44	; 68
    1864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	89 ab       	std	Y+49, r24	; 0x31
    186e:	9a ab       	std	Y+50, r25	; 0x32
    1870:	ab ab       	std	Y+51, r26	; 0x33
    1872:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1874:	69 a9       	ldd	r22, Y+49	; 0x31
    1876:	7a a9       	ldd	r23, Y+50	; 0x32
    1878:	8b a9       	ldd	r24, Y+51	; 0x33
    187a:	9c a9       	ldd	r25, Y+52	; 0x34
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	2c f4       	brge	.+10     	; 0x1896 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	98 ab       	std	Y+48, r25	; 0x30
    1892:	8f a7       	std	Y+47, r24	; 0x2f
    1894:	3f c0       	rjmp	.+126    	; 0x1914 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1896:	69 a9       	ldd	r22, Y+49	; 0x31
    1898:	7a a9       	ldd	r23, Y+50	; 0x32
    189a:	8b a9       	ldd	r24, Y+51	; 0x33
    189c:	9c a9       	ldd	r25, Y+52	; 0x34
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	4c f5       	brge	.+82     	; 0x1900 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	6d a9       	ldd	r22, Y+53	; 0x35
    18b0:	7e a9       	ldd	r23, Y+54	; 0x36
    18b2:	8f a9       	ldd	r24, Y+55	; 0x37
    18b4:	98 ad       	ldd	r25, Y+56	; 0x38
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	51 e4       	ldi	r21, 0x41	; 65
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	98 ab       	std	Y+48, r25	; 0x30
    18d4:	8f a7       	std	Y+47, r24	; 0x2f
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <LCD_displayCharacter+0xdc>
    18d8:	88 ec       	ldi	r24, 0xC8	; 200
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9e a7       	std	Y+46, r25	; 0x2e
    18de:	8d a7       	std	Y+45, r24	; 0x2d
    18e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    18e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <LCD_displayCharacter+0xca>
    18e8:	9e a7       	std	Y+46, r25	; 0x2e
    18ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ee:	98 a9       	ldd	r25, Y+48	; 0x30
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	98 ab       	std	Y+48, r25	; 0x30
    18f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18f8:	98 a9       	ldd	r25, Y+48	; 0x30
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	69 f7       	brne	.-38     	; 0x18d8 <LCD_displayCharacter+0xbe>
    18fe:	14 c0       	rjmp	.+40     	; 0x1928 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	69 a9       	ldd	r22, Y+49	; 0x31
    1902:	7a a9       	ldd	r23, Y+50	; 0x32
    1904:	8b a9       	ldd	r24, Y+51	; 0x33
    1906:	9c a9       	ldd	r25, Y+52	; 0x34
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	98 ab       	std	Y+48, r25	; 0x30
    1912:	8f a7       	std	Y+47, r24	; 0x2f
    1914:	8f a5       	ldd	r24, Y+47	; 0x2f
    1916:	98 a9       	ldd	r25, Y+48	; 0x30
    1918:	9c a7       	std	Y+44, r25	; 0x2c
    191a:	8b a7       	std	Y+43, r24	; 0x2b
    191c:	8b a5       	ldd	r24, Y+43	; 0x2b
    191e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD_displayCharacter+0x106>
    1924:	9c a7       	std	Y+44, r25	; 0x2c
    1926:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	64 e0       	ldi	r22, 0x04	; 4
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e8       	ldi	r26, 0x80	; 128
    1938:	bf e3       	ldi	r27, 0x3F	; 63
    193a:	8f a3       	std	Y+39, r24	; 0x27
    193c:	98 a7       	std	Y+40, r25	; 0x28
    193e:	a9 a7       	std	Y+41, r26	; 0x29
    1940:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1942:	6f a1       	ldd	r22, Y+39	; 0x27
    1944:	78 a5       	ldd	r23, Y+40	; 0x28
    1946:	89 a5       	ldd	r24, Y+41	; 0x29
    1948:	9a a5       	ldd	r25, Y+42	; 0x2a
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	4a ef       	ldi	r20, 0xFA	; 250
    1950:	54 e4       	ldi	r21, 0x44	; 68
    1952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	8b a3       	std	Y+35, r24	; 0x23
    195c:	9c a3       	std	Y+36, r25	; 0x24
    195e:	ad a3       	std	Y+37, r26	; 0x25
    1960:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1962:	6b a1       	ldd	r22, Y+35	; 0x23
    1964:	7c a1       	ldd	r23, Y+36	; 0x24
    1966:	8d a1       	ldd	r24, Y+37	; 0x25
    1968:	9e a1       	ldd	r25, Y+38	; 0x26
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e8       	ldi	r20, 0x80	; 128
    1970:	5f e3       	ldi	r21, 0x3F	; 63
    1972:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1976:	88 23       	and	r24, r24
    1978:	2c f4       	brge	.+10     	; 0x1984 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9a a3       	std	Y+34, r25	; 0x22
    1980:	89 a3       	std	Y+33, r24	; 0x21
    1982:	3f c0       	rjmp	.+126    	; 0x1a02 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1984:	6b a1       	ldd	r22, Y+35	; 0x23
    1986:	7c a1       	ldd	r23, Y+36	; 0x24
    1988:	8d a1       	ldd	r24, Y+37	; 0x25
    198a:	9e a1       	ldd	r25, Y+38	; 0x26
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	3f ef       	ldi	r19, 0xFF	; 255
    1990:	4f e7       	ldi	r20, 0x7F	; 127
    1992:	57 e4       	ldi	r21, 0x47	; 71
    1994:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1998:	18 16       	cp	r1, r24
    199a:	4c f5       	brge	.+82     	; 0x19ee <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199c:	6f a1       	ldd	r22, Y+39	; 0x27
    199e:	78 a5       	ldd	r23, Y+40	; 0x28
    19a0:	89 a5       	ldd	r24, Y+41	; 0x29
    19a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e2       	ldi	r20, 0x20	; 32
    19aa:	51 e4       	ldi	r21, 0x41	; 65
    19ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	bc 01       	movw	r22, r24
    19b6:	cd 01       	movw	r24, r26
    19b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9a a3       	std	Y+34, r25	; 0x22
    19c2:	89 a3       	std	Y+33, r24	; 0x21
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <LCD_displayCharacter+0x1ca>
    19c6:	88 ec       	ldi	r24, 0xC8	; 200
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	98 a3       	std	Y+32, r25	; 0x20
    19cc:	8f 8f       	std	Y+31, r24	; 0x1f
    19ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19d0:	98 a1       	ldd	r25, Y+32	; 0x20
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <LCD_displayCharacter+0x1b8>
    19d6:	98 a3       	std	Y+32, r25	; 0x20
    19d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19da:	89 a1       	ldd	r24, Y+33	; 0x21
    19dc:	9a a1       	ldd	r25, Y+34	; 0x22
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	9a a3       	std	Y+34, r25	; 0x22
    19e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e4:	89 a1       	ldd	r24, Y+33	; 0x21
    19e6:	9a a1       	ldd	r25, Y+34	; 0x22
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	69 f7       	brne	.-38     	; 0x19c6 <LCD_displayCharacter+0x1ac>
    19ec:	14 c0       	rjmp	.+40     	; 0x1a16 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ee:	6b a1       	ldd	r22, Y+35	; 0x23
    19f0:	7c a1       	ldd	r23, Y+36	; 0x24
    19f2:	8d a1       	ldd	r24, Y+37	; 0x25
    19f4:	9e a1       	ldd	r25, Y+38	; 0x26
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9a a3       	std	Y+34, r25	; 0x22
    1a00:	89 a3       	std	Y+33, r24	; 0x21
    1a02:	89 a1       	ldd	r24, Y+33	; 0x21
    1a04:	9a a1       	ldd	r25, Y+34	; 0x22
    1a06:	9e 8f       	std	Y+30, r25	; 0x1e
    1a08:	8d 8f       	std	Y+29, r24	; 0x1d
    1a0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <LCD_displayCharacter+0x1f4>
    1a12:	9e 8f       	std	Y+30, r25	; 0x1e
    1a14:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	69 ad       	ldd	r22, Y+57	; 0x39
    1a1a:	0e 94 6d 09 	call	0x12da	; 0x12da <GPIO_writePort>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 e8       	ldi	r26, 0x80	; 128
    1a24:	bf e3       	ldi	r27, 0x3F	; 63
    1a26:	89 8f       	std	Y+25, r24	; 0x19
    1a28:	9a 8f       	std	Y+26, r25	; 0x1a
    1a2a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	4a ef       	ldi	r20, 0xFA	; 250
    1a3c:	54 e4       	ldi	r21, 0x44	; 68
    1a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	8d 8b       	std	Y+21, r24	; 0x15
    1a48:	9e 8b       	std	Y+22, r25	; 0x16
    1a4a:	af 8b       	std	Y+23, r26	; 0x17
    1a4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a50:	7e 89       	ldd	r23, Y+22	; 0x16
    1a52:	8f 89       	ldd	r24, Y+23	; 0x17
    1a54:	98 8d       	ldd	r25, Y+24	; 0x18
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a62:	88 23       	and	r24, r24
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9c 8b       	std	Y+20, r25	; 0x14
    1a6c:	8b 8b       	std	Y+19, r24	; 0x13
    1a6e:	3f c0       	rjmp	.+126    	; 0x1aee <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1a70:	6d 89       	ldd	r22, Y+21	; 0x15
    1a72:	7e 89       	ldd	r23, Y+22	; 0x16
    1a74:	8f 89       	ldd	r24, Y+23	; 0x17
    1a76:	98 8d       	ldd	r25, Y+24	; 0x18
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	3f ef       	ldi	r19, 0xFF	; 255
    1a7c:	4f e7       	ldi	r20, 0x7F	; 127
    1a7e:	57 e4       	ldi	r21, 0x47	; 71
    1a80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a84:	18 16       	cp	r1, r24
    1a86:	4c f5       	brge	.+82     	; 0x1ada <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a88:	69 8d       	ldd	r22, Y+25	; 0x19
    1a8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e2       	ldi	r20, 0x20	; 32
    1a96:	51 e4       	ldi	r21, 0x41	; 65
    1a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	cd 01       	movw	r24, r26
    1aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9c 8b       	std	Y+20, r25	; 0x14
    1aae:	8b 8b       	std	Y+19, r24	; 0x13
    1ab0:	0f c0       	rjmp	.+30     	; 0x1ad0 <LCD_displayCharacter+0x2b6>
    1ab2:	88 ec       	ldi	r24, 0xC8	; 200
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	9a 8b       	std	Y+18, r25	; 0x12
    1ab8:	89 8b       	std	Y+17, r24	; 0x11
    1aba:	89 89       	ldd	r24, Y+17	; 0x11
    1abc:	9a 89       	ldd	r25, Y+18	; 0x12
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <LCD_displayCharacter+0x2a4>
    1ac2:	9a 8b       	std	Y+18, r25	; 0x12
    1ac4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	9c 8b       	std	Y+20, r25	; 0x14
    1ace:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	69 f7       	brne	.-38     	; 0x1ab2 <LCD_displayCharacter+0x298>
    1ad8:	14 c0       	rjmp	.+40     	; 0x1b02 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ada:	6d 89       	ldd	r22, Y+21	; 0x15
    1adc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ade:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9c 8b       	std	Y+20, r25	; 0x14
    1aec:	8b 8b       	std	Y+19, r24	; 0x13
    1aee:	8b 89       	ldd	r24, Y+19	; 0x13
    1af0:	9c 89       	ldd	r25, Y+20	; 0x14
    1af2:	98 8b       	std	Y+16, r25	; 0x10
    1af4:	8f 87       	std	Y+15, r24	; 0x0f
    1af6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af8:	98 89       	ldd	r25, Y+16	; 0x10
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <LCD_displayCharacter+0x2e0>
    1afe:	98 8b       	std	Y+16, r25	; 0x10
    1b00:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b02:	83 e0       	ldi	r24, 0x03	; 3
    1b04:	64 e0       	ldi	r22, 0x04	; 4
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	0e 94 a3 07 	call	0xf46	; 0xf46 <GPIO_writePin>
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	a0 e8       	ldi	r26, 0x80	; 128
    1b12:	bf e3       	ldi	r27, 0x3F	; 63
    1b14:	8b 87       	std	Y+11, r24	; 0x0b
    1b16:	9c 87       	std	Y+12, r25	; 0x0c
    1b18:	ad 87       	std	Y+13, r26	; 0x0d
    1b1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	4a ef       	ldi	r20, 0xFA	; 250
    1b2a:	54 e4       	ldi	r21, 0x44	; 68
    1b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	8f 83       	std	Y+7, r24	; 0x07
    1b36:	98 87       	std	Y+8, r25	; 0x08
    1b38:	a9 87       	std	Y+9, r26	; 0x09
    1b3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3e:	78 85       	ldd	r23, Y+8	; 0x08
    1b40:	89 85       	ldd	r24, Y+9	; 0x09
    1b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e8       	ldi	r20, 0x80	; 128
    1b4a:	5f e3       	ldi	r21, 0x3F	; 63
    1b4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b50:	88 23       	and	r24, r24
    1b52:	2c f4       	brge	.+10     	; 0x1b5e <LCD_displayCharacter+0x344>
		__ticks = 1;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	3f c0       	rjmp	.+126    	; 0x1bdc <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b60:	78 85       	ldd	r23, Y+8	; 0x08
    1b62:	89 85       	ldd	r24, Y+9	; 0x09
    1b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	3f ef       	ldi	r19, 0xFF	; 255
    1b6a:	4f e7       	ldi	r20, 0x7F	; 127
    1b6c:	57 e4       	ldi	r21, 0x47	; 71
    1b6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b72:	18 16       	cp	r1, r24
    1b74:	4c f5       	brge	.+82     	; 0x1bc8 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e2       	ldi	r20, 0x20	; 32
    1b84:	51 e4       	ldi	r21, 0x41	; 65
    1b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	0f c0       	rjmp	.+30     	; 0x1bbe <LCD_displayCharacter+0x3a4>
    1ba0:	88 ec       	ldi	r24, 0xC8	; 200
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9c 83       	std	Y+4, r25	; 0x04
    1ba6:	8b 83       	std	Y+3, r24	; 0x03
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_displayCharacter+0x392>
    1bb0:	9c 83       	std	Y+4, r25	; 0x04
    1bb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	69 f7       	brne	.-38     	; 0x1ba0 <LCD_displayCharacter+0x386>
    1bc6:	14 c0       	rjmp	.+40     	; 0x1bf0 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bca:	78 85       	ldd	r23, Y+8	; 0x08
    1bcc:	89 85       	ldd	r24, Y+9	; 0x09
    1bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9e 83       	std	Y+6, r25	; 0x06
    1bda:	8d 83       	std	Y+5, r24	; 0x05
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bde:	9e 81       	ldd	r25, Y+6	; 0x06
    1be0:	9a 83       	std	Y+2, r25	; 0x02
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_displayCharacter+0x3ce>
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1bf0:	e9 96       	adiw	r28, 0x39	; 57
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <LCD_displayString+0x6>
    1c08:	0f 92       	push	r0
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	9b 83       	std	Y+3, r25	; 0x03
    1c10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1c12:	19 82       	std	Y+1, r1	; 0x01
    1c14:	0e c0       	rjmp	.+28     	; 0x1c32 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c20:	fc 01       	movw	r30, r24
    1c22:	e2 0f       	add	r30, r18
    1c24:	f3 1f       	adc	r31, r19
    1c26:	80 81       	ld	r24, Z
    1c28:	0e 94 0d 0c 	call	0x181a	; 0x181a <LCD_displayCharacter>
		i++;
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	8f 5f       	subi	r24, 0xFF	; 255
    1c30:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	e2 0f       	add	r30, r18
    1c40:	f3 1f       	adc	r31, r19
    1c42:	80 81       	ld	r24, Z
    1c44:	88 23       	and	r24, r24
    1c46:	39 f7       	brne	.-50     	; 0x1c16 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <LCD_moveCursor+0x6>
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <LCD_moveCursor+0x8>
    1c5c:	0f 92       	push	r0
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	8a 83       	std	Y+2, r24	; 0x02
    1c64:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	3d 83       	std	Y+5, r19	; 0x05
    1c6e:	2c 83       	std	Y+4, r18	; 0x04
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	9d 81       	ldd	r25, Y+5	; 0x05
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	91 05       	cpc	r25, r1
    1c78:	c1 f0       	breq	.+48     	; 0x1caa <LCD_moveCursor+0x56>
    1c7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7e:	22 30       	cpi	r18, 0x02	; 2
    1c80:	31 05       	cpc	r19, r1
    1c82:	2c f4       	brge	.+10     	; 0x1c8e <LCD_moveCursor+0x3a>
    1c84:	8c 81       	ldd	r24, Y+4	; 0x04
    1c86:	9d 81       	ldd	r25, Y+5	; 0x05
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	61 f0       	breq	.+24     	; 0x1ca4 <LCD_moveCursor+0x50>
    1c8c:	19 c0       	rjmp	.+50     	; 0x1cc0 <LCD_moveCursor+0x6c>
    1c8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c90:	3d 81       	ldd	r19, Y+5	; 0x05
    1c92:	22 30       	cpi	r18, 0x02	; 2
    1c94:	31 05       	cpc	r19, r1
    1c96:	69 f0       	breq	.+26     	; 0x1cb2 <LCD_moveCursor+0x5e>
    1c98:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9c:	83 30       	cpi	r24, 0x03	; 3
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	61 f0       	breq	.+24     	; 0x1cba <LCD_moveCursor+0x66>
    1ca2:	0e c0       	rjmp	.+28     	; 0x1cc0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	0b c0       	rjmp	.+22     	; 0x1cc0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	80 5c       	subi	r24, 0xC0	; 192
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	07 c0       	rjmp	.+14     	; 0x1cc0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	80 5f       	subi	r24, 0xF0	; 240
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	03 c0       	rjmp	.+6      	; 0x1cc0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	80 5b       	subi	r24, 0xB0	; 176
    1cbe:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	80 68       	ori	r24, 0x80	; 128
    1cc4:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_sendCommand>
}
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	00 d0       	rcall	.+0      	; 0x1cde <LCD_displayStringRowColumn+0x6>
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <LCD_displayStringRowColumn+0x8>
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	6a 83       	std	Y+2, r22	; 0x02
    1ce8:	5c 83       	std	Y+4, r21	; 0x04
    1cea:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	6a 81       	ldd	r22, Y+2	; 0x02
    1cf0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <LCD_displayString>
}
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	62 97       	sbiw	r28, 0x12	; 18
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	9a 8b       	std	Y+18, r25	; 0x12
    1d20:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1d22:	89 89       	ldd	r24, Y+17	; 0x11
    1d24:	9a 89       	ldd	r25, Y+18	; 0x12
    1d26:	9e 01       	movw	r18, r28
    1d28:	2f 5f       	subi	r18, 0xFF	; 255
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	b9 01       	movw	r22, r18
    1d2e:	4a e0       	ldi	r20, 0x0A	; 10
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <itoa>
   LCD_displayString(buff); /* Display the string */
    1d36:	ce 01       	movw	r24, r28
    1d38:	01 96       	adiw	r24, 0x01	; 1
    1d3a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <LCD_displayString>
}
    1d3e:	62 96       	adiw	r28, 0x12	; 18
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_sendCommand>
}
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <StartBuzzer>:

uint8 NumberOftrys = 0;
unsigned char g_tick = 0;
#define MC2_READY 0x10

void StartBuzzer() {
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <StartBuzzer+0x6>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < 3; i++) {
    1d6e:	1a 82       	std	Y+2, r1	; 0x02
    1d70:	19 82       	std	Y+1, r1	; 0x01
    1d72:	17 c0       	rjmp	.+46     	; 0x1da2 <StartBuzzer+0x3e>
		Buzzon();
    1d74:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzon>
		timerreset();
    1d78:	0e 94 fd 12 	call	0x25fa	; 0x25fa <timerreset>
		g_tick = 0;
    1d7c:	10 92 75 00 	sts	0x0075, r1
		while (g_tick < 10) {
    1d80:	80 91 75 00 	lds	r24, 0x0075
    1d84:	8a 30       	cpi	r24, 0x0A	; 10
    1d86:	e0 f3       	brcs	.-8      	; 0x1d80 <StartBuzzer+0x1c>
		}
		Buzzoff();
    1d88:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzoff>
		g_tick = 0;
    1d8c:	10 92 75 00 	sts	0x0075, r1
		while (g_tick < 20) {
    1d90:	80 91 75 00 	lds	r24, 0x0075
    1d94:	84 31       	cpi	r24, 0x14	; 20
    1d96:	e0 f3       	brcs	.-8      	; 0x1d90 <StartBuzzer+0x2c>
uint8 NumberOftrys = 0;
unsigned char g_tick = 0;
#define MC2_READY 0x10

void StartBuzzer() {
	for (int i = 0; i < 3; i++) {
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	9a 83       	std	Y+2, r25	; 0x02
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	9a 81       	ldd	r25, Y+2	; 0x02
    1da6:	83 30       	cpi	r24, 0x03	; 3
    1da8:	91 05       	cpc	r25, r1
    1daa:	24 f3       	brlt	.-56     	; 0x1d74 <StartBuzzer+0x10>
		while (g_tick < 20) {
		}

	}

}
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <StartDoor>:

void StartDoor() {
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
	MotorM(ClockWise_Motor);
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	0e 94 e7 05 	call	0xbce	; 0xbce <MotorM>
	g_tick = 0;
    1dc4:	10 92 75 00 	sts	0x0075, r1
	timerreset();
    1dc8:	0e 94 fd 12 	call	0x25fa	; 0x25fa <timerreset>
	while (g_tick < 80) {
    1dcc:	80 91 75 00 	lds	r24, 0x0075
    1dd0:	80 35       	cpi	r24, 0x50	; 80
    1dd2:	e0 f3       	brcs	.-8      	; 0x1dcc <StartDoor+0x16>
	}
	MotorM(MotorDisabled);
    1dd4:	82 e0       	ldi	r24, 0x02	; 2
    1dd6:	0e 94 e7 05 	call	0xbce	; 0xbce <MotorM>
	g_tick = 0;
    1dda:	10 92 75 00 	sts	0x0075, r1
	timerreset();
    1dde:	0e 94 fd 12 	call	0x25fa	; 0x25fa <timerreset>
	while (g_tick < 60) {
    1de2:	80 91 75 00 	lds	r24, 0x0075
    1de6:	8c 33       	cpi	r24, 0x3C	; 60
    1de8:	e0 f3       	brcs	.-8      	; 0x1de2 <StartDoor+0x2c>
	}
	MotorM(AntiClock_Motor);
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	0e 94 e7 05 	call	0xbce	; 0xbce <MotorM>
	g_tick = 0;
    1df0:	10 92 75 00 	sts	0x0075, r1
	timerreset();
    1df4:	0e 94 fd 12 	call	0x25fa	; 0x25fa <timerreset>
	while (g_tick < 80) {
    1df8:	80 91 75 00 	lds	r24, 0x0075
    1dfc:	80 35       	cpi	r24, 0x50	; 80
    1dfe:	e0 f3       	brcs	.-8      	; 0x1df8 <StartDoor+0x42>
	}
	MotorM(MotorDisabled);
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	0e 94 e7 05 	call	0xbce	; 0xbce <MotorM>
}
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <Toggle>:

void Toggle(void) {
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1e14:	80 91 75 00 	lds	r24, 0x0075
    1e18:	8f 5f       	subi	r24, 0xFF	; 255
    1e1a:	80 93 75 00 	sts	0x0075, r24
}
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <case1>:


uint8 case1(void) {
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	6f 97       	sbiw	r28, 0x1f	; 31
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
	uint8 eepromval = 0, count = 0;
    1e3c:	1e 8a       	std	Y+22, r1	; 0x16
    1e3e:	1d 8a       	std	Y+21, r1	; 0x15
	uint8 pass[8];
	//receive the 2 passwords
	for (int i = 0; i < 8; i++) {
    1e40:	1c 8a       	std	Y+20, r1	; 0x14
    1e42:	1b 8a       	std	Y+19, r1	; 0x13
    1e44:	10 c0       	rjmp	.+32     	; 0x1e66 <case1+0x42>
		pass[i] = UART_recieveByte();
    1e46:	0b 89       	ldd	r16, Y+19	; 0x13
    1e48:	1c 89       	ldd	r17, Y+20	; 0x14
    1e4a:	0e 94 1f 14 	call	0x283e	; 0x283e <UART_recieveByte>
    1e4e:	28 2f       	mov	r18, r24
    1e50:	ce 01       	movw	r24, r28
    1e52:	47 96       	adiw	r24, 0x17	; 23
    1e54:	fc 01       	movw	r30, r24
    1e56:	e0 0f       	add	r30, r16
    1e58:	f1 1f       	adc	r31, r17
    1e5a:	20 83       	st	Z, r18

uint8 case1(void) {
	uint8 eepromval = 0, count = 0;
	uint8 pass[8];
	//receive the 2 passwords
	for (int i = 0; i < 8; i++) {
    1e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e60:	01 96       	adiw	r24, 0x01	; 1
    1e62:	9c 8b       	std	Y+20, r25	; 0x14
    1e64:	8b 8b       	std	Y+19, r24	; 0x13
    1e66:	8b 89       	ldd	r24, Y+19	; 0x13
    1e68:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6a:	88 30       	cpi	r24, 0x08	; 8
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	5c f3       	brlt	.-42     	; 0x1e46 <case1+0x22>
		pass[i] = UART_recieveByte();
	}
	//compare if both password are equal
	for (int i = 0; i < 4; i++) {
    1e70:	1a 8a       	std	Y+18, r1	; 0x12
    1e72:	19 8a       	std	Y+17, r1	; 0x11
    1e74:	1d c0       	rjmp	.+58     	; 0x1eb0 <case1+0x8c>
		if (pass[i] == pass[i + 4])
    1e76:	29 89       	ldd	r18, Y+17	; 0x11
    1e78:	3a 89       	ldd	r19, Y+18	; 0x12
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	47 96       	adiw	r24, 0x17	; 23
    1e7e:	fc 01       	movw	r30, r24
    1e80:	e2 0f       	add	r30, r18
    1e82:	f3 1f       	adc	r31, r19
    1e84:	40 81       	ld	r20, Z
    1e86:	89 89       	ldd	r24, Y+17	; 0x11
    1e88:	9a 89       	ldd	r25, Y+18	; 0x12
    1e8a:	9c 01       	movw	r18, r24
    1e8c:	2c 5f       	subi	r18, 0xFC	; 252
    1e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e90:	ce 01       	movw	r24, r28
    1e92:	47 96       	adiw	r24, 0x17	; 23
    1e94:	fc 01       	movw	r30, r24
    1e96:	e2 0f       	add	r30, r18
    1e98:	f3 1f       	adc	r31, r19
    1e9a:	80 81       	ld	r24, Z
    1e9c:	48 17       	cp	r20, r24
    1e9e:	19 f4       	brne	.+6      	; 0x1ea6 <case1+0x82>
			count++;
    1ea0:	8d 89       	ldd	r24, Y+21	; 0x15
    1ea2:	8f 5f       	subi	r24, 0xFF	; 255
    1ea4:	8d 8b       	std	Y+21, r24	; 0x15
	//receive the 2 passwords
	for (int i = 0; i < 8; i++) {
		pass[i] = UART_recieveByte();
	}
	//compare if both password are equal
	for (int i = 0; i < 4; i++) {
    1ea6:	89 89       	ldd	r24, Y+17	; 0x11
    1ea8:	9a 89       	ldd	r25, Y+18	; 0x12
    1eaa:	01 96       	adiw	r24, 0x01	; 1
    1eac:	9a 8b       	std	Y+18, r25	; 0x12
    1eae:	89 8b       	std	Y+17, r24	; 0x11
    1eb0:	89 89       	ldd	r24, Y+17	; 0x11
    1eb2:	9a 89       	ldd	r25, Y+18	; 0x12
    1eb4:	84 30       	cpi	r24, 0x04	; 4
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	f4 f2       	brlt	.-68     	; 0x1e76 <case1+0x52>
		if (pass[i] == pass[i + 4])
			count++;
	}
	//if the 4 numbers are equal save in memory
	if (count == 4) {
    1eba:	8d 89       	ldd	r24, Y+21	; 0x15
    1ebc:	84 30       	cpi	r24, 0x04	; 4
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <case1+0x9e>
    1ec0:	95 c0       	rjmp	.+298    	; 0x1fec <case1+0x1c8>
		for (int i = 0; i < 4; i++) {
    1ec2:	18 8a       	std	Y+16, r1	; 0x10
    1ec4:	1f 86       	std	Y+15, r1	; 0x0f
    1ec6:	86 c0       	rjmp	.+268    	; 0x1fd4 <case1+0x1b0>
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	a8 e4       	ldi	r26, 0x48	; 72
    1ece:	b3 e4       	ldi	r27, 0x43	; 67
    1ed0:	8b 87       	std	Y+11, r24	; 0x0b
    1ed2:	9c 87       	std	Y+12, r25	; 0x0c
    1ed4:	ad 87       	std	Y+13, r26	; 0x0d
    1ed6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	4a ef       	ldi	r20, 0xFA	; 250
    1ee6:	54 e4       	ldi	r21, 0x44	; 68
    1ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	8f 83       	std	Y+7, r24	; 0x07
    1ef2:	98 87       	std	Y+8, r25	; 0x08
    1ef4:	a9 87       	std	Y+9, r26	; 0x09
    1ef6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    1efa:	78 85       	ldd	r23, Y+8	; 0x08
    1efc:	89 85       	ldd	r24, Y+9	; 0x09
    1efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e8       	ldi	r20, 0x80	; 128
    1f06:	5f e3       	ldi	r21, 0x3F	; 63
    1f08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f0c:	88 23       	and	r24, r24
    1f0e:	2c f4       	brge	.+10     	; 0x1f1a <case1+0xf6>
		__ticks = 1;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9e 83       	std	Y+6, r25	; 0x06
    1f16:	8d 83       	std	Y+5, r24	; 0x05
    1f18:	3f c0       	rjmp	.+126    	; 0x1f98 <case1+0x174>
	else if (__tmp > 65535)
    1f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1c:	78 85       	ldd	r23, Y+8	; 0x08
    1f1e:	89 85       	ldd	r24, Y+9	; 0x09
    1f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	3f ef       	ldi	r19, 0xFF	; 255
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	57 e4       	ldi	r21, 0x47	; 71
    1f2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	4c f5       	brge	.+82     	; 0x1f84 <case1+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e2       	ldi	r20, 0x20	; 32
    1f40:	51 e4       	ldi	r21, 0x41	; 65
    1f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	bc 01       	movw	r22, r24
    1f4c:	cd 01       	movw	r24, r26
    1f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	9e 83       	std	Y+6, r25	; 0x06
    1f58:	8d 83       	std	Y+5, r24	; 0x05
    1f5a:	0f c0       	rjmp	.+30     	; 0x1f7a <case1+0x156>
    1f5c:	88 ec       	ldi	r24, 0xC8	; 200
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9c 83       	std	Y+4, r25	; 0x04
    1f62:	8b 83       	std	Y+3, r24	; 0x03
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	9c 81       	ldd	r25, Y+4	; 0x04
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <case1+0x144>
    1f6c:	9c 83       	std	Y+4, r25	; 0x04
    1f6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	9e 83       	std	Y+6, r25	; 0x06
    1f78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	69 f7       	brne	.-38     	; 0x1f5c <case1+0x138>
    1f82:	14 c0       	rjmp	.+40     	; 0x1fac <case1+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f84:	6f 81       	ldd	r22, Y+7	; 0x07
    1f86:	78 85       	ldd	r23, Y+8	; 0x08
    1f88:	89 85       	ldd	r24, Y+9	; 0x09
    1f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	9e 83       	std	Y+6, r25	; 0x06
    1f96:	8d 83       	std	Y+5, r24	; 0x05
    1f98:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9c:	9a 83       	std	Y+2, r25	; 0x02
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <case1+0x180>
    1fa8:	9a 83       	std	Y+2, r25	; 0x02
    1faa:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);
			EEPROM_writeByte(i, pass[i]);
    1fac:	2f 85       	ldd	r18, Y+15	; 0x0f
    1fae:	38 89       	ldd	r19, Y+16	; 0x10
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	47 96       	adiw	r24, 0x17	; 23
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	e2 0f       	add	r30, r18
    1fb8:	f3 1f       	adc	r31, r19
    1fba:	80 81       	ld	r24, Z
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc2:	98 89       	ldd	r25, Y+16	; 0x10
    1fc4:	b9 01       	movw	r22, r18
    1fc6:	0e 94 17 06 	call	0xc2e	; 0xc2e <EEPROM_writeByte>
		if (pass[i] == pass[i + 4])
			count++;
	}
	//if the 4 numbers are equal save in memory
	if (count == 4) {
		for (int i = 0; i < 4; i++) {
    1fca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fcc:	98 89       	ldd	r25, Y+16	; 0x10
    1fce:	01 96       	adiw	r24, 0x01	; 1
    1fd0:	98 8b       	std	Y+16, r25	; 0x10
    1fd2:	8f 87       	std	Y+15, r24	; 0x0f
    1fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd6:	98 89       	ldd	r25, Y+16	; 0x10
    1fd8:	84 30       	cpi	r24, 0x04	; 4
    1fda:	91 05       	cpc	r25, r1
    1fdc:	0c f4       	brge	.+2      	; 0x1fe0 <case1+0x1bc>
    1fde:	74 cf       	rjmp	.-280    	; 0x1ec8 <case1+0xa4>
			_delay_ms(200);
			EEPROM_writeByte(i, pass[i]);
		}

		//success return code to the main screen
		UART_sendByte(2);
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>
		return 2;
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	8f 8f       	std	Y+31, r24	; 0x1f
    1fea:	05 c0       	rjmp	.+10     	; 0x1ff6 <case1+0x1d2>
	} else {
		//failed return 1 to the main screen to repeat case 1
		UART_sendByte(1);
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>
		return 1;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ff6:	8f 8d       	ldd	r24, Y+31	; 0x1f
	}
}
    1ff8:	6f 96       	adiw	r28, 0x1f	; 31
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	08 95       	ret

0000200e <case2>:

//process input and return it to change the case
uint8 case2(void) {
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
	return  UART_recieveByte();
    2016:	0e 94 1f 14 	call	0x283e	; 0x283e <UART_recieveByte>
}
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <case3>:

uint8 case3(void) {
    2020:	0f 93       	push	r16
    2022:	1f 93       	push	r17
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	6f 97       	sbiw	r28, 0x1f	; 31
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61

	uint8 error = 0;
    2038:	1d 8a       	std	Y+21, r1	; 0x15
	uint8 eepromval = 0;
    203a:	1e 8a       	std	Y+22, r1	; 0x16
	uint8 pass[8];

	//fetch data from the MCU1
	for (int i = 0; i < 4; i++) {
    203c:	1c 8a       	std	Y+20, r1	; 0x14
    203e:	1b 8a       	std	Y+19, r1	; 0x13
    2040:	10 c0       	rjmp	.+32     	; 0x2062 <case3+0x42>
		pass[i] = UART_recieveByte();
    2042:	0b 89       	ldd	r16, Y+19	; 0x13
    2044:	1c 89       	ldd	r17, Y+20	; 0x14
    2046:	0e 94 1f 14 	call	0x283e	; 0x283e <UART_recieveByte>
    204a:	28 2f       	mov	r18, r24
    204c:	ce 01       	movw	r24, r28
    204e:	47 96       	adiw	r24, 0x17	; 23
    2050:	fc 01       	movw	r30, r24
    2052:	e0 0f       	add	r30, r16
    2054:	f1 1f       	adc	r31, r17
    2056:	20 83       	st	Z, r18
	uint8 error = 0;
	uint8 eepromval = 0;
	uint8 pass[8];

	//fetch data from the MCU1
	for (int i = 0; i < 4; i++) {
    2058:	8b 89       	ldd	r24, Y+19	; 0x13
    205a:	9c 89       	ldd	r25, Y+20	; 0x14
    205c:	01 96       	adiw	r24, 0x01	; 1
    205e:	9c 8b       	std	Y+20, r25	; 0x14
    2060:	8b 8b       	std	Y+19, r24	; 0x13
    2062:	8b 89       	ldd	r24, Y+19	; 0x13
    2064:	9c 89       	ldd	r25, Y+20	; 0x14
    2066:	84 30       	cpi	r24, 0x04	; 4
    2068:	91 05       	cpc	r25, r1
    206a:	5c f3       	brlt	.-42     	; 0x2042 <case3+0x22>
		pass[i] = UART_recieveByte();
	}
	//fetch saved data
	for (int i = 0; i < 4; i++) {
    206c:	1a 8a       	std	Y+18, r1	; 0x12
    206e:	19 8a       	std	Y+17, r1	; 0x11
    2070:	8b c0       	rjmp	.+278    	; 0x2188 <case3+0x168>
		EEPROM_readByte(i, &eepromval);
    2072:	89 89       	ldd	r24, Y+17	; 0x11
    2074:	9a 89       	ldd	r25, Y+18	; 0x12
    2076:	9e 01       	movw	r18, r28
    2078:	2a 5e       	subi	r18, 0xEA	; 234
    207a:	3f 4f       	sbci	r19, 0xFF	; 255
    207c:	b9 01       	movw	r22, r18
    207e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <EEPROM_readByte>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	a8 ec       	ldi	r26, 0xC8	; 200
    2088:	b2 e4       	ldi	r27, 0x42	; 66
    208a:	8b 87       	std	Y+11, r24	; 0x0b
    208c:	9c 87       	std	Y+12, r25	; 0x0c
    208e:	ad 87       	std	Y+13, r26	; 0x0d
    2090:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	6b 85       	ldd	r22, Y+11	; 0x0b
    2094:	7c 85       	ldd	r23, Y+12	; 0x0c
    2096:	8d 85       	ldd	r24, Y+13	; 0x0d
    2098:	9e 85       	ldd	r25, Y+14	; 0x0e
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a ef       	ldi	r20, 0xFA	; 250
    20a0:	54 e4       	ldi	r21, 0x44	; 68
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8f 83       	std	Y+7, r24	; 0x07
    20ac:	98 87       	std	Y+8, r25	; 0x08
    20ae:	a9 87       	std	Y+9, r26	; 0x09
    20b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b2:	6f 81       	ldd	r22, Y+7	; 0x07
    20b4:	78 85       	ldd	r23, Y+8	; 0x08
    20b6:	89 85       	ldd	r24, Y+9	; 0x09
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <case3+0xb4>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <case3+0x132>
	else if (__tmp > 65535)
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <case3+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	8d 83       	std	Y+5, r24	; 0x05
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <case3+0x114>
    2116:	88 ec       	ldi	r24, 0xC8	; 200
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <case3+0x102>
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	8d 81       	ldd	r24, Y+5	; 0x05
    212c:	9e 81       	ldd	r25, Y+6	; 0x06
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
    2136:	9e 81       	ldd	r25, Y+6	; 0x06
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <case3+0xf6>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <case3+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	6f 81       	ldd	r22, Y+7	; 0x07
    2140:	78 85       	ldd	r23, Y+8	; 0x08
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <case3+0x13e>
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		pass[i+4] = eepromval;
    2166:	89 89       	ldd	r24, Y+17	; 0x11
    2168:	9a 89       	ldd	r25, Y+18	; 0x12
    216a:	9c 01       	movw	r18, r24
    216c:	2c 5f       	subi	r18, 0xFC	; 252
    216e:	3f 4f       	sbci	r19, 0xFF	; 255
    2170:	4e 89       	ldd	r20, Y+22	; 0x16
    2172:	ce 01       	movw	r24, r28
    2174:	47 96       	adiw	r24, 0x17	; 23
    2176:	fc 01       	movw	r30, r24
    2178:	e2 0f       	add	r30, r18
    217a:	f3 1f       	adc	r31, r19
    217c:	40 83       	st	Z, r20
	//fetch data from the MCU1
	for (int i = 0; i < 4; i++) {
		pass[i] = UART_recieveByte();
	}
	//fetch saved data
	for (int i = 0; i < 4; i++) {
    217e:	89 89       	ldd	r24, Y+17	; 0x11
    2180:	9a 89       	ldd	r25, Y+18	; 0x12
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	9a 8b       	std	Y+18, r25	; 0x12
    2186:	89 8b       	std	Y+17, r24	; 0x11
    2188:	89 89       	ldd	r24, Y+17	; 0x11
    218a:	9a 89       	ldd	r25, Y+18	; 0x12
    218c:	84 30       	cpi	r24, 0x04	; 4
    218e:	91 05       	cpc	r25, r1
    2190:	0c f4       	brge	.+2      	; 0x2194 <case3+0x174>
    2192:	6f cf       	rjmp	.-290    	; 0x2072 <case3+0x52>
		EEPROM_readByte(i, &eepromval);
		_delay_ms(100);
		pass[i+4] = eepromval;
	}
	//compate saved data and fetched data from the MCU1
	for (int i = 0; i < 4; i++) {
    2194:	18 8a       	std	Y+16, r1	; 0x10
    2196:	1f 86       	std	Y+15, r1	; 0x0f
    2198:	1d c0       	rjmp	.+58     	; 0x21d4 <case3+0x1b4>
		if (pass[i] == pass[i + 4]) {
    219a:	2f 85       	ldd	r18, Y+15	; 0x0f
    219c:	38 89       	ldd	r19, Y+16	; 0x10
    219e:	ce 01       	movw	r24, r28
    21a0:	47 96       	adiw	r24, 0x17	; 23
    21a2:	fc 01       	movw	r30, r24
    21a4:	e2 0f       	add	r30, r18
    21a6:	f3 1f       	adc	r31, r19
    21a8:	40 81       	ld	r20, Z
    21aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ac:	98 89       	ldd	r25, Y+16	; 0x10
    21ae:	9c 01       	movw	r18, r24
    21b0:	2c 5f       	subi	r18, 0xFC	; 252
    21b2:	3f 4f       	sbci	r19, 0xFF	; 255
    21b4:	ce 01       	movw	r24, r28
    21b6:	47 96       	adiw	r24, 0x17	; 23
    21b8:	fc 01       	movw	r30, r24
    21ba:	e2 0f       	add	r30, r18
    21bc:	f3 1f       	adc	r31, r19
    21be:	80 81       	ld	r24, Z
    21c0:	48 17       	cp	r20, r24
    21c2:	19 f0       	breq	.+6      	; 0x21ca <case3+0x1aa>

		} else {
			error++;
    21c4:	8d 89       	ldd	r24, Y+21	; 0x15
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
    21c8:	8d 8b       	std	Y+21, r24	; 0x15
		EEPROM_readByte(i, &eepromval);
		_delay_ms(100);
		pass[i+4] = eepromval;
	}
	//compate saved data and fetched data from the MCU1
	for (int i = 0; i < 4; i++) {
    21ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    21cc:	98 89       	ldd	r25, Y+16	; 0x10
    21ce:	01 96       	adiw	r24, 0x01	; 1
    21d0:	98 8b       	std	Y+16, r25	; 0x10
    21d2:	8f 87       	std	Y+15, r24	; 0x0f
    21d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d6:	98 89       	ldd	r25, Y+16	; 0x10
    21d8:	84 30       	cpi	r24, 0x04	; 4
    21da:	91 05       	cpc	r25, r1
    21dc:	f4 f2       	brlt	.-68     	; 0x219a <case3+0x17a>
		} else {
			error++;
		}
	}
	//first case user input the right password
	if (error == 0) {
    21de:	8d 89       	ldd	r24, Y+21	; 0x15
    21e0:	88 23       	and	r24, r24
    21e2:	51 f4       	brne	.+20     	; 0x21f8 <case3+0x1d8>
		NumberOftrys = 0;
    21e4:	10 92 74 00 	sts	0x0074, r1
		StartDoor();
    21e8:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <StartDoor>
		UART_sendByte(2);
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>
		return 2;
    21f2:	82 e0       	ldi	r24, 0x02	; 2
    21f4:	8f 8f       	std	Y+31, r24	; 0x1f
    21f6:	16 c0       	rjmp	.+44     	; 0x2224 <case3+0x204>
	}
	//second case user input the wrong input
	else {
		NumberOftrys++;
    21f8:	80 91 74 00 	lds	r24, 0x0074
    21fc:	8f 5f       	subi	r24, 0xFF	; 255
    21fe:	80 93 74 00 	sts	0x0074, r24
		if (NumberOftrys < 3)
    2202:	80 91 74 00 	lds	r24, 0x0074
    2206:	83 30       	cpi	r24, 0x03	; 3
    2208:	30 f4       	brcc	.+12     	; 0x2216 <case3+0x1f6>
		{

			UART_sendByte(3);
    220a:	83 e0       	ldi	r24, 0x03	; 3
    220c:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>
			return 3;
    2210:	83 e0       	ldi	r24, 0x03	; 3
    2212:	8f 8f       	std	Y+31, r24	; 0x1f
    2214:	07 c0       	rjmp	.+14     	; 0x2224 <case3+0x204>
		} else {
			StartBuzzer();
    2216:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <StartBuzzer>
			UART_sendByte(5);
    221a:	85 e0       	ldi	r24, 0x05	; 5
    221c:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>

			return 5;
    2220:	85 e0       	ldi	r24, 0x05	; 5
    2222:	8f 8f       	std	Y+31, r24	; 0x1f
    2224:	8f 8d       	ldd	r24, Y+31	; 0x1f
		}
	}

}
    2226:	6f 96       	adiw	r28, 0x1f	; 31
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	08 95       	ret

0000223c <case4>:
uint8 case4(void) {
    223c:	0f 93       	push	r16
    223e:	1f 93       	push	r17
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	61 97       	sbiw	r28, 0x11	; 17
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
	uint8 error = 0;
    2254:	1f 82       	std	Y+7, r1	; 0x07
	uint8 eepromval = 0;
    2256:	18 86       	std	Y+8, r1	; 0x08
	uint8 pass[8];
	for (int i = 0; i < 4; i++) {
    2258:	1e 82       	std	Y+6, r1	; 0x06
    225a:	1d 82       	std	Y+5, r1	; 0x05
    225c:	10 c0       	rjmp	.+32     	; 0x227e <case4+0x42>
		pass[i] = UART_recieveByte();
    225e:	0d 81       	ldd	r16, Y+5	; 0x05
    2260:	1e 81       	ldd	r17, Y+6	; 0x06
    2262:	0e 94 1f 14 	call	0x283e	; 0x283e <UART_recieveByte>
    2266:	28 2f       	mov	r18, r24
    2268:	ce 01       	movw	r24, r28
    226a:	09 96       	adiw	r24, 0x09	; 9
    226c:	fc 01       	movw	r30, r24
    226e:	e0 0f       	add	r30, r16
    2270:	f1 1f       	adc	r31, r17
    2272:	20 83       	st	Z, r18
}
uint8 case4(void) {
	uint8 error = 0;
	uint8 eepromval = 0;
	uint8 pass[8];
	for (int i = 0; i < 4; i++) {
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	9e 81       	ldd	r25, Y+6	; 0x06
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	9e 83       	std	Y+6, r25	; 0x06
    227c:	8d 83       	std	Y+5, r24	; 0x05
    227e:	8d 81       	ldd	r24, Y+5	; 0x05
    2280:	9e 81       	ldd	r25, Y+6	; 0x06
    2282:	84 30       	cpi	r24, 0x04	; 4
    2284:	91 05       	cpc	r25, r1
    2286:	5c f3       	brlt	.-42     	; 0x225e <case4+0x22>
		pass[i] = UART_recieveByte();
	}
	for (int i = 0; i < 4; i++) {
    2288:	1c 82       	std	Y+4, r1	; 0x04
    228a:	1b 82       	std	Y+3, r1	; 0x03
    228c:	19 c0       	rjmp	.+50     	; 0x22c0 <case4+0x84>
		EEPROM_readByte(i, &eepromval);
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	9c 81       	ldd	r25, Y+4	; 0x04
    2292:	9e 01       	movw	r18, r28
    2294:	28 5f       	subi	r18, 0xF8	; 248
    2296:	3f 4f       	sbci	r19, 0xFF	; 255
    2298:	b9 01       	movw	r22, r18
    229a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <EEPROM_readByte>
		pass[i+4] = eepromval;
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	9c 81       	ldd	r25, Y+4	; 0x04
    22a2:	9c 01       	movw	r18, r24
    22a4:	2c 5f       	subi	r18, 0xFC	; 252
    22a6:	3f 4f       	sbci	r19, 0xFF	; 255
    22a8:	48 85       	ldd	r20, Y+8	; 0x08
    22aa:	ce 01       	movw	r24, r28
    22ac:	09 96       	adiw	r24, 0x09	; 9
    22ae:	fc 01       	movw	r30, r24
    22b0:	e2 0f       	add	r30, r18
    22b2:	f3 1f       	adc	r31, r19
    22b4:	40 83       	st	Z, r20
	uint8 eepromval = 0;
	uint8 pass[8];
	for (int i = 0; i < 4; i++) {
		pass[i] = UART_recieveByte();
	}
	for (int i = 0; i < 4; i++) {
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ba:	01 96       	adiw	r24, 0x01	; 1
    22bc:	9c 83       	std	Y+4, r25	; 0x04
    22be:	8b 83       	std	Y+3, r24	; 0x03
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	84 30       	cpi	r24, 0x04	; 4
    22c6:	91 05       	cpc	r25, r1
    22c8:	14 f3       	brlt	.-60     	; 0x228e <case4+0x52>
		EEPROM_readByte(i, &eepromval);
		pass[i+4] = eepromval;
	}
	for (int i = 0; i < 4; i++) {
    22ca:	1a 82       	std	Y+2, r1	; 0x02
    22cc:	19 82       	std	Y+1, r1	; 0x01
    22ce:	1d c0       	rjmp	.+58     	; 0x230a <case4+0xce>
		if (pass[i] == pass[i + 4]) {
    22d0:	29 81       	ldd	r18, Y+1	; 0x01
    22d2:	3a 81       	ldd	r19, Y+2	; 0x02
    22d4:	ce 01       	movw	r24, r28
    22d6:	09 96       	adiw	r24, 0x09	; 9
    22d8:	fc 01       	movw	r30, r24
    22da:	e2 0f       	add	r30, r18
    22dc:	f3 1f       	adc	r31, r19
    22de:	40 81       	ld	r20, Z
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	9a 81       	ldd	r25, Y+2	; 0x02
    22e4:	9c 01       	movw	r18, r24
    22e6:	2c 5f       	subi	r18, 0xFC	; 252
    22e8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ea:	ce 01       	movw	r24, r28
    22ec:	09 96       	adiw	r24, 0x09	; 9
    22ee:	fc 01       	movw	r30, r24
    22f0:	e2 0f       	add	r30, r18
    22f2:	f3 1f       	adc	r31, r19
    22f4:	80 81       	ld	r24, Z
    22f6:	48 17       	cp	r20, r24
    22f8:	19 f0       	breq	.+6      	; 0x2300 <case4+0xc4>

		} else {
			error++;
    22fa:	8f 81       	ldd	r24, Y+7	; 0x07
    22fc:	8f 5f       	subi	r24, 0xFF	; 255
    22fe:	8f 83       	std	Y+7, r24	; 0x07
	}
	for (int i = 0; i < 4; i++) {
		EEPROM_readByte(i, &eepromval);
		pass[i+4] = eepromval;
	}
	for (int i = 0; i < 4; i++) {
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	9a 81       	ldd	r25, Y+2	; 0x02
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	9a 83       	std	Y+2, r25	; 0x02
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	9a 81       	ldd	r25, Y+2	; 0x02
    230e:	84 30       	cpi	r24, 0x04	; 4
    2310:	91 05       	cpc	r25, r1
    2312:	f4 f2       	brlt	.-68     	; 0x22d0 <case4+0x94>

		} else {
			error++;
		}
	}
	if (error == 0) {
    2314:	8f 81       	ldd	r24, Y+7	; 0x07
    2316:	88 23       	and	r24, r24
    2318:	41 f4       	brne	.+16     	; 0x232a <case4+0xee>
		NumberOftrys = 0;
    231a:	10 92 74 00 	sts	0x0074, r1
		UART_sendByte(1);
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>
		return 1;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	89 8b       	std	Y+17, r24	; 0x11
    2328:	16 c0       	rjmp	.+44     	; 0x2356 <case4+0x11a>
	} else {
		NumberOftrys++;
    232a:	80 91 74 00 	lds	r24, 0x0074
    232e:	8f 5f       	subi	r24, 0xFF	; 255
    2330:	80 93 74 00 	sts	0x0074, r24
		if (NumberOftrys < 3) {
    2334:	80 91 74 00 	lds	r24, 0x0074
    2338:	83 30       	cpi	r24, 0x03	; 3
    233a:	30 f4       	brcc	.+12     	; 0x2348 <case4+0x10c>
			UART_sendByte(4);
    233c:	84 e0       	ldi	r24, 0x04	; 4
    233e:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>

			return 4;
    2342:	84 e0       	ldi	r24, 0x04	; 4
    2344:	89 8b       	std	Y+17, r24	; 0x11
    2346:	07 c0       	rjmp	.+14     	; 0x2356 <case4+0x11a>
		} else {
			StartBuzzer();
    2348:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <StartBuzzer>
			UART_sendByte(5);
    234c:	85 e0       	ldi	r24, 0x05	; 5
    234e:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>

			return 5;
    2352:	85 e0       	ldi	r24, 0x05	; 5
    2354:	89 8b       	std	Y+17, r24	; 0x11
    2356:	89 89       	ldd	r24, Y+17	; 0x11
		}
	}
}
    2358:	61 96       	adiw	r28, 0x11	; 17
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	1f 91       	pop	r17
    236a:	0f 91       	pop	r16
    236c:	08 95       	ret

0000236e <case5>:
uint8 case5(void) {
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
	NumberOftrys = 0;
    2376:	10 92 74 00 	sts	0x0074, r1
	return 2;
    237a:	82 e0       	ldi	r24, 0x02	; 2
}
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <main>:


int main(void) {
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
    238a:	66 97       	sbiw	r28, 0x16	; 22
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	de bf       	out	0x3e, r29	; 62
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	cd bf       	out	0x3d, r28	; 61

	SREG |= (1 << 7);
    2396:	af e5       	ldi	r26, 0x5F	; 95
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	ef e5       	ldi	r30, 0x5F	; 95
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	80 68       	ori	r24, 0x80	; 128
    23a2:	8c 93       	st	X, r24

	config_uart config = { B_9600, EigthBits, disabled_parity, stop_one };
    23a4:	ce 01       	movw	r24, r28
    23a6:	02 96       	adiw	r24, 0x02	; 2
    23a8:	9e 87       	std	Y+14, r25	; 0x0e
    23aa:	8d 87       	std	Y+13, r24	; 0x0d
    23ac:	ee e6       	ldi	r30, 0x6E	; 110
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	f8 8b       	std	Y+16, r31	; 0x10
    23b2:	ef 87       	std	Y+15, r30	; 0x0f
    23b4:	f5 e0       	ldi	r31, 0x05	; 5
    23b6:	f9 8b       	std	Y+17, r31	; 0x11
    23b8:	ef 85       	ldd	r30, Y+15	; 0x0f
    23ba:	f8 89       	ldd	r31, Y+16	; 0x10
    23bc:	00 80       	ld	r0, Z
    23be:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c0:	98 89       	ldd	r25, Y+16	; 0x10
    23c2:	01 96       	adiw	r24, 0x01	; 1
    23c4:	98 8b       	std	Y+16, r25	; 0x10
    23c6:	8f 87       	std	Y+15, r24	; 0x0f
    23c8:	ed 85       	ldd	r30, Y+13	; 0x0d
    23ca:	fe 85       	ldd	r31, Y+14	; 0x0e
    23cc:	00 82       	st	Z, r0
    23ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	9e 87       	std	Y+14, r25	; 0x0e
    23d6:	8d 87       	std	Y+13, r24	; 0x0d
    23d8:	99 89       	ldd	r25, Y+17	; 0x11
    23da:	91 50       	subi	r25, 0x01	; 1
    23dc:	99 8b       	std	Y+17, r25	; 0x11
    23de:	e9 89       	ldd	r30, Y+17	; 0x11
    23e0:	ee 23       	and	r30, r30
    23e2:	51 f7       	brne	.-44     	; 0x23b8 <main+0x36>

	config_timer config_timer = { 0, 0, Timer_PORTNormal, Timer_Normalmode,
			timerF_CPU1024, TimerOverflowInt };
    23e4:	ce 01       	movw	r24, r28
    23e6:	07 96       	adiw	r24, 0x07	; 7
    23e8:	9b 8b       	std	Y+19, r25	; 0x13
    23ea:	8a 8b       	std	Y+18, r24	; 0x12
    23ec:	e8 e6       	ldi	r30, 0x68	; 104
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	fd 8b       	std	Y+21, r31	; 0x15
    23f2:	ec 8b       	std	Y+20, r30	; 0x14
    23f4:	f6 e0       	ldi	r31, 0x06	; 6
    23f6:	fe 8b       	std	Y+22, r31	; 0x16
    23f8:	ec 89       	ldd	r30, Y+20	; 0x14
    23fa:	fd 89       	ldd	r31, Y+21	; 0x15
    23fc:	00 80       	ld	r0, Z
    23fe:	8c 89       	ldd	r24, Y+20	; 0x14
    2400:	9d 89       	ldd	r25, Y+21	; 0x15
    2402:	01 96       	adiw	r24, 0x01	; 1
    2404:	9d 8b       	std	Y+21, r25	; 0x15
    2406:	8c 8b       	std	Y+20, r24	; 0x14
    2408:	ea 89       	ldd	r30, Y+18	; 0x12
    240a:	fb 89       	ldd	r31, Y+19	; 0x13
    240c:	00 82       	st	Z, r0
    240e:	8a 89       	ldd	r24, Y+18	; 0x12
    2410:	9b 89       	ldd	r25, Y+19	; 0x13
    2412:	01 96       	adiw	r24, 0x01	; 1
    2414:	9b 8b       	std	Y+19, r25	; 0x13
    2416:	8a 8b       	std	Y+18, r24	; 0x12
    2418:	9e 89       	ldd	r25, Y+22	; 0x16
    241a:	91 50       	subi	r25, 0x01	; 1
    241c:	9e 8b       	std	Y+22, r25	; 0x16
    241e:	ee 89       	ldd	r30, Y+22	; 0x16
    2420:	ee 23       	and	r30, r30
    2422:	51 f7       	brne	.-44     	; 0x23f8 <main+0x76>

	TWI_init();
    2424:	0e 94 19 13 	call	0x2632	; 0x2632 <TWI_init>

	LCD_init();
    2428:	0e 94 f6 09 	call	0x13ec	; 0x13ec <LCD_init>

	Buzzinit();
    242c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzinit>

	timerinit(&config_timer);
    2430:	ce 01       	movw	r24, r28
    2432:	07 96       	adiw	r24, 0x07	; 7
    2434:	0e 94 b5 12 	call	0x256a	; 0x256a <timerinit>

	UART_init(&config);
    2438:	ce 01       	movw	r24, r28
    243a:	02 96       	adiw	r24, 0x02	; 2
    243c:	0e 94 aa 13 	call	0x2754	; 0x2754 <UART_init>

	MotorInit();
    2440:	0e 94 cc 05 	call	0xb98	; 0xb98 <MotorInit>

	TIMER0_setCallback(Toggle);
    2444:	86 e0       	ldi	r24, 0x06	; 6
    2446:	9f e0       	ldi	r25, 0x0F	; 15
    2448:	0e 94 07 13 	call	0x260e	; 0x260e <TIMER0_setCallback>

	GPIO_setupPinDirection(PORTA_ID, PIN0_ID, PIN_OUTPUT);
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	60 e0       	ldi	r22, 0x00	; 0
    2450:	41 e0       	ldi	r20, 0x01	; 1
    2452:	0e 94 b8 06 	call	0xd70	; 0xd70 <GPIO_setupPinDirection>
	UART_sendByte(MC2_READY);
    2456:	80 e1       	ldi	r24, 0x10	; 16
    2458:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>

	uint8 CASE = 1;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	89 83       	std	Y+1, r24	; 0x01
	while (1) {
		//case 1
		if (CASE == 1)
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	81 30       	cpi	r24, 0x01	; 1
    2464:	19 f4       	brne	.+6      	; 0x246c <main+0xea>
			CASE = case1();
    2466:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <case1>
    246a:	89 83       	std	Y+1, r24	; 0x01
		//case 2
		if (CASE == 2)
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	82 30       	cpi	r24, 0x02	; 2
    2470:	19 f4       	brne	.+6      	; 0x2478 <main+0xf6>
			CASE = case2();
    2472:	0e 94 07 10 	call	0x200e	; 0x200e <case2>
    2476:	89 83       	std	Y+1, r24	; 0x01
		//case 3
		if (CASE == 3)
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	83 30       	cpi	r24, 0x03	; 3
    247c:	19 f4       	brne	.+6      	; 0x2484 <main+0x102>
			CASE = case3();
    247e:	0e 94 10 10 	call	0x2020	; 0x2020 <case3>
    2482:	89 83       	std	Y+1, r24	; 0x01
		//case 4
		if (CASE == 4)
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	84 30       	cpi	r24, 0x04	; 4
    2488:	19 f4       	brne	.+6      	; 0x2490 <main+0x10e>
			CASE = case4();
    248a:	0e 94 1e 11 	call	0x223c	; 0x223c <case4>
    248e:	89 83       	std	Y+1, r24	; 0x01
		//case 5
		if (CASE == 5)
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	85 30       	cpi	r24, 0x05	; 5
    2494:	29 f7       	brne	.-54     	; 0x2460 <main+0xde>
			CASE = case5();
    2496:	0e 94 b7 11 	call	0x236e	; 0x236e <case5>
    249a:	89 83       	std	Y+1, r24	; 0x01
    249c:	e1 cf       	rjmp	.-62     	; 0x2460 <main+0xde>

0000249e <__vector_9>:


void (*g_TIMER0_callBackPtr)(void);


ISR(TIMER0_OVF_vect) {
    249e:	1f 92       	push	r1
    24a0:	0f 92       	push	r0
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	0f 92       	push	r0
    24a6:	11 24       	eor	r1, r1
    24a8:	2f 93       	push	r18
    24aa:	3f 93       	push	r19
    24ac:	4f 93       	push	r20
    24ae:	5f 93       	push	r21
    24b0:	6f 93       	push	r22
    24b2:	7f 93       	push	r23
    24b4:	8f 93       	push	r24
    24b6:	9f 93       	push	r25
    24b8:	af 93       	push	r26
    24ba:	bf 93       	push	r27
    24bc:	ef 93       	push	r30
    24be:	ff 93       	push	r31
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
	if (g_TIMER0_callBackPtr!=NULL_PTR)
    24c8:	80 91 76 00 	lds	r24, 0x0076
    24cc:	90 91 77 00 	lds	r25, 0x0077
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	29 f0       	breq	.+10     	; 0x24de <__vector_9+0x40>
	(*g_TIMER0_callBackPtr)();
    24d4:	e0 91 76 00 	lds	r30, 0x0076
    24d8:	f0 91 77 00 	lds	r31, 0x0077
    24dc:	09 95       	icall
}
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	ff 91       	pop	r31
    24e4:	ef 91       	pop	r30
    24e6:	bf 91       	pop	r27
    24e8:	af 91       	pop	r26
    24ea:	9f 91       	pop	r25
    24ec:	8f 91       	pop	r24
    24ee:	7f 91       	pop	r23
    24f0:	6f 91       	pop	r22
    24f2:	5f 91       	pop	r21
    24f4:	4f 91       	pop	r20
    24f6:	3f 91       	pop	r19
    24f8:	2f 91       	pop	r18
    24fa:	0f 90       	pop	r0
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	0f 90       	pop	r0
    2500:	1f 90       	pop	r1
    2502:	18 95       	reti

00002504 <__vector_19>:

/* Timer0 compare match ISR */
ISR(TIMER0_COMP_vect) {
    2504:	1f 92       	push	r1
    2506:	0f 92       	push	r0
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	0f 92       	push	r0
    250c:	11 24       	eor	r1, r1
    250e:	2f 93       	push	r18
    2510:	3f 93       	push	r19
    2512:	4f 93       	push	r20
    2514:	5f 93       	push	r21
    2516:	6f 93       	push	r22
    2518:	7f 93       	push	r23
    251a:	8f 93       	push	r24
    251c:	9f 93       	push	r25
    251e:	af 93       	push	r26
    2520:	bf 93       	push	r27
    2522:	ef 93       	push	r30
    2524:	ff 93       	push	r31
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
	if (g_TIMER0_callBackPtr!=NULL_PTR)
    252e:	80 91 76 00 	lds	r24, 0x0076
    2532:	90 91 77 00 	lds	r25, 0x0077
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	29 f0       	breq	.+10     	; 0x2544 <__vector_19+0x40>
	(*g_TIMER0_callBackPtr)();
    253a:	e0 91 76 00 	lds	r30, 0x0076
    253e:	f0 91 77 00 	lds	r31, 0x0077
    2542:	09 95       	icall
}
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	ff 91       	pop	r31
    254a:	ef 91       	pop	r30
    254c:	bf 91       	pop	r27
    254e:	af 91       	pop	r26
    2550:	9f 91       	pop	r25
    2552:	8f 91       	pop	r24
    2554:	7f 91       	pop	r23
    2556:	6f 91       	pop	r22
    2558:	5f 91       	pop	r21
    255a:	4f 91       	pop	r20
    255c:	3f 91       	pop	r19
    255e:	2f 91       	pop	r18
    2560:	0f 90       	pop	r0
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	0f 90       	pop	r0
    2566:	1f 90       	pop	r1
    2568:	18 95       	reti

0000256a <timerinit>:



void timerinit(const config_timer *config) {
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	00 d0       	rcall	.+0      	; 0x2570 <timerinit+0x6>
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	9a 83       	std	Y+2, r25	; 0x02
    2576:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = config->Timer_initVal;
    2578:	a2 e5       	ldi	r26, 0x52	; 82
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	e9 81       	ldd	r30, Y+1	; 0x01
    257e:	fa 81       	ldd	r31, Y+2	; 0x02
    2580:	80 81       	ld	r24, Z
    2582:	8c 93       	st	X, r24

	OCR0=config->Compare_value;
    2584:	ac e5       	ldi	r26, 0x5C	; 92
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e9 81       	ldd	r30, Y+1	; 0x01
    258a:	fa 81       	ldd	r31, Y+2	; 0x02
    258c:	81 81       	ldd	r24, Z+1	; 0x01
    258e:	8c 93       	st	X, r24
	TCCR0 =(1<<FOC0) | config->Timer_mode | config->Timer_scale |config->Port ;
    2590:	a3 e5       	ldi	r26, 0x53	; 83
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e9 81       	ldd	r30, Y+1	; 0x01
    2596:	fa 81       	ldd	r31, Y+2	; 0x02
    2598:	93 81       	ldd	r25, Z+3	; 0x03
    259a:	e9 81       	ldd	r30, Y+1	; 0x01
    259c:	fa 81       	ldd	r31, Y+2	; 0x02
    259e:	84 81       	ldd	r24, Z+4	; 0x04
    25a0:	98 2b       	or	r25, r24
    25a2:	e9 81       	ldd	r30, Y+1	; 0x01
    25a4:	fa 81       	ldd	r31, Y+2	; 0x02
    25a6:	82 81       	ldd	r24, Z+2	; 0x02
    25a8:	89 2b       	or	r24, r25
    25aa:	80 68       	ori	r24, 0x80	; 128
    25ac:	8c 93       	st	X, r24
	TIMSK |= config->intmask;
    25ae:	a9 e5       	ldi	r26, 0x59	; 89
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e9 e5       	ldi	r30, 0x59	; 89
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	90 81       	ld	r25, Z
    25b8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ba:	fa 81       	ldd	r31, Y+2	; 0x02
    25bc:	85 81       	ldd	r24, Z+5	; 0x05
    25be:	89 2b       	or	r24, r25
    25c0:	8c 93       	st	X, r24





}
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <timerDinit>:

void timerDinit(void) {
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62

	TCNT0 = 0;
    25d4:	e2 e5       	ldi	r30, 0x52	; 82
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	10 82       	st	Z, r1
	TIMSK &= 0xFC;
    25da:	a9 e5       	ldi	r26, 0x59	; 89
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e9 e5       	ldi	r30, 0x59	; 89
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	8c 7f       	andi	r24, 0xFC	; 252
    25e6:	8c 93       	st	X, r24
	OCR0 = 0;
    25e8:	ec e5       	ldi	r30, 0x5C	; 92
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	10 82       	st	Z, r1
	TCCR0 = 0;
    25ee:	e3 e5       	ldi	r30, 0x53	; 83
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	10 82       	st	Z, r1
}
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <timerreset>:

void timerreset(void)
{
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    2602:	e2 e5       	ldi	r30, 0x52	; 82
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	10 82       	st	Z, r1
}
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <TIMER0_setCallback>:


void TIMER0_setCallback(void (*functionPtr)(void)) {
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	00 d0       	rcall	.+0      	; 0x2614 <TIMER0_setCallback+0x6>
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	89 83       	std	Y+1, r24	; 0x01
	g_TIMER0_callBackPtr = functionPtr;
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	90 93 77 00 	sts	0x0077, r25
    2624:	80 93 76 00 	sts	0x0076, r24
}
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    263a:	e0 e2       	ldi	r30, 0x20	; 32
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	80 83       	st	Z, r24
	TWSR = 0x00;
    2642:	e1 e2       	ldi	r30, 0x21	; 33
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    2648:	e2 e2       	ldi	r30, 0x22	; 34
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2650:	e6 e5       	ldi	r30, 0x56	; 86
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	84 e0       	ldi	r24, 0x04	; 4
    2656:	80 83       	st	Z, r24
}
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <TWI_start>:

void TWI_start(void)
{
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2666:	e6 e5       	ldi	r30, 0x56	; 86
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	84 ea       	ldi	r24, 0xA4	; 164
    266c:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    266e:	e6 e5       	ldi	r30, 0x56	; 86
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	88 23       	and	r24, r24
    2676:	dc f7       	brge	.-10     	; 0x266e <TWI_start+0x10>
}
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <TWI_stop>:

void TWI_stop(void)
{
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2686:	e6 e5       	ldi	r30, 0x56	; 86
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	84 e9       	ldi	r24, 0x94	; 148
    268c:	80 83       	st	Z, r24
}
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	0f 92       	push	r0
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    26a0:	e3 e2       	ldi	r30, 0x23	; 35
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    26a8:	e6 e5       	ldi	r30, 0x56	; 86
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	84 e8       	ldi	r24, 0x84	; 132
    26ae:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26b0:	e6 e5       	ldi	r30, 0x56	; 86
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	88 23       	and	r24, r24
    26b8:	dc f7       	brge	.-10     	; 0x26b0 <TWI_writeByte+0x1c>
}
    26ba:	0f 90       	pop	r0
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    26ca:	e6 e5       	ldi	r30, 0x56	; 86
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	84 ec       	ldi	r24, 0xC4	; 196
    26d0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26d2:	e6 e5       	ldi	r30, 0x56	; 86
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	88 23       	and	r24, r24
    26da:	dc f7       	brge	.-10     	; 0x26d2 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    26dc:	e3 e2       	ldi	r30, 0x23	; 35
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
}
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	08 95       	ret

000026e8 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    26f0:	e6 e5       	ldi	r30, 0x56	; 86
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	84 e8       	ldi	r24, 0x84	; 132
    26f6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26f8:	e6 e5       	ldi	r30, 0x56	; 86
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	88 23       	and	r24, r24
    2700:	dc f7       	brge	.-10     	; 0x26f8 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2702:	e3 e2       	ldi	r30, 0x23	; 35
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
}
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	08 95       	ret

0000270e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	0f 92       	push	r0
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2718:	e1 e2       	ldi	r30, 0x21	; 33
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	88 7f       	andi	r24, 0xF8	; 248
    2720:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2722:	89 81       	ldd	r24, Y+1	; 0x01
}
    2724:	0f 90       	pop	r0
    2726:	cf 91       	pop	r28
    2728:	df 91       	pop	r29
    272a:	08 95       	ret

0000272c <UART_config>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_config(BaudRate_uart BR,Bitdata_uart BD,Parity_uart P,StopBit_uart SB)
{
    272c:	df 93       	push	r29
    272e:	cf 93       	push	r28
    2730:	00 d0       	rcall	.+0      	; 0x2732 <UART_config+0x6>
    2732:	00 d0       	rcall	.+0      	; 0x2734 <UART_config+0x8>
    2734:	0f 92       	push	r0
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	6b 83       	std	Y+3, r22	; 0x03
    2740:	4c 83       	std	Y+4, r20	; 0x04
    2742:	2d 83       	std	Y+5, r18	; 0x05

}
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const config_uart *config)
{
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	00 d0       	rcall	.+0      	; 0x275a <UART_init+0x6>
    275a:	00 d0       	rcall	.+0      	; 0x275c <UART_init+0x8>
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	9c 83       	std	Y+4, r25	; 0x04
    2762:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2764:	1a 82       	std	Y+2, r1	; 0x02
    2766:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2768:	eb e2       	ldi	r30, 0x2B	; 43
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	82 e0       	ldi	r24, 0x02	; 2
    276e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2770:	ea e2       	ldi	r30, 0x2A	; 42
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	88 e1       	ldi	r24, 0x18	; 24
    2776:	80 83       	st	Z, r24
//(1<<UCSZ0) | (1<<UCSZ1);(config->databit)
	//(EigthBits & 0x02)
	 //(EigthBits<<UCSRC) ;
	//(((EigthBits & 0x01))<<UCSZ0) | (((EigthBits & 0x02)>>1)<<UCSZ1)
	//| (((even_parity & 0x02)>>1)<<UPM1) |(((even_parity & 0x01))<<UPM0)
	UCSRC = (1<<URSEL) |(config->databit) |(config->parity)|((config->stopbit)<<USBS);
    2778:	a0 e4       	ldi	r26, 0x40	; 64
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	eb 81       	ldd	r30, Y+3	; 0x03
    277e:	fc 81       	ldd	r31, Y+4	; 0x04
    2780:	92 81       	ldd	r25, Z+2	; 0x02
    2782:	eb 81       	ldd	r30, Y+3	; 0x03
    2784:	fc 81       	ldd	r31, Y+4	; 0x04
    2786:	83 81       	ldd	r24, Z+3	; 0x03
    2788:	89 2b       	or	r24, r25
    278a:	80 68       	ori	r24, 0x80	; 128
    278c:	28 2f       	mov	r18, r24
    278e:	eb 81       	ldd	r30, Y+3	; 0x03
    2790:	fc 81       	ldd	r31, Y+4	; 0x04
    2792:	84 81       	ldd	r24, Z+4	; 0x04
    2794:	88 2f       	mov	r24, r24
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	82 2b       	or	r24, r18
    27a6:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config->baud * 8UL))) - 1);
    27a8:	eb 81       	ldd	r30, Y+3	; 0x03
    27aa:	fc 81       	ldd	r31, Y+4	; 0x04
    27ac:	80 81       	ld	r24, Z
    27ae:	91 81       	ldd	r25, Z+1	; 0x01
    27b0:	cc 01       	movw	r24, r24
    27b2:	a0 e0       	ldi	r26, 0x00	; 0
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	aa 1f       	adc	r26, r26
    27bc:	bb 1f       	adc	r27, r27
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	aa 1f       	adc	r26, r26
    27c4:	bb 1f       	adc	r27, r27
    27c6:	88 0f       	add	r24, r24
    27c8:	99 1f       	adc	r25, r25
    27ca:	aa 1f       	adc	r26, r26
    27cc:	bb 1f       	adc	r27, r27
    27ce:	9c 01       	movw	r18, r24
    27d0:	ad 01       	movw	r20, r26
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	92 e1       	ldi	r25, 0x12	; 18
    27d6:	aa e7       	ldi	r26, 0x7A	; 122
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	bc 01       	movw	r22, r24
    27dc:	cd 01       	movw	r24, r26
    27de:	0e 94 9a 14 	call	0x2934	; 0x2934 <__udivmodsi4>
    27e2:	da 01       	movw	r26, r20
    27e4:	c9 01       	movw	r24, r18
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    27ec:	e0 e4       	ldi	r30, 0x40	; 64
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	9a 81       	ldd	r25, Y+2	; 0x02
    27f4:	89 2f       	mov	r24, r25
    27f6:	99 27       	eor	r25, r25
    27f8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    27fa:	e9 e2       	ldi	r30, 0x29	; 41
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	80 83       	st	Z, r24
}
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	0f 92       	push	r0
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    281a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    281c:	eb e2       	ldi	r30, 0x2B	; 43
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	88 2f       	mov	r24, r24
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	80 72       	andi	r24, 0x20	; 32
    2828:	90 70       	andi	r25, 0x00	; 0
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	b9 f3       	breq	.-18     	; 0x281c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    282e:	ec e2       	ldi	r30, 0x2C	; 44
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2836:	0f 90       	pop	r0
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2846:	eb e2       	ldi	r30, 0x2B	; 43
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	88 23       	and	r24, r24
    284e:	dc f7       	brge	.-10     	; 0x2846 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2850:	ec e2       	ldi	r30, 0x2C	; 44
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
}
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	00 d0       	rcall	.+0      	; 0x2862 <UART_sendString+0x6>
    2862:	0f 92       	push	r0
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	9b 83       	std	Y+3, r25	; 0x03
    286a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    286c:	19 82       	std	Y+1, r1	; 0x01
    286e:	0e c0       	rjmp	.+28     	; 0x288c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	28 2f       	mov	r18, r24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	9b 81       	ldd	r25, Y+3	; 0x03
    287a:	fc 01       	movw	r30, r24
    287c:	e2 0f       	add	r30, r18
    287e:	f3 1f       	adc	r31, r19
    2880:	80 81       	ld	r24, Z
    2882:	0e 94 08 14 	call	0x2810	; 0x2810 <UART_sendByte>
		i++;
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	8f 5f       	subi	r24, 0xFF	; 255
    288a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	28 2f       	mov	r18, r24
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	9b 81       	ldd	r25, Y+3	; 0x03
    2896:	fc 01       	movw	r30, r24
    2898:	e2 0f       	add	r30, r18
    289a:	f3 1f       	adc	r31, r19
    289c:	80 81       	ld	r24, Z
    289e:	88 23       	and	r24, r24
    28a0:	39 f7       	brne	.-50     	; 0x2870 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	08 95       	ret

000028ae <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    28ae:	0f 93       	push	r16
    28b0:	1f 93       	push	r17
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <UART_receiveString+0xa>
    28b8:	0f 92       	push	r0
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	9b 83       	std	Y+3, r25	; 0x03
    28c0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28c2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	28 2f       	mov	r18, r24
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	9b 81       	ldd	r25, Y+3	; 0x03
    28ce:	8c 01       	movw	r16, r24
    28d0:	02 0f       	add	r16, r18
    28d2:	13 1f       	adc	r17, r19
    28d4:	0e 94 1f 14 	call	0x283e	; 0x283e <UART_recieveByte>
    28d8:	f8 01       	movw	r30, r16
    28da:	80 83       	st	Z, r24
    28dc:	0f c0       	rjmp	.+30     	; 0x28fc <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	8f 5f       	subi	r24, 0xFF	; 255
    28e2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	28 2f       	mov	r18, r24
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	8a 81       	ldd	r24, Y+2	; 0x02
    28ec:	9b 81       	ldd	r25, Y+3	; 0x03
    28ee:	8c 01       	movw	r16, r24
    28f0:	02 0f       	add	r16, r18
    28f2:	13 1f       	adc	r17, r19
    28f4:	0e 94 1f 14 	call	0x283e	; 0x283e <UART_recieveByte>
    28f8:	f8 01       	movw	r30, r16
    28fa:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	28 2f       	mov	r18, r24
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	9b 81       	ldd	r25, Y+3	; 0x03
    2906:	fc 01       	movw	r30, r24
    2908:	e2 0f       	add	r30, r18
    290a:	f3 1f       	adc	r31, r19
    290c:	80 81       	ld	r24, Z
    290e:	83 32       	cpi	r24, 0x23	; 35
    2910:	31 f7       	brne	.-52     	; 0x28de <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	9b 81       	ldd	r25, Y+3	; 0x03
    291c:	fc 01       	movw	r30, r24
    291e:	e2 0f       	add	r30, r18
    2920:	f3 1f       	adc	r31, r19
    2922:	10 82       	st	Z, r1
}
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	1f 91       	pop	r17
    2930:	0f 91       	pop	r16
    2932:	08 95       	ret

00002934 <__udivmodsi4>:
    2934:	a1 e2       	ldi	r26, 0x21	; 33
    2936:	1a 2e       	mov	r1, r26
    2938:	aa 1b       	sub	r26, r26
    293a:	bb 1b       	sub	r27, r27
    293c:	fd 01       	movw	r30, r26
    293e:	0d c0       	rjmp	.+26     	; 0x295a <__udivmodsi4_ep>

00002940 <__udivmodsi4_loop>:
    2940:	aa 1f       	adc	r26, r26
    2942:	bb 1f       	adc	r27, r27
    2944:	ee 1f       	adc	r30, r30
    2946:	ff 1f       	adc	r31, r31
    2948:	a2 17       	cp	r26, r18
    294a:	b3 07       	cpc	r27, r19
    294c:	e4 07       	cpc	r30, r20
    294e:	f5 07       	cpc	r31, r21
    2950:	20 f0       	brcs	.+8      	; 0x295a <__udivmodsi4_ep>
    2952:	a2 1b       	sub	r26, r18
    2954:	b3 0b       	sbc	r27, r19
    2956:	e4 0b       	sbc	r30, r20
    2958:	f5 0b       	sbc	r31, r21

0000295a <__udivmodsi4_ep>:
    295a:	66 1f       	adc	r22, r22
    295c:	77 1f       	adc	r23, r23
    295e:	88 1f       	adc	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	1a 94       	dec	r1
    2964:	69 f7       	brne	.-38     	; 0x2940 <__udivmodsi4_loop>
    2966:	60 95       	com	r22
    2968:	70 95       	com	r23
    296a:	80 95       	com	r24
    296c:	90 95       	com	r25
    296e:	9b 01       	movw	r18, r22
    2970:	ac 01       	movw	r20, r24
    2972:	bd 01       	movw	r22, r26
    2974:	cf 01       	movw	r24, r30
    2976:	08 95       	ret

00002978 <__prologue_saves__>:
    2978:	2f 92       	push	r2
    297a:	3f 92       	push	r3
    297c:	4f 92       	push	r4
    297e:	5f 92       	push	r5
    2980:	6f 92       	push	r6
    2982:	7f 92       	push	r7
    2984:	8f 92       	push	r8
    2986:	9f 92       	push	r9
    2988:	af 92       	push	r10
    298a:	bf 92       	push	r11
    298c:	cf 92       	push	r12
    298e:	df 92       	push	r13
    2990:	ef 92       	push	r14
    2992:	ff 92       	push	r15
    2994:	0f 93       	push	r16
    2996:	1f 93       	push	r17
    2998:	cf 93       	push	r28
    299a:	df 93       	push	r29
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	ca 1b       	sub	r28, r26
    29a2:	db 0b       	sbc	r29, r27
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	09 94       	ijmp

000029b0 <__epilogue_restores__>:
    29b0:	2a 88       	ldd	r2, Y+18	; 0x12
    29b2:	39 88       	ldd	r3, Y+17	; 0x11
    29b4:	48 88       	ldd	r4, Y+16	; 0x10
    29b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    29b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    29ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    29bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    29be:	9b 84       	ldd	r9, Y+11	; 0x0b
    29c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    29c2:	b9 84       	ldd	r11, Y+9	; 0x09
    29c4:	c8 84       	ldd	r12, Y+8	; 0x08
    29c6:	df 80       	ldd	r13, Y+7	; 0x07
    29c8:	ee 80       	ldd	r14, Y+6	; 0x06
    29ca:	fd 80       	ldd	r15, Y+5	; 0x05
    29cc:	0c 81       	ldd	r16, Y+4	; 0x04
    29ce:	1b 81       	ldd	r17, Y+3	; 0x03
    29d0:	aa 81       	ldd	r26, Y+2	; 0x02
    29d2:	b9 81       	ldd	r27, Y+1	; 0x01
    29d4:	ce 0f       	add	r28, r30
    29d6:	d1 1d       	adc	r29, r1
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	ed 01       	movw	r28, r26
    29e4:	08 95       	ret

000029e6 <itoa>:
    29e6:	fb 01       	movw	r30, r22
    29e8:	9f 01       	movw	r18, r30
    29ea:	e8 94       	clt
    29ec:	42 30       	cpi	r20, 0x02	; 2
    29ee:	c4 f0       	brlt	.+48     	; 0x2a20 <itoa+0x3a>
    29f0:	45 32       	cpi	r20, 0x25	; 37
    29f2:	b4 f4       	brge	.+44     	; 0x2a20 <itoa+0x3a>
    29f4:	4a 30       	cpi	r20, 0x0A	; 10
    29f6:	29 f4       	brne	.+10     	; 0x2a02 <itoa+0x1c>
    29f8:	97 fb       	bst	r25, 7
    29fa:	1e f4       	brtc	.+6      	; 0x2a02 <itoa+0x1c>
    29fc:	90 95       	com	r25
    29fe:	81 95       	neg	r24
    2a00:	9f 4f       	sbci	r25, 0xFF	; 255
    2a02:	64 2f       	mov	r22, r20
    2a04:	77 27       	eor	r23, r23
    2a06:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__udivmodhi4>
    2a0a:	80 5d       	subi	r24, 0xD0	; 208
    2a0c:	8a 33       	cpi	r24, 0x3A	; 58
    2a0e:	0c f0       	brlt	.+2      	; 0x2a12 <itoa+0x2c>
    2a10:	89 5d       	subi	r24, 0xD9	; 217
    2a12:	81 93       	st	Z+, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	a1 f7       	brne	.-24     	; 0x2a02 <itoa+0x1c>
    2a1a:	16 f4       	brtc	.+4      	; 0x2a20 <itoa+0x3a>
    2a1c:	5d e2       	ldi	r21, 0x2D	; 45
    2a1e:	51 93       	st	Z+, r21
    2a20:	10 82       	st	Z, r1
    2a22:	c9 01       	movw	r24, r18
    2a24:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <strrev>

00002a28 <strrev>:
    2a28:	dc 01       	movw	r26, r24
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	67 2f       	mov	r22, r23
    2a2e:	71 91       	ld	r23, Z+
    2a30:	77 23       	and	r23, r23
    2a32:	e1 f7       	brne	.-8      	; 0x2a2c <strrev+0x4>
    2a34:	32 97       	sbiw	r30, 0x02	; 2
    2a36:	04 c0       	rjmp	.+8      	; 0x2a40 <strrev+0x18>
    2a38:	7c 91       	ld	r23, X
    2a3a:	6d 93       	st	X+, r22
    2a3c:	70 83       	st	Z, r23
    2a3e:	62 91       	ld	r22, -Z
    2a40:	ae 17       	cp	r26, r30
    2a42:	bf 07       	cpc	r27, r31
    2a44:	c8 f3       	brcs	.-14     	; 0x2a38 <strrev+0x10>
    2a46:	08 95       	ret

00002a48 <__udivmodhi4>:
    2a48:	aa 1b       	sub	r26, r26
    2a4a:	bb 1b       	sub	r27, r27
    2a4c:	51 e1       	ldi	r21, 0x11	; 17
    2a4e:	07 c0       	rjmp	.+14     	; 0x2a5e <__udivmodhi4_ep>

00002a50 <__udivmodhi4_loop>:
    2a50:	aa 1f       	adc	r26, r26
    2a52:	bb 1f       	adc	r27, r27
    2a54:	a6 17       	cp	r26, r22
    2a56:	b7 07       	cpc	r27, r23
    2a58:	10 f0       	brcs	.+4      	; 0x2a5e <__udivmodhi4_ep>
    2a5a:	a6 1b       	sub	r26, r22
    2a5c:	b7 0b       	sbc	r27, r23

00002a5e <__udivmodhi4_ep>:
    2a5e:	88 1f       	adc	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	5a 95       	dec	r21
    2a64:	a9 f7       	brne	.-22     	; 0x2a50 <__udivmodhi4_loop>
    2a66:	80 95       	com	r24
    2a68:	90 95       	com	r25
    2a6a:	bc 01       	movw	r22, r24
    2a6c:	cd 01       	movw	r24, r26
    2a6e:	08 95       	ret

00002a70 <_exit>:
    2a70:	f8 94       	cli

00002a72 <__stop_program>:
    2a72:	ff cf       	rjmp	.-2      	; 0x2a72 <__stop_program>
